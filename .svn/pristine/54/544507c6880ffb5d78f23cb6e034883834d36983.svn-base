package com.chunqiu.mrjuly.modules.platform.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.hotelinfo.model.ClientBianmaInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.service.ClientBianmaInfoService;
import com.chunqiu.mrjuly.modules.install.service.ClientComplaintsService;
import com.chunqiu.mrjuly.modules.lyhoteldevicerelation.model.LyHotelDeviceRelation;
import com.chunqiu.mrjuly.modules.lyhoteldevicerelation.service.LyHotelDeviceRelationService;
import com.chunqiu.mrjuly.modules.platform.model.LocalNotice;
import com.chunqiu.mrjuly.modules.platform.model.MessageTemplate;
import com.chunqiu.mrjuly.modules.platform.service.LocalNoticeService;
import com.chunqiu.mrjuly.modules.platform.service.MessageTemplateService;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.List;

/**
 * 本地服务系统端的消息管理
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/platform/notice")
public class LocalNoticeController extends BaseController {

    @Autowired
    private LocalNoticeService localNoticeService;

    @Autowired
    private ClientBianmaInfoService clientBianmaInfoService;

    @Autowired
    private MessageTemplateService messageTemplateService;
    @Autowired
    private ClientComplaintsService clientComplaintsService;
    @Autowired
    private LyHotelDeviceRelationService lyHotelDeviceRelationService;
    /**
     * 登录到公告页面
     *
     * @return
     */
    @Log("登录到公告页面")
    @RequestMapping("index")
    @RequiresPermissions("platform:notice:view")
    public String index() {
        return "platform/localNotice";
    }

    /**
     * 初始化公告管理数据页面
     *
     * @param localNotice
     * @param param
     * @return
     */
    @Log("公告页面初始换列表")
    @ResponseBody
    @RequestMapping("list")
    @RequiresPermissions("platform:notice:view")
    public Grid list(LocalNotice localNotice, GridParam param) {
        localNotice.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        return localNoticeService.findPage(localNotice, param);
    }

    /**
     * 登录到公告新增/编辑页面
     *
     * @param localNotice
     * @param model
     * @return
     */
    @Log("登录公告管理新增/编辑页面")
    @RequestMapping(value = "form")
    @RequiresPermissions("platform:notice:view")
    public String form(LocalNotice localNotice, ModelMap model) {
        if (localNotice.getNoticeTitle() == null && localNotice.getId() != null) {
            localNotice = localNoticeService.get(localNotice.getId());
        }
        model.addAttribute("localNotice", localNotice);
        return "platform/localNoticeForm";
    }

    /**
     * 保存方法
     *
     * @param localNotice
     * @param model
     * @return
     */
    @Log("保存公告")
    @RequestMapping("save")
    @RequiresPermissions("platform:notice:edit")
    public String save(LocalNotice localNotice, ModelMap model) {
        try {
            localNotice.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
            localNoticeService.save(localNotice);
            Integer equipmentNumber = UserUtils.getUser().getHotelCodeId();
            List<String> list = clientComplaintsService.getEncoding(equipmentNumber);
            for (int i=0;i<list.size();i++){
                JPushUtil.sendNotify2(list.get(i), localNotice.getNoticeContent());
            }
        } catch (Exception e) {
            model.addAttribute("error", "保存失败！");
            return form(localNotice, model);
        }
        return successPath;
    }

    /**
     * 查看详情
     *
     * @param localNotice
     * @param model
     * @return
     */
    @Log("查看详情")
    @RequestMapping("form1")
    @RequiresPermissions("platform:notice:view")
    public String form1(LocalNotice localNotice, ModelMap model) {
        localNotice = localNoticeService.get(localNotice.getId());
        model.addAttribute("localNotice", localNotice);
        if (localNotice.getNoticeRoll() == 1) {
            model.addAttribute("noticeRoll", "是");
        } else if (localNotice.getNoticeRoll() == 2) {
            model.addAttribute("noticeRoll", "否");
        }
        if (localNotice.getNoticeForm() == 1) {
            model.addAttribute("noticeForm", localNotice.getCreateDate());
        } else if (localNotice.getNoticeForm() == 2) {
            model.addAttribute("noticeForm", localNotice.getScheduledReleaseTime());
        }
        return "platform/localNoticeDetails";
    }

    /**
     * 删除方法
     *
     * @param localNotice
     * @return
     */
    @Log("删除信息")
    @RequestMapping("delete")
    @ResponseBody
    @RequiresPermissions("platform:notice:edit")
    public Json delete(LocalNotice localNotice) {
        Json json = new Json();
        try {
            localNoticeService.delete(localNotice);
            json.setSuccess(true);
        } catch (Exception e) {

            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }

    /**
     * 批量删除
     *
     * @param localNotice
     * @return
     */
    @Log("批量删除信息")
    @RequestMapping("batchDelete")
    @ResponseBody
    @RequiresPermissions("platform:notice:edit")
    public Json batchDelete(LocalNotice localNotice) {
        Json json = new Json();
        try {
            List<LocalNotice> localNotices = new ArrayList<>();
            String[] idList = localNotice.getIdList().split(",");
            for (int i = 0; i < idList.length; i++) {
                LocalNotice goodsInfo = new LocalNotice();
                goodsInfo.setId(Integer.valueOf(idList[i]));
                localNotices.add(goodsInfo);
            }
            localNotice.preUpdate();
            localNoticeService.delFramesByIdList(localNotice, localNotices);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("删除失败！ msg={}", e.getMessage(), e);

            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }

    /**
     * 初始化通知数据
     *
     * @param localNotice
     * @param param
     * @return
     */
    @Log("通知页面初始换列表")
    @ResponseBody
    @RequestMapping("pageList")
    @RequiresPermissions("platform:notice:view")
    public Grid pageList(LocalNotice localNotice, GridParam param) {
        localNotice.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        return localNoticeService.findPageList(localNotice, param);
    }

    /**
     * 登录通知的新增页面
     *
     * @param localNotice
     * @param model
     * @return
     */
    @Log("登录通知管理新增")
    @RequestMapping(value = "formList")
    @RequiresPermissions("platform:notice:view")
    public String formList(LocalNotice localNotice, ModelMap model) {
        if (localNotice.getNoticeTitle() == null && localNotice.getId() != null) {
            localNotice = localNoticeService.get(localNotice.getId());
        }
        model.addAttribute("localNotice", localNotice);
        return "platform/noticeInform";
    }

    /**
     * 保存新建数据的方法
     *
     * @param localNotice
     * @param model
     * @return
     */
    @Log("保存方法")
    @RequestMapping("saveAll")
    @RequiresPermissions("platform:notice:edit")
    public String saveAll(LocalNotice localNotice, ModelMap model) {
        try {
            localNotice.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
            localNoticeService.saveAll(localNotice);
            Integer equipmentNumber = UserUtils.getUser().getHotelCodeId();
            List<String> list = clientComplaintsService.getEncoding(equipmentNumber);
            for (int i=0;i<list.size();i++){
                JPushUtil.sendNotify2(list.get(i), localNotice.getNoticeContent());
            }
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", "保存失败！");
            return formList(localNotice, model);
        }
        return successPath;
    }

    /**
     * 查看每条数据的详情
     *
     * @param localNotice
     * @param model
     * @return
     */
    @Log("查看详情")
    @RequestMapping("details")
    @RequiresPermissions("platform:notice:view")
    public String details(LocalNotice localNotice, ModelMap model) {
        localNotice = localNoticeService.get(localNotice.getId());
        model.addAttribute("localNotice", localNotice);

        if (localNotice.getNoticeRoll() == 1) {
            model.addAttribute("noticeRoll", "是");
        } else if (localNotice.getNoticeRoll() == 2) {
            model.addAttribute("noticeRoll", "否");
        }
        return "platform/noticeInformForm";
    }

    /**
     * 初始换消息列表数据
     *
     * @param localNotice
     * @param param
     * @return
     */
    @Log("消息页面初始换列表")
    @ResponseBody
    @RequestMapping("allList")
    @RequiresPermissions("platform:notice:view")
    public Grid allList(LocalNotice localNotice, GridParam param) {
        localNotice.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        return localNoticeService.selectPageList(localNotice, param);
    }

    /**
     * 查看消息详情
     *
     * @param localNotice
     * @param model
     * @return
     */
    @Log("查看详情")
    @RequestMapping("lookDetails")
    @RequiresPermissions("platform:notice:view")
    public String lookDetails(LocalNotice localNotice, ModelMap model) {
        localNotice = localNoticeService.get(localNotice.getId());
        model.addAttribute("localNotice", localNotice);
        return "platform/messageForm";
    }

    /**
     * 新增页面
     *
     * @param localNotice
     * @param clientBianmaInfo
     * @param model
     * @return
     */
    @Log("登录消息管理新增页面")
    @RequestMapping(value = "messageForm")
    @RequiresPermissions("platform:notice:view")
    public String messageForm(LocalNotice localNotice, MessageTemplate messageTemplate, ClientBianmaInfo clientBianmaInfo, ModelMap model) {
        if (localNotice.getNoticeTitle() == null && localNotice.getId() != null) {
            localNotice = localNoticeService.get(localNotice.getId());
        }
        clientBianmaInfo.setEquipmentNumber(UserUtils.getUser().getHotelCodeId());
        /*List<ClientBianmaInfo> clientBianmaInfoList = clientBianmaInfoService.findList(clientBianmaInfo);*/
        LyHotelDeviceRelation lyHotelDeviceRelation = new LyHotelDeviceRelation();
        lyHotelDeviceRelation.setHotelId(UserUtils.getUser().getHotelCodeId());
        List<LyHotelDeviceRelation> lyHotelDeviceRelationList = lyHotelDeviceRelationService.getRoomsListByHotelId(lyHotelDeviceRelation);
        messageTemplate.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        List<MessageTemplate> messageTemplateList = messageTemplateService.findList(messageTemplate);
        model.addAttribute("clientBianmaInfoList", lyHotelDeviceRelationList);
        model.addAttribute("messageTemplateList", messageTemplateList);
        model.addAttribute("localNotice", localNotice);
        return "platform/newMessage";
    }

    /**
     * 保存方法
     *
     * @param localNotice
     * @param model
     * @return
     */
    @Log("保存方法")
    @RequestMapping("saveMessage")
    @RequiresPermissions("platform:notice:edit")
    public String saveMessage(LocalNotice localNotice, ModelMap model) {
        try {
            localNotice.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
            localNoticeService.saveMessage(localNotice);
            String list = clientComplaintsService.getEncoding2(localNotice.getHotelCodeId(),localNotice.getRoomNumber());
            JPushUtil.sendNotify2(list, localNotice.getNoticeContent());
        } catch (Exception e) {
            model.addAttribute("error", "保存失败！");
            return formList(localNotice, model);
        }
        return successPath;
    }

    @Log("保存方法")
    @RequestMapping("saveText")
    @RequiresPermissions("platform:notice:edit")
    public String saveText(MessageTemplate messageTemplate, ModelMap model) {
        try {
            messageTemplate.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
            messageTemplateService.save(messageTemplate);
        } catch (Exception e) {

            model.addAttribute("error", "保存失败！");

        }
        return successPath;
    }
}
