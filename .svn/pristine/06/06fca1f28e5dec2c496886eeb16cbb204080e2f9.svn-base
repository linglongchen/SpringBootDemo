package com.chunqiu.mrjuly.modules.hotelinfo.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.OssUtils.OSSClientConstants;
import com.chunqiu.mrjuly.common.utils.OssUtils.OSSClientUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.hotelinfo.model.DepartmentCategories;
import com.chunqiu.mrjuly.modules.hotelinfo.model.DepartmentGoodsInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.model.DepartmentInfoList;
import com.chunqiu.mrjuly.modules.hotelinfo.service.DepartmentCategoriesService;
import com.chunqiu.mrjuly.modules.hotelinfo.service.DepartmentGoodsInfoService;
import com.chunqiu.mrjuly.modules.hotelinfo.service.DepartmentInfoService;

import lombok.extern.slf4j.Slf4j;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.List;

/**
 * 商品创建Controller
 * @author 周天
 * @version 2019-03-08
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/hotelinfo/departmentGoodsInfo")
public class 	DepartmentGoodsInfoController extends BaseController {

	@Autowired
	private DepartmentGoodsInfoService departmentGoodsInfoService;
	@Autowired
	private DepartmentInfoService departmentInfoService;
	@Autowired
	private DepartmentCategoriesService departmentCategoriesService;
	
	/**
	 * @Description：商品创建列表页面
	 * @author 周天
	 */
	@Log("打开商品创建列表页面")
	@RequestMapping("index")
	@RequiresPermissions("hotelinfo:departmentGoodsInfo:view")
	public String index(DepartmentGoodsInfo departmentGoodsInfo,ModelMap model){
		departmentGoodsInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		departmentGoodsInfo.setDepartmentId(UserUtils.getUser().getDepartmentId());
		List<DepartmentInfoList> departmentInfoListList = departmentGoodsInfoService.departmentGoodsInfoList(departmentGoodsInfo);
		model.addAttribute("departmentInfoListList", departmentInfoListList);
		return "hotelinfo/departmentGoodsInfoList";
	}

	/**
	 * @Description：商品创建列表数据
	 * @author 周天
	 */
	@Log("获取商品创建列表数据")
	@RequestMapping("list")
	@ResponseBody
	@RequiresPermissions("hotelinfo:departmentGoodsInfo:view")
	public Grid list(DepartmentGoodsInfo departmentGoodsInfo, GridParam param) {
		if (departmentGoodsInfo.getDepartmentId() != null){
			departmentGoodsInfo.setDepartmentId(departmentGoodsInfo.getDepartmentId());
		}else {
			departmentGoodsInfo.setDepartmentId(UserUtils.getUser().getDepartmentId());
		}
		departmentGoodsInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		return departmentGoodsInfoService.findPage(departmentGoodsInfo, param);
	}
	/**
	 * @Description：商品创建表单页面--新增/编辑
	 * @author 周天
	 */
	@Log("打开商品创建表单页面--新增/编辑")
	@RequestMapping(value = "form")
	@RequiresPermissions("hotelinfo:departmentGoodsInfo:view")
	public String form(DepartmentGoodsInfo departmentGoodsInfo, ModelMap model) {
		Integer hotelId = UserUtils.getUser().getHotelCodeId();
		try {
			List<String> stringList = new ArrayList<>();
			List<String> stringInfoList = new ArrayList<>();
			if (departmentGoodsInfo.getId() == null){
				stringList.add("/images/default2.png");
				departmentGoodsInfo.setDepartmentGoodsPicList(stringList);
				for (int i = 0;i< 6;i++){
					stringInfoList.add("/images/default2.png");
					departmentGoodsInfo.setDepartmentGoodsPicInfoList(stringInfoList);
				}

			}else {
				departmentGoodsInfo = departmentGoodsInfoService.get(departmentGoodsInfo.getId());
				String [] goodsPic = departmentGoodsInfo.getDepartmentGoodsPic().split(",");
				String [] goodsInfoPic = departmentGoodsInfo.getDepartmentGoodsInfoPic().split(",");
				int sum1 = 0;
				for (int i = 0;i<goodsPic.length;i++){
					sum1++;
					stringList.add(goodsPic[i]);
					departmentGoodsInfo.setDepartmentGoodsPicList(stringList);
				}

				if (sum1 == 0){
					stringList.add("/images/default2.png");
				}

				int sum = 0;
				for (int i = 0;i<goodsInfoPic.length;i++){
					sum++;
					stringInfoList.add(goodsInfoPic[i]);
					departmentGoodsInfo.setDepartmentGoodsPicInfoList(stringInfoList);
				}
				if (sum==1){
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
				}else if (sum==2){
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
				}else if (sum==3){
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
				}else if (sum==4){
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
				}else if (sum==5){
					stringInfoList.add("/images/default2.png");
				}else if (sum == 0){
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
					stringInfoList.add("/images/default2.png");
				}
			}
		}catch (Exception e){
			e.printStackTrace();
		}

		//部门
		DepartmentGoodsInfo departmentGoodsInfo1 = new DepartmentGoodsInfo();
		departmentGoodsInfo1.setHotelCodeId(hotelId);
		departmentGoodsInfo1.setDepartmentId(UserUtils.getUser().getDepartmentId());
		List<DepartmentInfoList> departmentInfoListList = departmentGoodsInfoService.departmentGoodsInfoList(departmentGoodsInfo1);
		
		//商品类别
		List<DepartmentCategories> departmentCategoriesList = null;
		if (departmentGoodsInfo.getId() == null) {
			departmentGoodsInfo.setHotelCodeId(hotelId);
			departmentCategoriesList = departmentGoodsInfoService.departmentCategoriesList(departmentGoodsInfo);
		} else {
			DepartmentCategories condition = new DepartmentCategories();
			condition.setHotelCodeId(hotelId);
			condition.setDepartmentId(departmentGoodsInfo.getDepartmentId());
			departmentCategoriesList = departmentCategoriesService.getCategoriesByDepartment(condition);
		}
		
		//查询服务方式
		DepartmentInfoList departmentInfoList  = new DepartmentInfoList();
		departmentInfoList.setHotelCodeId(hotelId);
		List<DepartmentInfoList> serviceModeList = departmentInfoService.serviceModeList(departmentInfoList);

		model.addAttribute("serviceMode", serviceModeList);
		model.addAttribute("departmentInfoListList", departmentInfoListList);
		model.addAttribute("departmentCategoriesList", departmentCategoriesList);
		model.addAttribute("departmentGoodsInfo", departmentGoodsInfo);
		return "hotelinfo/departmentGoodsInfoForm";
	}
	/**
	 * @Description：商品创建新增/编辑 保存方法
	 * @author 周天
	 */
	@Log("新增/编辑商品创建")
	@RequestMapping("saveDepartmentGoodsInfo")
	@RequiresPermissions("hotelinfo:departmentGoodsInfo:edit")
	public String saveDepartmentGoodsInfo(DepartmentGoodsInfo departmentGoodsInfo, ModelMap model){
		try{
			String[] serviceMode = departmentGoodsInfo.getServiceMode().split(",");
			departmentGoodsInfo.setServiceMode(serviceMode[0]);
			if (StringUtils.isBlank(departmentGoodsInfo.getDepartmentGoodsInfoPic())) {
				departmentGoodsInfo.setDepartmentGoodsInfoPic("/images/default2.png");
			}
			//商品图
			String departmentGoodsPic = OSSClientUtils.ossUploadPictures(departmentGoodsInfo.getDepartmentGoodsPic());
			departmentGoodsInfo.setDepartmentGoodsPic(departmentGoodsPic);
			//商品详情图
			String departmentGoodsInfoPic = OSSClientUtils.ossUploadPictures(departmentGoodsInfo.getDepartmentGoodsInfoPic());
			departmentGoodsInfo.setDepartmentGoodsInfoPic(departmentGoodsInfoPic);
			//商品视频
			if (departmentGoodsInfo.getDepartmentGoodsVideo()!=null&&!"".equals(departmentGoodsInfo.getDepartmentGoodsVideo())){
				if (! departmentGoodsInfo.getDepartmentGoodsVideo().contains("http")){
					boolean status = departmentGoodsInfo.getDepartmentGoodsVideo().contains(":/");
					if(status){
						String position = (departmentGoodsInfo.getDepartmentGoodsVideo().split(":/"))[1];
						departmentGoodsInfo.setDepartmentGoodsVideo(OSSClientConstants.URL+position);
					}else {
						departmentGoodsInfo.setDepartmentGoodsVideo(OSSClientConstants.URL+departmentGoodsInfo.getDepartmentGoodsVideo());
					}
				}
			}
			departmentGoodsInfoService.save(departmentGoodsInfo);
		}catch(Exception e){
			log.error("保存失败！ msg={}", e.getMessage(), e);

			model.addAttribute("error", "保存失败！");
			return form(departmentGoodsInfo, model);
		}
		return successPath;
	}
	/**
	 * @Description：商品创建数据删除方法
	 * @author 周天
	 */
	@Log("删除商品创建")
	@RequestMapping("delDepartmentGoodsInfo")
	@ResponseBody
	@RequiresPermissions("hotelinfo:departmentGoodsInfo:edit")
	public Json delDepartmentGoodsInfo(DepartmentGoodsInfo departmentGoodsInfo){
		Json json = new Json();
		try{
			departmentGoodsInfoService.delete(departmentGoodsInfo);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("删除失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("删除失败！");
		}
		return json;
	}

	@Log("批量删除商品创建")
	@RequestMapping("framesDelGoods")
	@ResponseBody
	@RequiresPermissions("hotelinfo:departmentGoodsInfo:edit")
	public Json framesDelGoods(DepartmentGoodsInfo departmentGoodsInfo){
		Json json = new Json();
		try{
			List<DepartmentGoodsInfo> departmentGoodsInfos = new ArrayList<>();
			String[] idList = departmentGoodsInfo.getIdList().split(",");
			for (int i = 0;i<idList.length;i++){
				DepartmentGoodsInfo goodsInfo = new DepartmentGoodsInfo();
				goodsInfo.setId(Integer.valueOf(idList[i]));
				departmentGoodsInfos.add(goodsInfo);
			}
			departmentGoodsInfo.preUpdate();
			departmentGoodsInfoService.delFramesByIdList(departmentGoodsInfo,departmentGoodsInfos);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("删除失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("删除失败！");
		}
		return json;
	}


	@Log("更新上下架状态")
	@RequestMapping("framesStatus")
	@ResponseBody
	@RequiresPermissions("hotelinfo:departmentGoodsInfo:edit")
	public Json framesStatus(DepartmentGoodsInfo departmentGoodsInfo){
		Json json = new Json();
		try{
			List<DepartmentGoodsInfo> departmentGoodsInfos = new ArrayList<>();
			String[] idList = departmentGoodsInfo.getIdList().split(",");
			for (int i = 0;i<idList.length;i++){
				DepartmentGoodsInfo goodsInfo = new DepartmentGoodsInfo();
				goodsInfo.setId(Integer.valueOf(idList[i]));
				departmentGoodsInfos.add(goodsInfo);
			}
			departmentGoodsInfo.preUpdate();
			departmentGoodsInfoService.updateFramesByIdList(departmentGoodsInfo,departmentGoodsInfos);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("失败！");
		}
		return json;
	}

	@Log("更改服务方式")
	@RequestMapping("updateServiceMode")
	@ResponseBody
	public List<DepartmentInfoList> updateServiceMode(DepartmentGoodsInfo departmentGoodsInfo, ModelMap modelMap){
			//更新服务方式
			departmentGoodsInfoService.updateServceMode(departmentGoodsInfo);
			//查询服务方式
			DepartmentInfoList departmentInfoList  = new DepartmentInfoList();
			departmentInfoList.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
			List<DepartmentInfoList> serviceModeList = departmentInfoService.serviceModeList(departmentInfoList);
			return serviceModeList;
	}

	@Log("根据酒店部门查询类别")
	@RequestMapping("getCategoriesByDepartment")
	@ResponseBody
	@RequiresPermissions("hotelinfo:departmentGoodsInfo:view")
	public  List<DepartmentCategories> getCategoriesByDepartment(DepartmentCategories condition) {
		condition.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		return departmentCategoriesService.getCategoriesByDepartment(condition);
	}
}
