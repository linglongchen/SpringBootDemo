package com.chunqiu.mrjuly.modules.adviertisement.controller;

import com.aliyun.oss.OSSClient;
import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.enums.RedisKeyCode;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.CacheRedisUtil;
import com.chunqiu.mrjuly.common.utils.OssUtils.OSSClientConstants;
import com.chunqiu.mrjuly.common.utils.OssUtils.OSSClientUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.advertisement.model.BanAdvertisementType;
import com.chunqiu.mrjuly.modules.advertisement.service.BanAdvertisementTypeService;
import com.chunqiu.mrjuly.modules.advertisingcart.model.AdvertisingCart;
import com.chunqiu.mrjuly.modules.advertisingcart.service.AdvertisingCartService;
import com.chunqiu.mrjuly.modules.advertisingorder.model.AdvertisingOrder;
import com.chunqiu.mrjuly.modules.advertisingorder.service.AdvertisingOrderService;
import com.chunqiu.mrjuly.modules.adviertisement.model.AdvertisementUpload;
import com.chunqiu.mrjuly.modules.adviertisement.model.AdviertisementType;
import com.chunqiu.mrjuly.modules.adviertisement.model.CheckRecord;
import com.chunqiu.mrjuly.modules.adviertisement.service.AdviertisementTypeService;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.service.HotelInfoService;
import com.chunqiu.mrjuly.modules.install.model.SysParameter;
import com.chunqiu.mrjuly.modules.install.service.SysParameterService;

import lombok.extern.slf4j.Slf4j;
import net.sourceforge.pinyin4j.PinyinHelper;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * 广告管理Controller
 *
 * @author chen
 * @version 2019-02-27
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/adviertisement/adviertisementType")
@Transactional
public class AdviertisementTypeController extends BaseController {

    @Autowired
    private AdviertisementTypeService adviertisementTypeService;
    @Autowired
    private HotelInfoService hotelInfoService;
    @Autowired
    private AdvertisingOrderService advertisingOrderService;
    @Autowired
    private BanAdvertisementTypeService banAdvertisementTypeService;
    @Autowired
    private SysParameterService sysParameterService;
    @Autowired
    private AdvertisingCartService advertisingCartService;
	@Autowired
	private CacheRedisUtil redisUtil;
	
    /**
     * @Description：广告管理列表页面
     * @author chen
     */
    @Log("打开广告管理列表页面")
    @RequestMapping("index")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String index() {
        return "adviertisement/adviertisementTypeList";
    }

    /**
     * @Description：广告管理列表数据
     * @author chen
     */
    @Log("获取广告管理列表数据")
    @RequestMapping("list")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid list(AdviertisementType adviertisementType, GridParam param) {
        return adviertisementTypeService.findPage(adviertisementType, param);
    }

    /**
     * @Description：广告管理表单页面--新增/编辑
     * @author chen
     */
    @Log("打开广告管理表单页面--新增/编辑")
    @RequestMapping(value = "form")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String form(AdviertisementType adviertisementType, ModelMap model) {
        if (adviertisementType.getId() == null) {
            return "adviertisement/adviertisementTypeForm";
        } else {
            adviertisementType = adviertisementTypeService.get(adviertisementType.getId());
            model.addAttribute("adviertisementType", adviertisementType);
            return "adviertisement/adviertisementTypeForm";
        }
    }

    /**
     * @Description：广告管理新增/编辑 保存方法
     * @author chen
     */
    @Log("新增/编辑广告管理")
    @RequestMapping("saveAdviertisementType")
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public String saveAdviertisementType(AdviertisementType adviertisementType, ModelMap model) {
        try {
            adviertisementType.setCreateDate(new Date());
            adviertisementTypeService.save(adviertisementType);
        } catch (Exception e) {
            log.error("保存失败！ msg={}", e.getMessage(), e);
            model.addAttribute("error", "保存失败！");
            return form(adviertisementType, model);
        }
        return successPath;
    }

    /**
     * @Description：广告管理数据删除方法
     * @author chen
     */
    @Log("删除广告管理")
    @RequestMapping("delAdviertisementType")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public Json delAdviertisementType(AdviertisementType adviertisementType) {
        Json json = new Json();
        try {
            adviertisementTypeService.delete(adviertisementType);
            //同时删除二级和三级管理
            List<Integer> list = adviertisementTypeService.getType2Id(adviertisementType.getId());
            adviertisementTypeService.deleteType2(adviertisementType.getId());
            for (int i = 0; i < list.size(); i++) {
                adviertisementType.setType2Id(list.get(i));
                adviertisementTypeService.deleteType3(adviertisementType.getType2Id());
            }
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("删除失败！ msg={}", e.getMessage(), e);
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }

    @RequestMapping("getBanType2")
    @ResponseBody
    @Log("二级菜单管理")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid getBanType2(AdviertisementType adviertisementType, GridParam param) {
        Grid grid = adviertisementTypeService.getBanType2(adviertisementType, param);
        return grid;
    }

    @RequestMapping("getType2")
    @ResponseBody
    @Log("二级菜单管理")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid getType2(AdviertisementType adviertisementType, GridParam param) {
        Grid grid = adviertisementTypeService.getType2(adviertisementType, param);
        return grid;
    }

    @RequestMapping("getType3")
    @ResponseBody
    @Log("三级菜单管理")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid getType3(AdviertisementType adviertisementType, GridParam param) {
        Grid grid = adviertisementTypeService.getType3(adviertisementType, param);
        return grid;
    }

    @RequestMapping("getBanType3")
    @ResponseBody
    @Log("三级菜单管理")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid getBanType3(AdviertisementType adviertisementType, GridParam param) {
        List<Integer> list1 = adviertisementTypeService.getType1Id(adviertisementType.getTypeId());
        Grid grid = adviertisementTypeService.getBanType3(list1, param);
        return grid;
    }

    @Log("删除二级广告管理")
    @RequestMapping("delType2")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public Json delType2(AdviertisementType adviertisementType) {
        Json json = new Json();
        try {
            adviertisementTypeService.delType2(adviertisementType);
            adviertisementTypeService.deleteType3(adviertisementType.getType2Id());
            json.setSuccess(true);
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            log.error("删除失败！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }


    @Log("删除三级广告管理")
    @RequestMapping("delType3")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public Json delType3(AdviertisementType adviertisementType) {
        Json json = new Json();
        try {
            adviertisementTypeService.delType3(adviertisementType);
            json.setSuccess(true);
        } catch (Exception e) {
            e.printStackTrace();
            log.error("删除失败！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }


    @Log("三级广告管理")
    @RequestMapping("showType3")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String showType3(AdviertisementType adviertisementType, ModelMap modelMap) {
        modelMap.addAttribute("type2Id", adviertisementType.getType2Id());
        return "adviertisement/type3Form";
    }


    @Log("广告管理页面")
    @RequestMapping("addType2")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String addType2(AdviertisementType adviertisementType, ModelMap modelMap) {
        modelMap.addAttribute("typeId", adviertisementType.getTypeId());
        return "adviertisement/addType2";
    }

    @Log("广告管理页面")
    @RequestMapping("addType3")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String addType3(AdviertisementType adviertisementType, ModelMap modelMap) {
        modelMap.addAttribute("type2Id", adviertisementType.getType2Id());
        return "adviertisement/addType3";
    }

    @Log("新增二级广告管理")
    @RequestMapping("addType")
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public String addType(AdviertisementType adviertisementType, ModelMap model) {
        try {
            adviertisementTypeService.addType2(adviertisementType);
        } catch (Exception e) {
            e.printStackTrace();
            log.error("保存失败！ msg={}", e.getMessage(), e);
            model.addAttribute("error", "保存失败！");
            return addType2(adviertisementType, model);
        }
        return successPath;
    }

    @Log("新增三级广告管理")
    @RequestMapping("addTypeForm")
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public String addTypeForm(AdviertisementType adviertisementType, ModelMap model) {
        try {
            adviertisementTypeService.addType3(adviertisementType);
        } catch (Exception e) {
            e.printStackTrace();
            log.error("保存失败！ msg={}", e.getMessage(), e);
            model.addAttribute("error", "保存失败！");
            return addType3(adviertisementType, model);
        }
        return successPath;
    }

    @Log("广告价格设置")
    @RequestMapping("advertisementPriceList")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String advertisementPriceList() {
        return "adviertisement/advertisementPriceList";
    }

    @Log("广告价格编辑设置")
    @RequestMapping("advertisementPriceForm")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String advertisementPriceForm(HotelInfo hotelInfo, ModelMap modelMap) {
        if (hotelInfo.getId() != null) {
            hotelInfo = hotelInfoService.get(hotelInfo.getId());
            modelMap.addAttribute("hotelInfo", hotelInfo);
        }
        return "adviertisement/advertisementPriceForm";
    }

    @Log("广告价格编辑设置")
    @RequestMapping("advertisementPriceForm2")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String advertisementPriceForm2(HotelInfo hotelInfo, ModelMap modelMap) {
        if (hotelInfo.getId() != null) {
            hotelInfo = hotelInfoService.get(hotelInfo.getId());
            modelMap.addAttribute("hotelInfo", hotelInfo);
        }
        return "adviertisement/advertisementPriceForm2";
    }

    @Log("空闲广告位发布")
    @RequestMapping("freeAdvertisement")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String freeAdvertisement() {
        return "adviertisement/freeAdvertisementList";
    }

    @Log("获取空闲广告位列表数据")
    @RequestMapping("freeList")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid freeList(AdvertisementUpload advertisementUpload, GridParam param) {
        Grid grid = adviertisementTypeService.freeList(advertisementUpload, param);
        return grid;
    }

    @Log("空闲广告位发布")
    @RequestMapping("uploadAdvertisement")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String uploadAdvertisement(AdvertisementUpload advertisementUpload, ModelMap modelMap) {
    	Integer uploadTime = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_TIME, Integer.class);
    	uploadTime = uploadTime == null ? 15 : uploadTime;
        modelMap.addAttribute("time", uploadTime);
        Integer picSize = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_P_SIZE, Integer.class);
        picSize = picSize == null ? 10 : picSize;
        modelMap.addAttribute("picSize", picSize);
        Integer videoSize = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_V_SIZE, Integer.class);
        videoSize = videoSize == null ? 30 : videoSize;
        modelMap.addAttribute("videoSize", videoSize);
        if (advertisementUpload.getIds() == null) {
            modelMap.addAttribute("id", advertisementUpload.getId());
            modelMap.addAttribute("hotelId", advertisementUpload.getHotelId());
            return "adviertisement/uploadAdvertisementForm";
        } else {
            modelMap.addAttribute("ids", advertisementUpload.getIds());
            modelMap.addAttribute("hotelIds", advertisementUpload.getHotelIds());
            return "adviertisement/allFreeAdvertisementForm";
        }

    }

    @Log("空闲广告上传文件")
    @RequestMapping("uploadTest")
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public String uploadTest(AdvertisementUpload advertisementUpload, ModelMap modelMap) {
        try {
            //图片
            if (advertisementUpload.getType() == 1){
                String pic = OSSClientUtils.ossUploadPictures(advertisementUpload.getAdvertisingContent());
                advertisementUpload.setAdvertisingContent(pic);
                //视频
            }else {
                advertisementUpload.setAdvertisingContent(OSSClientConstants.URL+((advertisementUpload.getAdvertisingContent().split(":/"))[1]));
            }
            SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");//设置日期格式
            String nowdate = df.format(new Date());
            String name = getPinYinHeadChar(UserUtils.getUser().getAccount());
            String[] timeString = advertisementUpload.getTimeArray().split(",");
            StringBuffer stringBuffer = new StringBuffer();
            List<String> stringList = new ArrayList<>();
            for (int i = 0; i < timeString.length; i++) {
                advertisementUpload.setCreateDate(new Date());
                advertisementUpload.setObjectId(Integer.parseInt(UserUtils.getUser().getId().toString()));
                advertisementUpload.setType(4);
                advertisementUpload.setCreateBy(UserUtils.getUser());
                advertisementUpload.setUploadId(advertisementUpload.getId());
                advertisementUpload.setAuctionStatus(3);
                advertisementUpload.setPayStatus(2);
                advertisementUpload.setState(1);
                String extenstion = advertisementUpload.getAdvertisingContent().substring(advertisementUpload.getAdvertisingContent().lastIndexOf(".")).toLowerCase();//获取后缀名
                if (extenstion.equals(".jpg") || extenstion.equals(".jpeg") || extenstion.equals(".bmp") || extenstion.equals(".png")) {
                    //上传文件是图片
                    advertisementUpload.setDeliveryType(1);
                } else if (extenstion.equals(".rm") || extenstion.equals(".rmvb") || extenstion.equals(".mov") || extenstion.equals(".mtv") || extenstion.equals(".avi") || extenstion.equals(".3gp") || extenstion.equals(".amv") || extenstion.equals(".dmv") || extenstion.equals(".flv") || extenstion.equals(".mp4")) {
                    //上传文件是视频
                    advertisementUpload.setDeliveryType(2);
                }
                advertisementUpload.setPutInTime(timeString[i]);
                advertisementUpload.setAdvertisementMark(name + "0" + nowdate);
                AdvertisingCart advertisingCart = new AdvertisingCart();
                advertisingCart.setUploadId(advertisementUpload.getUploadId());
                advertisingCart.setHotelCodeId(advertisementUpload.getHotelId());
                advertisingCart.setPutInTime(advertisementUpload.getPutInTime());
                adviertisementTypeService.uploadTest(advertisementUpload);
            }

        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            modelMap.addAttribute("error", "保存失败");
            return uploadAdvertisement(advertisementUpload, modelMap);
        }
        return successPath3;
    }

    @Log("上传文件")
    @RequestMapping("uploadTest2")
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public String uploadTest2(AdvertisementUpload advertisementUpload, ModelMap modelMap) {
        try {
            //图片
            if (advertisementUpload.getType() == 1){
                String pic = OSSClientUtils.ossUploadPictures(advertisementUpload.getAdvertisingContent());
                advertisementUpload.setAdvertisingContent(pic);
             //视频
            }else {
                advertisementUpload.setAdvertisingContent(OSSClientConstants.URL+((advertisementUpload.getAdvertisingContent().split(":/"))[1]));
            }
            SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");//设置日期格式
            String nowdate = df.format(new Date());
            String name = getPinYinHeadChar(UserUtils.getUser().getAccount());
            HotelInfo hotelInfo = new HotelInfo();
            hotelInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
            int count2 = hotelInfoService.getHotelInfo(hotelInfo);
            if (count2 == 0) {
                modelMap.addAttribute("error", "该酒店房间数为0！请稍后投放");
                return "adviertisement/advertisementUploadForm";
            }
          /*  advertisementUpload.setUploadId(hotelInfoService.getSort1(advertisementUpload.getHotelId()));*/
            Integer count = 0;
            String[] timeString = advertisementUpload.getTimeArray().split(",");
            for (int i = 0; i < timeString.length; i++) {
                advertisementUpload.setPutInTime(timeString[i]);
                AdvertisingOrder advertisingOrder = new AdvertisingOrder();
                advertisingOrder.setDate(advertisementUpload.getPutInTime());
                advertisingOrder.setHotelCodeId(advertisementUpload.getHotelId());
                advertisingOrder.setUploadId(advertisementUpload.getUploadId());
                count = hotelInfoService.getAdvertisementOrder(advertisingOrder);
                advertisementUpload.setCreateDate(new Date());
                advertisementUpload.setHotelId(UserUtils.getUser().getHotelCodeId());
                advertisementUpload.setObjectId(UserUtils.getUser().getHotelCodeId());
                advertisementUpload.setType(3);
                advertisementUpload.setAuctionStatus(3);
                advertisementUpload.setPayStatus(2);
                advertisementUpload.setState(1);
                advertisementUpload.setAdvertisementMark(name +"0"+nowdate);
                String extenstion = advertisementUpload.getAdvertisingContent().substring(advertisementUpload.getAdvertisingContent().lastIndexOf(".")).toLowerCase();//获取后缀名
                if (extenstion.equals(".jpg") || extenstion.equals(".jpeg") || extenstion.equals(".bmp") || extenstion.equals(".png")) {
                    //上传文件是图片
                    advertisementUpload.setDeliveryType(1);
                } else if (extenstion.equals(".rm") || extenstion.equals(".rmvb") || extenstion.equals(".mov") || extenstion.equals(".mtv") || extenstion.equals(".avi") || extenstion.equals(".3gp") || extenstion.equals(".amv") || extenstion.equals(".dmv") || extenstion.equals(".flv") || extenstion.equals(".mp4")) {
                    //上传文件是视频
                    advertisementUpload.setDeliveryType(2);
                }
                if (count == 0) {
                    adviertisementTypeService.uploadTest(advertisementUpload);
                } else if (count > 0) {
                    adviertisementTypeService.updateUpload(advertisementUpload);
                }
            }
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            modelMap.addAttribute("error", "保存失败");
            return advertisementUpload(advertisementUpload, modelMap);
        }
        modelMap.addAttribute("success", "1");
        modelMap.addAttribute("adveertisement", adviertisementTypeService.getUpload(advertisementUpload.getId()));
         return advertisementUpload(advertisementUpload,modelMap);
    }


    @Log("空闲广告位全部上传文件")
    @RequestMapping("uploadAll")
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public String uploadAll(AdvertisementUpload advertisementUpload, ModelMap modelMap) {
        try {

            SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");//设置日期格式
            String nowdate = df.format(new Date());
            String name = getPinYinHeadChar(UserUtils.getUser().getAccount());
            List<AdvertisementUpload> list = new ArrayList<>();
            List<String> stringList = new ArrayList<>();
            StringBuffer stringBuffer = new StringBuffer();
            String[] strings2 = advertisementUpload.getHotelIds().split(",");
            String[] strings = advertisementUpload.getIds().split(",");
            String[] timeString = advertisementUpload.getTimeArray().split(",");
            upload:
            for (int i = 0; i < strings.length; i++) {
                for (int k = 0; k < timeString.length; k++) {
                    advertisementUpload.setCreateDate(new Date());
                    advertisementUpload.setObjectId(Integer.parseInt(UserUtils.getUser().getId().toString()));
                    advertisementUpload.setType(4);
                    advertisementUpload.setCreateBy(UserUtils.getUser());
                    advertisementUpload.setUploadId(Integer.parseInt(strings[i]));
                    advertisementUpload.setState(1);
                    advertisementUpload.setPayStatus(2);
                    advertisementUpload.setAuctionStatus(3);
                    advertisementUpload.setPutInTime(timeString[k]);
                    String extenstion = advertisementUpload.getAdvertisingContent().substring(advertisementUpload.getAdvertisingContent().lastIndexOf(".")).toLowerCase();//获取后缀名
                    if (extenstion.equals(".jpg") || extenstion.equals(".jpeg") || extenstion.equals(".bmp") || extenstion.equals(".png")) {
                        //上传文件是图片
                        advertisementUpload.setDeliveryType(1);
                    } else if (extenstion.equals(".rm") || extenstion.equals(".rmvb") || extenstion.equals(".mov") || extenstion.equals(".mtv") || extenstion.equals(".avi") || extenstion.equals(".3gp") || extenstion.equals(".amv") || extenstion.equals(".dmv") || extenstion.equals(".flv") || extenstion.equals(".mp4")) {
                        //上传文件是视频
                        advertisementUpload.setDeliveryType(2);
                    }
                    for (int j = i; j < strings2.length; j++) {
                        advertisementUpload.setAdvertisementMark(name + "0"+ nowdate);
                        advertisementUpload.setHotelId(Integer.parseInt(strings2[j]));
                        AdvertisingCart advertisingCart = new AdvertisingCart();
                        advertisingCart.setUploadId(advertisementUpload.getUploadId());
                        advertisingCart.setHotelCodeId(advertisementUpload.getHotelId());
                        advertisingCart.setPutInTime(advertisementUpload.getPutInTime());
                        adviertisementTypeService.uploadTest(advertisementUpload);
                    }
                }
            }
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            modelMap.addAttribute("error", "保存失败");
            return uploadAdvertisement(advertisementUpload, modelMap);
        }
        return successPath;
    }


    /**
     * 得到中文首字母
     *
     * @param str
     * @return
     */
    public static String getPinYinHeadChar(String str) {
        String convert = "";
        for (int j = 0; j < str.length(); j++) {
            char word = str.charAt(j);
            String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(word);
            if (pinyinArray != null) {
                convert += pinyinArray[0].charAt(0);
            } else {
                convert += word;
            }
        }
        return convert;
    }


    @Log("广告冻结设置")
    @RequestMapping("freezeAdvertisement")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String freezeAdvertisement() {
        return "adviertisement/freezeAdvertisement";
    }

    @Log("广告冻结列表")
    @RequestMapping("freezeList")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid freezeList(AdvertisementUpload advertisementUpload, GridParam param) {
        Grid grid = new Grid();
        grid = adviertisementTypeService.freezeList(advertisementUpload, param);
        return grid;
    }


    @Log("凍結操作")
    @RequestMapping("freezeStatus")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public Json freezeStatus(AdvertisementUpload advertisementUpload) {
        Json json = new Json();
        try {
            adviertisementTypeService.freezeStatus(advertisementUpload);
            json.setSuccess(true);
        } catch (Exception e) {
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("操作失败");
        }
        return json;
    }

    /**
     * 禁播广告
     *
     * @param
     * @return
     */
    @Log("禁播广告设定")
    @RequestMapping("banAdvertisementIndex")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String banAdvertisementIndex() {
        return "adviertisement/BanAdvertisementList";
    }


    @Log("禁播广告设定查看详情")
    @RequestMapping("banAdvertisementForm")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String banAdvertisementForm(AdviertisementType adviertisementType, ModelMap model) {
        if (adviertisementType.getId() == null) {
            return "adviertisement/BanAdvertisementForm";
        } else {
            adviertisementType = adviertisementTypeService.get(adviertisementType.getId());
            model.addAttribute("adviertisementType", adviertisementType);
            return "adviertisement/BanAdvertisementForm";
        }

    }

    @Log("被禁播广告设定查看详情")
    @RequestMapping("RelieveBan")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String RelieveBan(AdviertisementType adviertisementType, ModelMap model) {
        if (adviertisementType.getId() == null) {
            return "adviertisement/RelieveBanForm";
        } else {
            adviertisementType = adviertisementTypeService.get(adviertisementType.getId());
            model.addAttribute("adviertisementType", adviertisementType);
            return "adviertisement/RelieveBanForm";
        }

    }


    @Log("设为禁播")
    @RequestMapping("setBan")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public Json setBan(AdviertisementType adviertisementType) {
        Json json = new Json();
        try {
//            adviertisementTypeService.save(adviertisementType);
//            adviertisementTypeService.banType2(adviertisementType);
//            List<Integer> list1 = adviertisementTypeService.getType1Id(adviertisementType.getId());
            if (adviertisementType.getStatus() == 0) {
                BanAdvertisementType banAdvertisementType = new BanAdvertisementType();
                banAdvertisementType.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
                banAdvertisementType.setTypeId(adviertisementType.getId());
                banAdvertisementType.setTypeStatus(1);
                banAdvertisementTypeService.save(banAdvertisementType);
                //获取父级下的自己列表
                List<Integer> list = adviertisementTypeService.getListType2(adviertisementType.getId());
                for (int i = 0; i < list.size(); i++) {
                    banAdvertisementType.setTypeId(list.get(i));
                    banAdvertisementType.setTypeStatus(2);
                    banAdvertisementTypeService.save(banAdvertisementType);
                    //获取二级菜单下的所有三级
                    List<Integer> list2 = adviertisementTypeService.getListType3(list.get(i));
                    for (int j = 0; j < list2.size(); j++) {
                        banAdvertisementType.setTypeId(list2.get(j));
                        banAdvertisementType.setTypeStatus(3);
                        banAdvertisementTypeService.save(banAdvertisementType);
                    }
                }
            } else {
                BanAdvertisementType banAdvertisementType = new BanAdvertisementType();
                banAdvertisementType.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
                banAdvertisementType.setTypeId(adviertisementType.getId());
                banAdvertisementType.setTypeStatus(1);
                banAdvertisementTypeService.delete(banAdvertisementType);
                List<Integer> list = adviertisementTypeService.getListType2(adviertisementType.getId());
                for (int i = 0; i < list.size(); i++) {
                    banAdvertisementType.setTypeId(list.get(i));
                    banAdvertisementType.setTypeStatus(2);
                    banAdvertisementTypeService.delete(banAdvertisementType);
                    //获取二级菜单下的所有三级
                    List<Integer> list2 = adviertisementTypeService.getListType3(list.get(i));
                    for (int j = 0; j < list2.size(); j++) {
                        banAdvertisementType.setTypeId(list2.get(j));
                        banAdvertisementType.setTypeStatus(3);
                        banAdvertisementTypeService.delete(banAdvertisementType);
                    }
                }

            }
//            adviertisementTypeService.banType3(adviertisementType);

            json.setSuccess(true);
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("禁播失败");
        }
        return json;
    }

    @Log("设为二级禁播")
    @RequestMapping("setBan2")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public Json setBan2(AdviertisementType adviertisementType) {
        Json json = new Json();
        try {
//            adviertisementTypeService.setBan2(adviertisementType);
//            adviertisementTypeService.banType3(adviertisementType);
            BanAdvertisementType banAdvertisementType = new BanAdvertisementType();
            banAdvertisementType.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
            banAdvertisementType.setTypeId(adviertisementType.getType2Id());
            banAdvertisementType.setTypeStatus(2);
            if (adviertisementType.getStatus() == 0) {
                banAdvertisementTypeService.save(banAdvertisementType);
                List<Integer> list = adviertisementTypeService.getListType3(adviertisementType.getType2Id());
                for (int i = 0; i < list.size(); i++) {
                    banAdvertisementType.setTypeStatus(3);
                    banAdvertisementType.setTypeId(list.get(i));
                    banAdvertisementTypeService.save(banAdvertisementType);
                }
            } else {
                banAdvertisementTypeService.delete(banAdvertisementType);
                List<Integer> list = adviertisementTypeService.getListType3(adviertisementType.getType2Id());
                for (int i = 0; i < list.size(); i++) {
                    banAdvertisementType.setTypeStatus(3);
                    banAdvertisementType.setTypeId(list.get(i));
                    banAdvertisementTypeService.delete(banAdvertisementType);
                }
            }
            json.setSuccess(true);
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("禁播失败");
        }
        return json;
    }

    @Log("三级广告管理")
    @RequestMapping("banAdvertisementForm2")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String banAdvertisementForm2(AdviertisementType adviertisementType, ModelMap modelMap) {
        modelMap.addAttribute("type2Id", adviertisementType.getType2Id());
        return "adviertisement/BanAdvertisementForm2";
    }

    @Log("被禁播三级广告管理")
    @RequestMapping("RelieveBan2")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String RelieveBan2(AdviertisementType adviertisementType, ModelMap modelMap) {
        modelMap.addAttribute("type2Id", adviertisementType.getType2Id());
        modelMap.addAttribute("typeId", adviertisementType.getTypeId());
        return "adviertisement/RelieveBanForm2";
    }

    @Log("设为三级禁播")
    @RequestMapping("setBan3")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public Json setBan3(AdviertisementType adviertisementType) {
        Json json = new Json();
        try {
//            adviertisementTypeService.setBan3(adviertisementType);
            BanAdvertisementType banAdvertisementType = new BanAdvertisementType();
            banAdvertisementType.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
            banAdvertisementType.setTypeId(adviertisementType.getType3Id());
            banAdvertisementType.setTypeStatus(3);
            if (adviertisementType.getStatus() == 0) {
                banAdvertisementTypeService.save(banAdvertisementType);
            } else {
                banAdvertisementTypeService.delete(banAdvertisementType);
            }
//            adviertisementTypeService.banType3(adviertisementType);
            json.setSuccess(true);
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("禁播失败");
        }
        return json;
    }

    @Log("禁播广告列表数据")
    @RequestMapping("BanList")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid BanList(AdviertisementType adviertisementType, GridParam param) {
        adviertisementType.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        return adviertisementTypeService.BanList(adviertisementType, param);
    }


    @Log("多选禁播")
    @RequestMapping("banAll")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public Json banAll(AdviertisementType adviertisementType) {
        Json json = new Json();
        try {
            List<AdviertisementType> list = new ArrayList<>();
            List<Integer> listId = new ArrayList<>();
            String[] strings = adviertisementType.getIds().split(",");
            for (int i = 0; i < strings.length; i++) {
                if (adviertisementType.getStatus() == 0) {
                    BanAdvertisementType banAdvertisementType = new BanAdvertisementType();
                    banAdvertisementType.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
                    banAdvertisementType.setTypeId(Integer.parseInt(strings[i]));
                    banAdvertisementType.setTypeStatus(1);
                    banAdvertisementTypeService.save(banAdvertisementType);
                } else {
                    String[] strings1 = adviertisementType.getTypeStatus2().split(",");
                    BanAdvertisementType banAdvertisementType = new BanAdvertisementType();
                    banAdvertisementType.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
                    banAdvertisementType.setTypeId(Integer.parseInt(strings[i]));
                    for (int j = 0; j < strings1.length; j++) {
                        if (Integer.parseInt(strings1[j]) == 1) {
                            banAdvertisementType.setTypeStatus(1);
                            banAdvertisementTypeService.delete(banAdvertisementType);
                        } else if (Integer.parseInt(strings1[j]) == 2) {
                            banAdvertisementType.setTypeStatus(2);
                            banAdvertisementTypeService.delete(banAdvertisementType);
                        } else {
                            banAdvertisementType.setTypeStatus(3);
                            banAdvertisementTypeService.delete(banAdvertisementType);
                        }
                    }

                }
            }
//            if (adviertisementType.getStatus() == 0) {
//                adviertisementTypeService.banAll(list);
//            } else {
//                adviertisementTypeService.RelieveBanAll(list);
//            }
//            adviertisementTypeService.banType(list);
//            List<Integer> list1 = adviertisementTypeService.listId(listId);
//            if (adviertisementType.getStatus() == 0) {
//                adviertisementTypeService.banType3List(list1);
//            } else {
//                adviertisementTypeService.RelieveBanList3(list1);
//            }
            json.setSuccess(true);
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("禁播失败");
        }
        return json;
    }

    @Log("被禁播广告")
    @RequestMapping("BanAdvertisementList2")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String BanAdvertisementList2() {
        return "adviertisement/BanAdvertisementList2";
    }


    @Log("被禁播广告列表数据")
    @RequestMapping("BanList2")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid BanList2(AdviertisementType adviertisementType, GridParam param) {
        adviertisementType.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        return adviertisementTypeService.BanList2(adviertisementType, param);
    }

    @Log("广告上传")
    @RequestMapping("advertisementUpload")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String advertisementUpload(AdvertisementUpload advertisementUpload, ModelMap modelMap) {
    	Integer uploadTime = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_TIME, Integer.class);
    	uploadTime = uploadTime == null ? 15 : uploadTime;
    	HotelInfo hotelInfo = new HotelInfo();
        hotelInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        List<HotelInfo>hotelInfoList=adviertisementTypeService.uploadCountSumById(hotelInfo);
        modelMap.addAttribute("uploadTime", uploadTime);
        modelMap.addAttribute("advertisement", advertisementUpload);
        modelMap.addAttribute("hotelInfoList", hotelInfoList);

        Integer picSize = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_P_SIZE, Integer.class);
        picSize = picSize == null ? 10 : picSize;
        modelMap.addAttribute("picSize", picSize);
        Integer videoSize = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_V_SIZE, Integer.class);
        videoSize = videoSize == null ? 30 : videoSize;
        modelMap.addAttribute("videoSize", videoSize);
        return "adviertisement/advertisementUploadForm";
    }

    @Log("内容审核")
    @RequestMapping("checkAdvertisement")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String checkAdvertisement() {
        return "adviertisement/checkAdvertisementList";
    }

    @Log("内容审核列表数据")
    @RequestMapping("checkList")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid checkList(AdvertisementUpload advertisementUpload, GridParam param) {
        advertisementUpload.setHotelId(UserUtils.getUser().getHotelCodeId());
        SysParameter sysParameter = new SysParameter();
        Grid grid = adviertisementTypeService.checkList(advertisementUpload, param);
        List<AdvertisementUpload> advertisementUploadList = grid.getRows();
        for (AdvertisementUpload advertisementUpload1 : advertisementUploadList) {
            Integer time = sysParameterService.get(sysParameter).getCheckTime();
            advertisementUpload1.setCheckTime(time);
        }
        grid.setRows(advertisementUploadList);
        return grid;
    }


    @Log("通过广告审核")
    @RequestMapping("passAdvertisement")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public Json passAdvertisement(AdvertisementUpload advertisementUpload) {
        Json json = new Json();
        try {
            advertisementUpload.setState(1);
            adviertisementTypeService.updateUpload(advertisementUpload);
            CheckRecord checkRecord = new CheckRecord();
            checkRecord.setAdvertisingOrderId(advertisementUpload.getOrdernumber());
            checkRecord.setAdvertisingOrderState(1);
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String date = simpleDateFormat.format(new Date());
            checkRecord.setUpdateTime(date);
            adviertisementTypeService.insertRecord(checkRecord);
            json.setSuccess(true);
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("操作失败");
        }
        return json;
    }

    @Log("提出异议")
    @RequestMapping("checkAdvertisementForm")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String checkAdvertisementForm(AdvertisingOrder advertisingOrder, ModelMap modelMap) {
        modelMap.addAttribute("advertisingOrder2", advertisingOrder);
        modelMap.addAttribute("advertisingOrder", adviertisementTypeService.getUpload(advertisingOrder.getId()));
        return "adviertisement/checkAdvertisementForm";
    }

    @Log("更新提出异议")
    @RequestMapping("saveCheckAdvertisementForm")
    @RequiresPermissions("adviertisement:adviertisementType:edit")
    public String saveCheckAdvertisementForm(AdvertisementUpload advertisementUpload, ModelMap modelMap) {
        try {
            advertisementUpload.setState(2);
            adviertisementTypeService.updateUpload(advertisementUpload);
            CheckRecord checkRecord = new CheckRecord();
            checkRecord.setAdvertisingOrderId(advertisementUpload.getOrdernumber());
            checkRecord.setAdvertisingOrderState(2);
            checkRecord.setObjectionContent(advertisementUpload.getObjectionContent());
            checkRecord.setObjectionUrl(advertisementUpload.getObjectionUrl());
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String date = simpleDateFormat.format(new Date());
            checkRecord.setUpdateTime(date);
            adviertisementTypeService.insertRecord(checkRecord);
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            modelMap.addAttribute("error", "操作失败");
        }
        return successPath;

    }

    @Log("审核记录")
    @RequestMapping("checkRecordForm")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String checkRecordForm() {
        return "adviertisement/checkRecordList";
    }

    @Log("内容审核记录列表数据")
    @RequestMapping("checkRecord")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid checkRecord(CheckRecord checkRecord, GridParam param) {
        Grid grid = adviertisementTypeService.checkRecord(checkRecord, param);
        return grid;
    }

    @Log("广告位")
    @RequestMapping("advertiseUpload")
    @ResponseBody
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public Grid advertiseUpload(AdvertisementUpload advertisementUpload, GridParam param) {
        Grid grid = adviertisementTypeService.checkList2(advertisementUpload, param);
        return grid;
    }

    @Log("广告内容")
    @RequestMapping("AdvertiseContent")
    @RequiresPermissions("adviertisement:adviertisementType:view")
    public String AdvertiseContent(AdvertisementUpload advertisementUpload, ModelMap modelMap) {
        modelMap.addAttribute("advertiseContent", advertisementUpload.getAdvertisingContent());
        return "adviertisement/content";
    }

    @Log("查看禁播列表中是否又被禁播的该二级的一级")
    @RequestMapping("getBanType1")
    @ResponseBody
    public String getBanType1(Integer id) {
        Integer hotelCodeId = UserUtils.getUser().getHotelCodeId();
        String string = adviertisementTypeService.getBanType1(id, hotelCodeId);
        return string;
    }

    @Log("查看禁播列表中是否又被禁播的该三级的二级")
    @RequestMapping("ReliseBanType2")
    @ResponseBody
    public String ReliseBanType2(Integer id) {
        Integer hotelCodeId = UserUtils.getUser().getHotelCodeId();
        String string = adviertisementTypeService.ReliseBanType2(id, hotelCodeId);
        return string;
    }


    @Log("获取投放日期")
    @RequestMapping("getPutInTime")
    @ResponseBody
    public Grid getPutInTime(AdvertisingOrder advertisingOrder, GridParam gridParam) {
        Grid grid = adviertisementTypeService.getPutInTime(advertisingOrder, gridParam);
        return grid;
    }

    @Log("查看酒店是否存在设备")
    @RequestMapping("checkDevice")
    @ResponseBody
    public Json checkDevice(HotelInfo hotelInfo) {
        Json json = new Json();
        try {
            if (hotelInfo.getIds() == null && hotelInfo.getIds() == "") {
                int count = hotelInfoService.getHotelInfo(hotelInfo);
                json.setData(count);
                return json;
            } else {
                String[] strings = hotelInfo.getIds().split(",");
                for (int i = 0; i < strings.length; i++) {
                    HotelInfo hotelInfo1 = new HotelInfo();
                    hotelInfo1.setHotelCodeId(Integer.parseInt(strings[i]));
                    int count2 = hotelInfoService.getHotelInfo(hotelInfo1);
                    json.setData(count2);
                    hotelInfo1 = hotelInfoService.hotelInfoById(hotelInfo1);
                    json.setMsg(hotelInfo1.getHotelName());
                    return json;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            return json;
        }
        return json;
    }


}
