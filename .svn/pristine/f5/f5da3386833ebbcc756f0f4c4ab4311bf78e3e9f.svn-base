package com.chunqiu.mrjuly.modules.advertisingcart.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.SmsUtil;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.advertiserinfo.model.AdvertiserInfo;
import com.chunqiu.mrjuly.modules.advertiserinfo.service.AdvertiserInfoService;
import com.chunqiu.mrjuly.modules.advertisingcart.model.AdvertisingCart;
import com.chunqiu.mrjuly.modules.advertisingcart.service.AdvertisingCartService;
import com.chunqiu.mrjuly.modules.advertisingorder.model.AdvertisingOrder;
import com.chunqiu.mrjuly.modules.advertisingorder.service.AdvertisingOrderService;
import com.chunqiu.mrjuly.modules.adviertisement.service.AdviertisementTypeService;
import com.chunqiu.mrjuly.modules.flowsheetinfo.service.FlowSheetInfoService;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.service.HotelInfoService;
import com.chunqiu.mrjuly.modules.install.model.Notice;
import com.chunqiu.mrjuly.modules.install.model.SysParameter;
import com.chunqiu.mrjuly.modules.install.service.SysParameterService;
import com.chunqiu.mrjuly.modules.shophotel.model.ShopHotel;
import com.chunqiu.mrjuly.modules.shopinfo.model.ShopInfo;
import com.chunqiu.mrjuly.modules.shopinfo.service.ShopInfoService;
import lombok.extern.slf4j.Slf4j;
import net.sf.json.JSONObject;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * 广告购物车Controller
 * @author 周天
 * @version 2019-03-20
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/advertisingcart/advertisingCart")
@Transactional
public class AdvertisingCartController extends BaseController {

	@Autowired
	private AdvertisingCartService advertisingCartService;
	@Autowired
	private ShopInfoService shopInfoService;
	@Autowired
	private AdvertiserInfoService advertiserInfoService;
	@Autowired
	private HotelInfoService hotelInfoService;
	@Autowired
	private FlowSheetInfoService flowSheetInfoService;

	@Autowired
	private AdviertisementTypeService adviertisementTypeService;
	@Autowired
	private AdvertisingOrderService advertisingOrderService;
	@Autowired
	private SysParameterService sysParameterService;
	/**
	 * @Description：广告购物车列表页面
	 * @author 周天
	 */
	@Log("打开在线商家广告购物车列表页面")
	@RequestMapping("index")
	@RequiresPermissions("advertisingcart:advertisingCart:view")
	public String index(ModelMap modelMap){
		SysParameter sysParameter = advertisingCartService.sysParameterInfo();
		modelMap.addAttribute("sysParameter",sysParameter);
		return "advertisingcart/advertisingCartList";
	}

	@Log("打开广告商广告购物车列表页面")
	@RequestMapping("adverIndex")
	@RequiresPermissions("advertisingcart:advertisingCart:view")
	public String adverIndex(ModelMap modelMap){
		SysParameter sysParameter = advertisingCartService.sysParameterInfo();
		modelMap.addAttribute("sysParameter",sysParameter);
		return "advertisingcart/advertShoppingCart";
	}


	/**
	 * @Description：广告购物车列表数据
	 * @author 周天
	 */
	@Log("获取广告购物车列表数据")
	@RequestMapping("list")
	@ResponseBody
	@RequiresPermissions("advertisingcart:advertisingCart:view")
	public Grid list(AdvertisingCart advertisingCart, GridParam param) {
		advertisingCart.setObjectId(UserUtils.getUser().getBusinessId());
		return advertisingCartService.findPage(advertisingCart, param);
	}
	/**
	 * @Description：广告购物车表单页面--新增/编辑
	 * @author 周天
	 */
	@Log("打开广告购物车表单页面--新增/编辑")
	@RequestMapping(value = "form")
	@RequiresPermissions("advertisingcart:advertisingCart:view")
	public String form(AdvertisingCart advertisingCart, ModelMap model) {
			advertisingCart = advertisingCartService.get(advertisingCart.getId());
		model.addAttribute("advertisingCart", advertisingCart);
		return "advertisingcart/advertisingCartForm";
	}
	/**
	 * @Description：广告购物车新增/编辑 保存方法
	 * @author 周天
	 */
    @Log("新增/编辑广告购物车")
	@RequestMapping("saveAdvertisingCart")
	@RequiresPermissions("advertisingcart:advertisingCart:edit")
	public String saveAdvertisingCart(AdvertisingCart advertisingCart, ModelMap model){
		try{
			advertisingCartService.save(advertisingCart);
		}catch(Exception e){
			log.error("保存失败！ msg={}", e.getMessage(), e);

			model.addAttribute("error", "保存失败！");
			return form(advertisingCart, model);
		}
		return successPath;
	}
	/**
	 * @Description：广告购物车数据删除方法
	 * @author 周天
	 */
	@Log("删除广告购物车")
	@RequestMapping("delAdvertisingCart")
	@ResponseBody
	@RequiresPermissions("advertisingcart:advertisingCart:edit")
	public Json delAdvertisingCart(AdvertisingCart advertisingCart){
		Json json = new Json();
		try{
			advertisingCartService.delete(advertisingCart);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("删除失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("删除失败！");
		}
		return json;
	}


	@Log("参与竞拍")
	@RequestMapping(value = "participationInAuction",method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	@RequiresPermissions("advertisingcart:advertisingCart:edit")
	public Json participationInAuction(AdvertisingCart advertisingCart){
		Json json = new Json();
		try{
			//当前时间
			SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");//设置日期格式
			String nowdate = df.format(new Date());
			//随机数
			String math = System.currentTimeMillis()+"";
			//查询系统设置
			SysParameter sysParameter = advertisingCartService.sysParameterInfo();
			//当前人的账号余额
			double price = 0;
			//所有广告位起拍价的价格总和
			double tallPrice = 0;
			//公司编号
			String codeName = "";
			//公司名称
			String name = "";
			//公司电话
            String phone = "";
			//竞拍的总金额
			double auctionAmount = 0;
			//在线商家
			if (UserUtils.getUser().getRoleType() == 3){
				ShopInfo shopInfo = shopInfoService.get(UserUtils.getUser().getBusinessId());
				if (shopInfo.getAccount() == null){
					price = 0;
				}else {
					price = shopInfo.getAccount();
				}
				codeName =  shopInfo.getShopNumber();
			    name = shopInfo.getShopName();
			    phone = shopInfo.getMobile();
			//广告商
			}else if (UserUtils.getUser().getRoleType() == 4){
				AdvertiserInfo advertiserInfo = advertiserInfoService.get(UserUtils.getUser().getBusinessId());
				if (advertiserInfo.getAccountBalance() == null){
					price = 0;
				}else {
					price = advertiserInfo.getAccountBalance();
				}

				codeName = advertiserInfo.getAdvertiserNumber();
				name = advertiserInfo.getAdvertiserName();
                phone = advertiserInfo.getMobile();
			}

			//查询所有购物车的订单的金额
			List<AdvertisingCart> cartList = strToList(advertisingCart.getList(), AdvertisingCart.class);
			List<AdvertisingCart> advertisingCartList = advertisingCartService.orderCartPriceById(cartList);
			for (int i = 0;i<advertisingCartList.size();i++){
				auctionAmount += advertisingCartList.get(i).getAuctionAmount();
			}

			//判断当前的账户余额和总价格
			if (price < auctionAmount){
				json.setSuccess(false);
				json.setMsg("当前余额不足！");
				return json;
			}


			//查询当前酒店的客户端数量乘以起拍价总和
			List<AdvertisingCart> list = strToList(advertisingCart.getList(), AdvertisingCart.class);
			for (AdvertisingCart cart : list){
				HotelInfo hotelInfo = new HotelInfo();
				hotelInfo.setHotelCodeId(cart.getHotelCodeId());
				//查询当前酒店信息
				HotelInfo hotelInfo1 = hotelInfoService.hotelInfoById(hotelInfo);

				//当前酒店的广告位状态为支付成功并且是待结算或者结算成功
				Integer countSuccess = advertisingCartService.countOrderSusccessById(cart);
				if (countSuccess > 0){
					json.setSuccess(false);
					json.setMsg(hotelInfo1.getHotelName()+"酒店的广告位："+cart.getPutInTime()+"的时间段已被拍走。");
					return json;
				}

				//当前购物车订单为当前价类型
				if (cart.getPriceType() == 1){
					//投放类型为图文
					if (cart.getDeliveryType() == 1){
						//当前酒店的广告位的图文最大当前价大于我的竞拍的当前价
						Float priceTypePrice = advertisingCartService.priceTypePrice(cart);
						if (priceTypePrice >= cart.getPriceTypePrice()){
							json.setSuccess(false);
							json.setMsg(hotelInfo1.getHotelName()+"酒店的广告位："+cart.getPutInTime()+"的时间段的图文最新当前价已大于您当前竞拍的当前价！");
							return json;
						}
					//投放类型为视频
					}else if (cart.getDeliveryType() == 2){
						//当前酒店的广告位的视频最大当前价大于我的竞拍的当前价
						Float priceTypePrice = advertisingCartService.priceTypePrice(cart);
						if (priceTypePrice >= cart.getPriceTypePrice()){
							json.setSuccess(false);
							json.setMsg(hotelInfo1.getHotelName()+"酒店的广告位："+cart.getPutInTime()+"的时间段的视频最新当前价已大于您当前竞拍的当前价！");
							return json;
						}
					}
				}

				//当前购物车的订单是一口价类型
				if (cart.getPriceType() == 2){
					if (price < auctionAmount){
						json.setSuccess(false);
						json.setMsg("一口价需要账户金额大于订单全额！");
						return json;
					}
				}
					//查询当前酒店下的所有客户端
					int count = hotelInfoService.getHotelInfo(hotelInfo);
				    tallPrice += count * cart.getDeliveryTypeStartingPrice();
			}

			int minAccountBalance = sysParameter.getMinAccountBalance();
			//当前所选广告位起拍价的总金额的百分之
			tallPrice = tallPrice * (minAccountBalance * 0.01);
			if (price < tallPrice){
				json.setSuccess(false);
				json.setMsg("参加竞拍的账户金额必须大于选择广告位起拍价总额的"+minAccountBalance+"%！");
				return json;
			}


		//参与竞拍
		List<AdvertisingOrder> advertisingOrderList = new ArrayList<>();
		for (AdvertisingCart advertisingCart1 : list){
			//查询当前购物车信息
			 AdvertisingOrder advertisingOrder = advertisingCartService.getInfo(advertisingCart1);
			 //当前订单是一口价
			 if (advertisingOrder.getPriceType() == 2){
			 	//竞拍状态为竞拍成功
				advertisingOrder.setAuctionStatus(3);
				//支付状态为待结算
				advertisingOrder.setPayStatus(1);
				//订单编号
				 String ordernumber = nowdate + "" +advertisingOrder.getHotelCode() + "" + advertisingOrder.getSort() + "" + codeName + "" + math + "0" + advertisingOrder.getDeliveryType();
				 advertisingOrder.setOrdernumber(ordernumber);
				 advertisingOrder.setCreateBy(UserUtils.getUser());
				 advertisingOrderList.add(advertisingOrder);
			//当前订单是当前价
			 }else if (advertisingOrder.getPriceType() == 1){
			 	//支付状态未结算
			 	advertisingOrder.setPayStatus(0);
			 	//竞拍状态竞拍中
				 advertisingOrder.setAuctionStatus(2);
				 //订单编号
				 String ordernumber = nowdate + "" +advertisingOrder.getHotelCode() + "" + advertisingOrder.getSort() + "" + codeName + "" + math + "0" + advertisingOrder.getDeliveryType();
				 advertisingOrder.setOrdernumber(ordernumber);
				 advertisingOrder.setCreateBy(UserUtils.getUser());
				 advertisingOrderList.add(advertisingOrder);
			 }

		}

		//新增订单
		int count = advertisingCartService.insertOrder(advertisingOrderList);

		if (count > 0){
			for (AdvertisingOrder advertisingOrder : advertisingOrderList){
				if (advertisingOrder.getPriceType() == 2){
					//当前订单为一口价类型的进行参与竞拍成功后，当前广告位为当前价竞拍更改为竞拍失败
					advertisingCartService.updateOrderStatusById(advertisingOrder);
				}

				//查询当前酒店日期的广告位最新投放人的信息
				AdvertisingOrder advertisingOrder1 = advertisingCartService.auctionOrderInfo(advertisingOrder);
				if (advertisingOrder1 != null){
					//新增一条广告商或者商家的消息
					Notice notice = new Notice();
					String tel = "";
					if (advertisingOrder1.getType() == 2){
						notice.setTarget(3);
						//查询广告商电话号码
						AdvertiserInfo advertiserInfo = advertiserInfoService.get(advertisingOrder1.getObjectId());
						tel = advertiserInfo.getMobile();
					}else if (advertisingOrder1.getType() == 1){
						notice.setTarget(2);
						//查询在线商家电话
						ShopInfo shopInfo = shopInfoService.get(advertisingOrder1.getObjectId());
						tel =  shopInfo.getMobile();
					}
					notice.setObjectId(advertisingOrder1.getObjectId());
					notice.setNoticeRoll(1);
					notice.setCircularEndTime(getSpecifiedDayAfter());
					//查询当前酒店信息
					notice.setNoticeTitle("参与竞拍消息");
					String deliveryType = "";
					if (advertisingOrder1.getDeliveryType() == 1){
						deliveryType = "图文";
					}else {
						deliveryType = "视频";
					}
					notice.setNoticeContent("您参与竞拍的酒店:"+advertisingOrder1.getHotelName()+",投放类型为:"+deliveryType+"的广告位的价格已被他人竞拍或者超过！");
					notice.preInsert();
					notice.setTimeSn(System.currentTimeMillis()+"");
					advertisingCartService.insertMessageInfo(notice);

					//发送短信
					String jsonStr = "{\"hotelName\":\"" + advertisingOrder1.getHotelName() + "\",\"deliveryType\":\"" + deliveryType + "\"}";
					SmsUtil.sendValidCodeSms("SMS_164512102",tel,jsonStr);
				}

			}

			//删除购物车
			int upCount = advertisingCartService.deleteCart(advertisingOrderList);
			if (upCount > 0){
				json.setSuccess(true);
				json.setMsg("竞拍成功！");
				return json;
			}

		}
		}catch(Exception e){
			//异常回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			log.error("竞拍失败！ msg={}", e.getMessage(), e);
			json.setSuccess(false);
			json.setMsg("竞拍失败！");
		}
		return json;
	}

	/**
	 * 通过时间秒毫秒数判断两个时间的间隔
	 * @param date1
	 * @param date2
	 * @return
	 */
	public static int differentDaysByMillisecond(Date date1,Date date2)
	{
		int days = (int) ((date2.getTime() - date1.getTime()) / (1000*3600*24));
		return days;
	}


	/**
	 * 获得指定日期的后一天
	 * @return
	 */
	public static Date getSpecifiedDayAfter() throws ParseException {
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
		String specifiedDay = df.format(new Date());
		Calendar c = Calendar.getInstance();
		Date date=null;
		try {
			date = new SimpleDateFormat("yy-MM-dd").parse(specifiedDay);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		c.setTime(date);
		int day=c.get(Calendar.DATE);
		c.set(Calendar.DATE,day+1);

		String dayAfter = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");//yyyy-mm-dd, 会出现时间不对, 因为小写的mm是代表: 秒
		Date utilDate = sdf.parse(dayAfter);
		System.out.println(utilDate);//查看utilDate的值
		Date date1 = new java.sql.Date(utilDate.getTime());
		return date1;
	}
	//对象转换为List集合
	private static <T> List<T> strToList(String str, Class<T> clazz) {
		net.sf.json.JSONArray json = net.sf.json.JSONArray.fromObject(str);
		JSONObject object = null;
		T t = null;
		List<T> list = new ArrayList<>();
		for (int i = 0; i < json.size(); i++) {
			object = JSONObject.fromObject(json.get(i));
			t = (T) JSONObject.toBean(object, clazz);
			list.add(t);
		}
		return list;
	}

	@Log("加入购物车")
	@RequestMapping("saveAdvertisingCart2")
	@ResponseBody
	@RequiresPermissions("advertisingcart:advertisingCart:edit")
	public Json saveAdvertisingCart2(AdvertisingCart advertisingCart){
		Json json = new Json();
		try{
			String[] timeArray = advertisingCart.getTimeArray().split(",");
			String[] priceTypePriceArray = advertisingCart.getPriceTypePriceArray().split(",");
			String[] nowPriceArray = advertisingCart.getNowPriceArray().split(",");
			String[] nowPrice2Array = advertisingCart.getNowPrice2Array().split(",");
			String[] priceTypeArray = advertisingCart.getPriceTypeArray().split(",");
			Integer type = UserUtils.getUser().getRoleType();
			if (type==3){
				advertisingCart.setType(1);
			}else if (type==4){
				advertisingCart.setType(2);
			}
			advertisingCart.setObjectId(UserUtils.getUser().getBusinessId());
			HotelInfo hotelInfo = hotelInfoService.get(advertisingCart.getObjectId());
			for (int j=0;j<timeArray.length;j++){
				advertisingCart.setDate(timeArray[j]);
				Integer countCard = advertisingCartService.getCard(advertisingCart);
				if (countCard!=0){
					json.setSuccess(false);
					json.setMsg("您已加入购物车，不要重复加入！");
					return json;
				}
			}
			Integer objectId = UserUtils.getUser().getBusinessId();
			for (int k=0;k<timeArray.length;k++){
				Integer num=0;
				if (type==3){
					advertisingCart.setDate(timeArray[k]);
					num = advertisingOrderService.orderNum(advertisingCart);
				}else if (type==4){
					advertisingCart.setDate(timeArray[k]);
					num = advertisingOrderService.orderNum2(advertisingCart);
				}
				if (num!=0){
					json.setSuccess(false);
					json.setMsg("请先去购物车中结算该广告位！");
					return json;
				}
			}
			for (int i=0;i<timeArray.length;i++){
				advertisingCart.setPutInTime(timeArray[i]);
				advertisingCart.setPriceType(Integer.parseInt(priceTypeArray[i]));
				advertisingCart.setPriceTypePrice(Float.parseFloat(priceTypePriceArray[i]));
				if (advertisingCart.getDeliveryType()==1){
					advertisingCart.setDeliveryTypeStartingPrice(Float.parseFloat(nowPriceArray[i]));
				}else if (advertisingCart.getDeliveryType()==2){
					advertisingCart.setDeliveryTypeStartingPrice(Float.parseFloat(nowPrice2Array[i]));
				}
				advertisingCart.setNowPrice2(Float.parseFloat(nowPrice2Array[i]));
				advertisingCart.setAuctionAmount(advertisingCart.getQuantityDelivered()*advertisingCart.getPriceTypePrice());
				advertisingCartService.save(advertisingCart);
			}
			json.setSuccess(true);
		}catch(Exception e){
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			log.error("操作失败！ msg={}", e.getMessage(), e);
			json.setSuccess(false);
			json.setMsg("操作失败！");
		}
		return json;
	}

	@Log("判断上架是否审核通过")
	@RequestMapping("checkShopInfo")
	@ResponseBody
	public Json checkShopInfo(ShopHotel shopHotel){
		Json json = new Json();
		if (UserUtils.getUser().getRoleType()==3){
			shopHotel.setShopId(UserUtils.getUser().getBusinessId());
			Integer msg = advertisingCartService.checkShopInfo(shopHotel);
			json.setMsg(msg.toString());
			json.setSuccess(true);
			return json;
		}else {
			json.setSuccess(true);
			json.setMsg("4");
			return json;
		}
	}


}
