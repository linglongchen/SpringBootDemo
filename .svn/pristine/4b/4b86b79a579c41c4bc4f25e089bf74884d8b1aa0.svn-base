package com.chunqiu.mrjuly.modules.advertisingorder.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.enums.RedisKeyCode;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.CacheRedisUtil;
import com.chunqiu.mrjuly.common.utils.DateUtils;
import com.chunqiu.mrjuly.common.utils.OssUtils.OSSClientConstants;
import com.chunqiu.mrjuly.common.utils.OssUtils.OSSClientUtils;
import com.chunqiu.mrjuly.common.utils.SmsUtil;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.utils.excel.ExportExcel;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.common.vo.adverOrderVo;
import com.chunqiu.mrjuly.modules.advertiserinfo.model.AdvertiserInfo;
import com.chunqiu.mrjuly.modules.advertiserinfo.service.AdvertiserInfoService;
import com.chunqiu.mrjuly.modules.advertisingcart.model.AdvertisingCart;
import com.chunqiu.mrjuly.modules.advertisingcart.service.AdvertisingCartService;
import com.chunqiu.mrjuly.modules.advertisingorder.model.AdvertisingOrder;
import com.chunqiu.mrjuly.modules.advertisingorder.service.AdvertisingOrderService;
import com.chunqiu.mrjuly.modules.adviertisement.model.AdviertisementType;
import com.chunqiu.mrjuly.modules.adviertisement.service.AdviertisementTypeService;
import com.chunqiu.mrjuly.modules.flowsheetinfo.service.FlowSheetInfoService;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.service.HotelInfoService;
import com.chunqiu.mrjuly.modules.install.model.CouponInfo;
import com.chunqiu.mrjuly.modules.install.model.Notice;
import com.chunqiu.mrjuly.modules.install.model.SysParameter;
import com.chunqiu.mrjuly.modules.install.service.CouponInfoService;
import com.chunqiu.mrjuly.modules.mybill.model.MyBillInfo;
import com.chunqiu.mrjuly.modules.mybill.service.MyBillInfoService;
import com.chunqiu.mrjuly.modules.shopinfo.model.ShopInfo;
import com.chunqiu.mrjuly.modules.shopinfo.service.ShopInfoService;
import com.chunqiu.mrjuly.modules.system.model.LyConfigStar;
import com.chunqiu.mrjuly.modules.system.service.LyConfigStarService;

import lombok.extern.slf4j.Slf4j;
import net.sf.json.JSONObject;
import net.sf.saxon.expr.TryCatch;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * 广告订单Controller
 * @author 周天
 * @version 2019-03-21
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/advertisingorder/advertisingOrder")
@Transactional
public class AdvertisingOrderController extends BaseController {

	@Autowired
	private AdvertisingOrderService advertisingOrderService;
	@Autowired
	private AdvertisingCartService advertisingCartService;
	@Autowired
	private CouponInfoService couponInfoService;
	@Autowired
	private HotelInfoService hotelInfoService;
	@Autowired
	private ShopInfoService shopInfoService;
	@Autowired
	private AdvertiserInfoService advertiserInfoService;
	@Autowired
	private FlowSheetInfoService flowSheetInfoService;
	@Autowired
	private AdviertisementTypeService adviertisementTypeService;
	@Autowired
	private MyBillInfoService myBillInfoService;
	@Autowired
	private LyConfigStarService configStarService;
	@Autowired
	private CacheRedisUtil redisUtil;
	
	/**
	 * @Description：广告订单列表页面
	 * @author 周天
	 */
	@Log("打开在线商家广告订单列表页面")
	@RequestMapping("index")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String index(CouponInfo couponInfo,ModelMap modelMap){
		SysParameter sysParameter = advertisingCartService.sysParameterInfo();
		couponInfo.setObjectId(UserUtils.getUser().getBusinessId());
		couponInfo.setType(1);
		List<CouponInfo> couponInfoList = advertisingCartService.couponInfo(couponInfo);
		modelMap.addAttribute("couponInfoList",couponInfoList);
		modelMap.addAttribute("sysParameter",sysParameter);
		return "advertisingorder/advertisingOrderList";
	}

	@Log("打开广告商广告订单列表页面")
	@RequestMapping("adverIndex")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String adverIndex(CouponInfo couponInfo,ModelMap modelMap){
		SysParameter sysParameter = advertisingCartService.sysParameterInfo();
		couponInfo.setObjectId(UserUtils.getUser().getBusinessId());
		couponInfo.setType(2);
		List<CouponInfo> couponInfoList = advertisingCartService.couponInfo(couponInfo);
		modelMap.addAttribute("couponInfoList",couponInfoList);
		modelMap.addAttribute("sysParameter",sysParameter);
		return "advertisingorder/advertiserShoppingCartSettlement";
	}

	/**
	 * @Description：广告订单列表数据
	 * @author 周天
	 */
	@Log("获取广告订单列表数据")
	@RequestMapping("list")
	@ResponseBody
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public Grid list(AdvertisingOrder advertisingOrder, GridParam param) {
		advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
		return advertisingOrderService.findPage(advertisingOrder, param);
	}

	@Log("打开加价页面")
	@RequestMapping(value = "form")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String form(AdvertisingOrder advertisingOrder, ModelMap model) {
		advertisingOrder = advertisingOrderService.get(advertisingOrder);
		model.addAttribute("advertisingOrder", advertisingOrder);
		return "advertisingorder/advertisingOrderForm";
	}

	@Log("打开在线商家购买成功页面")
	@RequestMapping(value = "purchaseSuccessFrom")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String purchaseSuccessFrom() {
		return "advertisingorder/purchaseSuccess";
	}


	@Log("打开广告商购买成功页面")
	@RequestMapping(value = "adverPurchaseSuccessFrom")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String adverPurchaseSuccessFrom() {
		return "advertisingorder/adverPurchaseSuccess";
	}

	@Log("打开购买成功详情页面")
	@RequestMapping(value = "purchaseSuccessInfo")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String purchaseSuccessInfo(AdvertisingOrder advertisingOrder, ModelMap model) throws ParseException {
		advertisingOrder = advertisingOrderService.get(advertisingOrder);
		//当前时间
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
		Date nowdate = df.parse(advertisingOrder.getPutInTime());
		//相差的天数
		Integer date = DateUtils.differentDays(new Date(),nowdate);
		if (date<=0){
			advertisingOrder.setDate("0");
		}else {
			advertisingOrder.setDate(String.valueOf(date));
		}
		//查询系统设置
		SysParameter sysParameter = advertisingCartService.sysParameterInfo();
		model.addAttribute("advertisingOrder", advertisingOrder);
		model.addAttribute("sysParameter", sysParameter);
		return "advertisingorder/advertisingOrderInfo";
	}

	/**
	 * @Description：保存加价
	 * @author 周天
	 */
	@Log("保存加价")
	@RequestMapping("saveAdvertisingOrder")
	@RequiresPermissions("advertisingorder:advertisingOrder:edit")
	public String saveAdvertisingOrder(AdvertisingOrder advertisingOrder, ModelMap model){
		try{
			//当前输入的当前价
			double priceTypePrice = advertisingOrder.getPriceTypePrice();
			//查询当前订单的信息
			advertisingOrder = advertisingOrderService.get(advertisingOrder);
			//查询系统参数
			SysParameter sysParameter = advertisingCartService.sysParameterInfo();
			double minAuctionPrice = priceTypePrice - advertisingOrder.getPriceTypePrice();
			if(minAuctionPrice < sysParameter.getMinAuctionPrice()){
				model.addAttribute("error", "当前加价的金额最小单位为"+sysParameter.getMinAuctionPrice()+"元！");
				return form(advertisingOrder, model);
			}

			//当前酒店的广告位状态为支付成功并且是待结算或者结算成功
			AdvertisingCart advertisingCart = new AdvertisingCart();
			advertisingCart.setHotelCodeId(advertisingOrder.getHotelCodeId());
			advertisingCart.setUploadId(advertisingOrder.getUploadId());
			advertisingCart.setPutInTime(advertisingOrder.getPutInTime());
			advertisingCart.setDeliveryType(advertisingOrder.getDeliveryType());
			Integer countSuccess = advertisingCartService.countOrderSusccessById(advertisingCart);
			if (countSuccess > 0){
				//更新当前订单为竞拍失败
				AdvertisingOrder order = new AdvertisingOrder();
				order.setAuctionStatus(1);
				order.setPayStatus(0);
				order.setId(advertisingOrder.getId());
				advertisingOrderService.updateStatus(order);
				return error;
			}else {
				//查询当前酒店下的所有客户端
				HotelInfo hotelInfo = new HotelInfo();
				hotelInfo.setHotelCodeId(advertisingOrder.getHotelCodeId());
				int count = hotelInfoService.getHotelInfo(hotelInfo);
				//总金额
				double price = count * priceTypePrice;
				//投放类型为图文
				if (advertisingOrder.getDeliveryType() == 1){
					//判断当前图文的当前价是否大于当前酒店图片的一口价
					hotelInfo = hotelInfoService.hotelInfoById(hotelInfo);
					//图文一口价
					Float totalPrice = hotelInfo.getTotalPrice();
					//当前图文输入的价格大于当前图文的一口价
					if (priceTypePrice >= totalPrice){
						model.addAttribute("status", 1);
						model.addAttribute("advertisingOrder", advertisingOrder);
						return form(advertisingOrder, model);
					}

					//当前填写的当前价大于最新的当前价并且当前填写的当前价小于一口价
					Float priceTypePriceNow = advertisingCartService.priceTypePrice(advertisingCart);
					if (priceTypePrice > priceTypePriceNow ){
						//更新当前订单的当前价和总价
						advertisingOrder.setPriceTypePrice(priceTypePrice);
						advertisingOrder.setAuctionAmount(price);
						advertisingOrderService.updateOrderPrice(advertisingOrder);

						//插入下一个人竞拍的当前价提醒消息
						AdvertisingOrder advertisingOrder1 = advertisingOrderService.advertisingOrderInfoById(advertisingOrder);
						if (advertisingOrder1 != null){
							//新增一条广告商或者商家的消息
							Notice notice = new Notice();
							if (advertisingOrder1.getType() == 2){
								notice.setTarget(3);
							}else if (advertisingOrder1.getType() == 1){
								notice.setTarget(2);
							}
							notice.setObjectId(advertisingOrder1.getObjectId());
							notice.setNoticeRoll(1);
							notice.setCircularEndTime(getSpecifiedDayAfter());
							//查询当前酒店信息
							HotelInfo hotelInfo1 = new HotelInfo();
							hotelInfo1.setHotelCodeId(advertisingOrder.getHotelCodeId());
							hotelInfo1 = hotelInfoService.hotelInfoById(hotelInfo1);
							notice.setNoticeTitle("竞拍广告位消息");
							notice.setNoticeContent("你参与"+hotelInfo1.getHotelName()+"广告位竞拍的当前价已被其他人加价！");
							notice.preInsert();
							notice.setTimeSn(System.currentTimeMillis()+"");
							advertisingCartService.insertMessageInfo(notice);
							if (advertisingOrder1.getType() == 1){
								ShopInfo shopInfo = shopInfoService.get(advertisingOrder1.getObjectId());
								//发送短信
								String jsonStr = "{\"hotelName\":\"" + hotelInfo1.getHotelName() + "\"}";
								SmsUtil.sendValidCodeSms("SMS_163846913",shopInfo.getMobile(),jsonStr);
							}else if (advertisingOrder1.getType() == 2){
								AdvertiserInfo advertiserInfo = advertiserInfoService.get(advertisingOrder1.getObjectId());
								//发送短信
								String jsonStr = "{\"hotelName\":\"" + hotelInfo1.getHotelName() + "\"}";
								SmsUtil.sendValidCodeSms("SMS_163846913",advertiserInfo.getMobile(),jsonStr);
							}

							return successPath;
						}

					}else {
						model.addAttribute("error", "输入的当前价低于当前竞拍的当前价！");
						return form(advertisingOrder, model);
					}

				//投放类型为视频
				}else if (advertisingOrder.getDeliveryType() == 2){
					//判断当前视频的当前价是否大于当前酒店视频的一口价
					hotelInfo = hotelInfoService.hotelInfoById(hotelInfo);
					//视频一口价
					Float totalPrice = hotelInfo.getTotalPrice2();
					//当前视频输入的价格大于当前视频的一口价
					if (priceTypePrice >= totalPrice){
						model.addAttribute("status", 1);
						model.addAttribute("advertisingOrder", advertisingOrder);
						return form(advertisingOrder, model);
					}

					//当前的输入当前价大于最新的视频当前价并且当前输入的当前价小于视频的一口价
					Float priceTypePriceNow = advertisingCartService.priceTypePrice(advertisingCart);
					if (priceTypePrice > priceTypePriceNow ){
						//更新当前订单的当前价和总价
						advertisingOrder.setPriceTypePrice(priceTypePrice);
						advertisingOrder.setAuctionAmount(price);
						advertisingOrderService.updateOrderPrice(advertisingOrder);

						//插入下一个人竞拍的当前价提醒消息
						AdvertisingOrder advertisingOrder1 = advertisingOrderService.advertisingOrderInfoById(advertisingOrder);
						if (advertisingOrder1 != null) {
							//新增一条广告商或者商家的消息
							Notice notice = new Notice();
							if (advertisingOrder1.getType() == 2) {
								notice.setTarget(3);
							} else if (advertisingOrder1.getType() == 1) {
								notice.setTarget(2);
							}
							notice.setObjectId(advertisingOrder1.getObjectId());
							notice.setNoticeRoll(1);
							notice.setCircularEndTime(getSpecifiedDayAfter());
							//查询当前酒店信息
							HotelInfo hotelInfo1 = new HotelInfo();
							hotelInfo1.setHotelCodeId(advertisingOrder.getHotelCodeId());
							hotelInfo1 = hotelInfoService.hotelInfoById(hotelInfo1);
							notice.setNoticeTitle("竞拍广告位消息");
							notice.setNoticeContent("你参与" + hotelInfo1.getHotelName() + "广告位竞拍的当前价已被其他人加价！");
							notice.preInsert();
							notice.setTimeSn(System.currentTimeMillis() + "");
							advertisingCartService.insertMessageInfo(notice);
							if (advertisingOrder1.getType() == 1) {
								ShopInfo shopInfo = shopInfoService.get(advertisingOrder1.getObjectId());
								//发送短信
								String jsonStr = "{\"hotelName\":\"" + hotelInfo1.getHotelName() + "\"}";
								SmsUtil.sendValidCodeSms("SMS_163846913", shopInfo.getMobile(), jsonStr);
							} else if (advertisingOrder1.getType() == 2) {
								AdvertiserInfo advertiserInfo = advertiserInfoService.get(advertisingOrder1.getObjectId());
								//发送短信
								String jsonStr = "{\"hotelName\":\"" + hotelInfo1.getHotelName() + "\"}";
								SmsUtil.sendValidCodeSms("SMS_163846913", advertiserInfo.getMobile(), jsonStr);
							}

							return successPath;
						}
					}else {
						model.addAttribute("error", "输入的当前价低于当前竞拍的当前价！");
						return form(advertisingOrder, model);
					}
				}
			}
		}catch(Exception e){
			log.error("保存失败！ msg={}", e.getMessage(), e);
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			model.addAttribute("error", "保存失败！");
			return form(advertisingOrder, model);
		}
		return successPath;
	}

	/**
	 * 获得指定日期的后一天
	 * @return
	 */
	public static Date getSpecifiedDayAfter() throws ParseException {
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
		String specifiedDay = df.format(new Date());
		Calendar c = Calendar.getInstance();
		Date date=null;
		try {
			date = new SimpleDateFormat("yy-MM-dd").parse(specifiedDay);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		c.setTime(date);
		int day=c.get(Calendar.DATE);
		c.set(Calendar.DATE,day+1);

		String dayAfter = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");//yyyy-mm-dd, 会出现时间不对, 因为小写的mm是代表: 秒
		Date utilDate = sdf.parse(dayAfter);
		System.out.println(utilDate);//查看utilDate的值
		Date date1 = new java.sql.Date(utilDate.getTime());
		return date1;
	}

	/**
	 * @Description：保存加价
	 * @author 周天
	 */
	@Log("保存加价为一口价")
	@RequestMapping("saveAdvertisingPriceOrder")
	@ResponseBody
	@RequiresPermissions("advertisingorder:advertisingOrder:edit")
	public Json saveAdvertisingPriceOrder(AdvertisingOrder advertisingOrder, ModelMap model){
		Json json = new Json();
		try{
			//查询当前订单的信息
			advertisingOrder = advertisingOrderService.get(advertisingOrder);
			//当前酒店的广告位状态为支付成功并且是待结算或者结算成功
			AdvertisingCart advertisingCart = new AdvertisingCart();
			advertisingCart.setHotelCodeId(advertisingOrder.getHotelCodeId());
			advertisingCart.setUploadId(advertisingOrder.getUploadId());
			advertisingCart.setPutInTime(advertisingOrder.getPutInTime());
			advertisingCart.setDeliveryType(advertisingOrder.getDeliveryType());
			Integer countSuccess = advertisingCartService.countOrderSusccessById(advertisingCart);
			//判断当前广告位是否被竞拍下来
			if (countSuccess > 0){
				//更新当前订单为竞拍失败
				AdvertisingOrder order = new AdvertisingOrder();
				order.setAuctionStatus(1);
				order.setPayStatus(0);
				order.setId(advertisingOrder.getId());
				advertisingOrderService.updateStatus(order);
				json.setSuccess(false);
				json.setMsg("竞拍失败！");
				return json;
			}else {
				//查询当前酒店下的所有客户端
				HotelInfo hotelInfo = new HotelInfo();
				hotelInfo.setHotelCodeId(advertisingOrder.getHotelCodeId());
				int count = hotelInfoService.getHotelInfo(hotelInfo);
				AdvertisingOrder advertisingOrder1 = new AdvertisingOrder();
				//图文
				if (advertisingOrder.getDeliveryType() == 1){
					advertisingOrder1.setAuctionAmount(advertisingOrder.getTotalPrice()*count);
					advertisingOrder1.setAuctionStatus(3);
					advertisingOrder1.setPayStatus(1);
					advertisingOrder1.setPriceType(2);
					advertisingOrder1.setPriceTypePrice(advertisingOrder.getTotalPrice());
					advertisingOrder1.setId(advertisingOrder.getId());
					advertisingOrderService.save(advertisingOrder1);
					//当前订单为一口价类型的进行参与竞拍成功后，当前广告位为当前价竞拍更改为竞拍失败
					advertisingCartService.updateOrderStatusById(advertisingOrder);
				//视频
				}else if (advertisingOrder.getDeliveryType() == 2){
					advertisingOrder1.setAuctionAmount(advertisingOrder.getTotalPrice2()*count);
					advertisingOrder1.setAuctionStatus(3);
					advertisingOrder1.setPayStatus(1);
					advertisingOrder1.setPriceType(2);
					advertisingOrder1.setPriceTypePrice(advertisingOrder.getTotalPrice2());
					advertisingOrder1.setId(advertisingOrder.getId());
					advertisingOrderService.save(advertisingOrder1);
					//当前订单为一口价类型的进行参与竞拍成功后，当前广告位为当前价竞拍更改为竞拍失败
					advertisingCartService.updateOrderStatusById(advertisingOrder);
				}
			}

		}catch(Exception e){
			log.error("保存失败！ msg={}", e.getMessage(), e);
			json.setSuccess(false);
			json.setMsg("竞拍失败！");
			//异常回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return json;
		}
		json.setSuccess(true);
		json.setMsg("竞拍成功！");
		return json;
	}


	@Log("结算广告订单")
	@RequestMapping("buyAdvertising")
	@ResponseBody
	@RequiresPermissions("advertisingorder:advertisingOrder:edit")
	public String buyAdvertising(AdvertisingOrder advertisingOrder,ModelMap modelMap){
		try {
			//优惠券id
			int couponId = advertisingOrder.getCouponId();
			//需要付款价格
			double totalOrderPrice = 0;
			//总价格
			double couponPrice = 0;
			//公司编号
			String codeName = "";
			//当前人的账号余额
			double price = 0;
			//公司名称
			String name = "";
			//星级ID
			long starId = 0;
			//星级折扣
			double starDiscount = 0;
			//在线商家
			if (UserUtils.getUser().getRoleType() == 3){
				ShopInfo shopInfo = shopInfoService.get(UserUtils.getUser().getBusinessId());
				starId = shopInfo.getStarId();
				codeName =  shopInfo.getShopNumber();
				price = shopInfo.getAccount();
				name = shopInfo.getShopName();
				//广告商
			}else if (UserUtils.getUser().getRoleType() == 4){
				AdvertiserInfo advertiserInfo = advertiserInfoService.get(UserUtils.getUser().getBusinessId());
				starId = advertiserInfo.getStarId();
				codeName = advertiserInfo.getAdvertiserNumber();
				price = advertiserInfo.getAccountBalance();
				name = advertiserInfo.getAdvertiserName();
			}

			LyConfigStar currentStar = configStarService.selectByPrimaryKey(starId);
			if (currentStar != null) {
				starDiscount = currentStar.getDiscount() / 100.0;
			}
			//查询所有订单信息
			List<AdvertisingOrder> advertisingOrders = strToList(advertisingOrder.getList(), AdvertisingOrder.class);
			List<AdvertisingOrder> advertisingOrderList = advertisingOrderService.orderPriceListById(advertisingOrders);
			//查询优惠券内容
			CouponInfo couponInfo = advertisingOrderService.couponInfoById(couponId);
			Integer date = 0;
			if (couponInfo != null){
				date = Integer.parseInt(couponInfo.getPreferentialQuota());
			}

			for (int j = 0;j<advertisingOrderList.size();j++){
				if (j>=date){
					if (starDiscount > 0) {
						BigDecimal decimalResult = new BigDecimal(advertisingOrderList.get(j).getAuctionAmount() * starDiscount);
						//星级折扣后优惠金额
						double discountMoney = decimalResult.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
						//减免星级折扣后实付金额
						double currentMoney = advertisingOrderList.get(j).getAuctionAmount() - discountMoney;
						//累计实付的总金额
						totalOrderPrice += currentMoney;
						//保存本次优惠金额
						advertisingOrderList.get(j).setSavingMoney(discountMoney);
						//保存本次实付金额
						advertisingOrderList.get(j).setAuctionAmount(currentMoney);
					} else {
						totalOrderPrice += advertisingOrderList.get(j).getAuctionAmount();
					}
				}else{
					advertisingOrderList.get(j).setSavingMoney(advertisingOrderList.get(j).getAuctionAmount());
					advertisingOrderList.get(j).setAuctionAmount(0);
				}
			}
			//判断账号余额
			if (totalOrderPrice > price){
				return "false";
			}
			int count = 0;
			//当前时间
			SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");//设置日期格式
			String nowdate = df.format(new Date());
			//随机数
			String math = System.currentTimeMillis()+"";
			//交易编号
			String transactionodersn = "";
			//查询所有订单
			transactionodersn = nowdate + "-" + advertisingOrderList.size() + "-" + totalOrderPrice + "-" + codeName + "-" + math;
			for (AdvertisingOrder advertisingOrder1 : advertisingOrderList){
				advertisingOrder1.setTransactionodersn(transactionodersn);
				advertisingOrder1.setCouponId(couponId);
				advertisingOrder1.setTotalOrderPrice(totalOrderPrice);
				//更新订单
				count = advertisingOrderService.updateOrderById(advertisingOrder1);
				if (count > 0){
					//新增我的账单
					MyBillInfo myBillInfo = new MyBillInfo();
					myBillInfo.setBillOfOriginId(advertisingOrder1.getId().toString());
					myBillInfo.setStatus(1);
					myBillInfo.setRemarks("广告位结算");
					myBillInfo.setType(advertisingOrder1.getType());
					myBillInfo.setAmountPrice(Float.valueOf(String.valueOf(advertisingOrder1.getAuctionAmount())));
					myBillInfo.setObjectId(UserUtils.getUser().getBusinessId());
					myBillInfo.preInsert();
					myBillInfoService.save(myBillInfo);
				}

			}
			if (count > 0){
				//扣除当前账户总金额
				AdvertisingCart advertisingCart1 = new AdvertisingCart();
				advertisingCart1.setId(UserUtils.getUser().getBusinessId());
				advertisingCart1.setType(UserUtils.getUser().getRoleType());
				advertisingCart1.setAuctionAmount(totalOrderPrice);
				int updatePrice = advertisingCartService.updateUserAccount(advertisingCart1);
				if (updatePrice > 0){
					//优惠券更新
					AdvertisingOrder advertisingOrder1 = new AdvertisingOrder();
					advertisingOrder1.setCouponId(couponId);
					advertisingOrder1.setObjectId(UserUtils.getUser().getBusinessId());
					if (UserUtils.getUser().getRoleType() == 3){
						advertisingOrder1.setType(1);
					}else if (UserUtils.getUser().getRoleType() == 4){
						advertisingOrder1.setType(2);
					}
					advertisingOrderService.updateCouponById(advertisingOrder1);
				}
			}

			return "true";
		}catch (Exception e){
			//异常回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();

			return "false";
		}
	}


	/**
	 * @Description：广告订单数据删除方法
	 * @author 周天
	 */
	@Log("删除广告订单")
	@RequestMapping("delAdvertisingOrder")
	@ResponseBody
	@RequiresPermissions("advertisingorder:advertisingOrder:edit")
	public Json delAdvertisingOrder(AdvertisingOrder advertisingOrder){
		Json json = new Json();
		try{
			advertisingOrderService.delete(advertisingOrder);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("删除失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("删除失败！");
		}
		return json;
	}


	@Log("获取广告订单成功购买列表数据")
	@RequestMapping("shoppingSuccessList")
	@ResponseBody
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public Grid shoppingSuccessList(AdvertisingOrder advertisingOrder, GridParam param) {
		advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
		return advertisingOrderService.successPurchase(advertisingOrder, param);
	}


	@Log("打开酒店总览")
	@RequestMapping(value = "localOverviewFrom")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String localOverviewFrom(AdvertisingOrder advertisingOrder,ModelMap map) {
		advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
		List<AdvertisingOrder> advertisingOrderList = advertisingOrderService.AdvertisingOrderHotelList(advertisingOrder);
		map.addAttribute("advertisingOrderList",advertisingOrderList);
		return "advertisingorder/localOverviewList";
	}

	@Log("酒店总览数据列表")
	@RequestMapping("localOverviewList")
	@ResponseBody
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public Grid localOverviewList(AdvertisingOrder advertisingOrder, GridParam param) {
		advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
		return advertisingOrderService.overviewOrderList(advertisingOrder, param);
	}

	@Log("投放广告数据分析")
	@RequestMapping("AnalysisOfAdvertisingDataList")
	@ResponseBody
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public Grid AnalysisOfAdvertisingDataList(AdvertisingOrder advertisingOrder, GridParam param) {
		advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
		return advertisingOrderService.analysisOfAdvertisingDataList(advertisingOrder, param);
	}

	@Log("投放广告数据分析折线图")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	@RequestMapping("AnalysisOfAdvertisingDataDiagramList")
	public String AnalysisOfAdvertisingDataDiagramList(AdvertisingOrder advertisingOrder, ModelMap modelMap) {
		modelMap.addAttribute("advertisingOrder",advertisingOrder);
		return "adviertisement/dataAnalysisPolygraphForm";
	}

	@Log("投放广告数据分析折线图数据")
	@RequestMapping("diagramDataList")
	@ResponseBody
	public Map<String,Object> diagramDataList(AdvertisingOrder advertisingOrder) {
		Map<String,Object> map = new HashMap<>();
		//查询当前订单被点击的状态次数
		List<AdvertisingOrder> advertisingOrderList = advertisingOrderService.orderCLickList(advertisingOrder);
		List<String> betweenDate = new ArrayList<>();
		//广告滚屏次数
		List<Integer> scrollingNumber = new ArrayList<>();
		//雷达触发次数
		List<Integer> radarNumber = new ArrayList<>();
		//广告点击次数
		List<Integer> clickNumber = new ArrayList<>();
		if (advertisingOrderList.size() > 0){
			for (int i = 0;i<advertisingOrderList.size();i++){
				betweenDate.add(advertisingOrderList.get(i).getDate());
				if (advertisingOrderList.get(i).getScrollingNumber() == null){
						scrollingNumber.add(0);
				}else {
					scrollingNumber.add(advertisingOrderList.get(i).getScrollingNumber());
				}
				if (advertisingOrderList.get(i).getRadarNumber() == null){
					radarNumber.add(0);
				}else {
					radarNumber.add(advertisingOrderList.get(i).getRadarNumber());
				}
				if (advertisingOrderList.get(i).getClickNumber() == null){
					clickNumber.add(0);
				}else {
					clickNumber.add(advertisingOrderList.get(i).getClickNumber());
				}
			}
		}
		map.put("betweenDate",betweenDate);
		map.put("scrollingNumber",scrollingNumber);
		map.put("radarNumber",radarNumber);
		map.put("clickNumber",clickNumber);
		return map;
	}

	@Log("酒店信息")
	@RequestMapping(value = "advertisingHotelFrom")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String advertisingHotelFrom(HotelInfo hotelInfo,ModelMap modelMap) {
		hotelInfo = hotelInfoService.hotelInfoById(hotelInfo);
		//查询所有客户端
		double count = hotelInfoService.getHotelInfo(hotelInfo);
		//查询已激活数量
		hotelInfo.setActivation(1);
		double count1 = hotelInfoService.getHotelInfo(hotelInfo);
		String activationRate  = ((count1 / count)*100) + "%";
		hotelInfo.setActivationRate(activationRate);
		modelMap.addAttribute("hotelInfo",hotelInfo);
		return "adviertisement/advertisingHotelForm";
	}

	@Log("打开投放记录")
	@RequestMapping(value = "releaseRecordForm")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String releaseRecordForm() {
		return "advertisingorder/releaseRecordList";
	}

	@Log("投放记录数据列表")
	@RequestMapping("releaseRecordDataList")
	@ResponseBody
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public Grid releaseRecordDataList(AdvertisingOrder advertisingOrder, GridParam param) {
		advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
		if (advertisingOrder.getDate() == null){
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM");//设置日期格式
			String nowdate = df.format(new Date());
			advertisingOrder.setDate(nowdate);
		}
		Grid grid = advertisingOrderService.releaseRecordDataList(advertisingOrder, param);
		List<AdvertisingOrder> advertisingOrderList = grid.getRows();
		if (advertisingOrderList.size()> 0){
			for (AdvertisingOrder advertisingOrder1 : advertisingOrderList){
				if (advertisingOrder1.getDeliveryType() == 1){
					advertisingOrder.setDeliveryType(1);
					AdvertisingOrder advertisingOrder2 = advertisingOrderService.orderNumberData(advertisingOrder);
					if (advertisingOrder2 != null){
						advertisingOrder1.setAuctionAmount(advertisingOrder2.getAuctionAmount());
						advertisingOrder1.setCouponPrice(advertisingOrder2.getCouponPrice());
					}else {
						advertisingOrder1.setAuctionAmount(0);
						advertisingOrder1.setCouponPrice(0);
					}

				}else if (advertisingOrder1.getDeliveryType() == 2){
					advertisingOrder.setDeliveryType(2);
					AdvertisingOrder advertisingOrder2 = advertisingOrderService.orderNumberData(advertisingOrder);
					if (advertisingOrder2 != null){
						advertisingOrder1.setAuctionAmount(advertisingOrder2.getAuctionAmount());
						advertisingOrder1.setCouponPrice(advertisingOrder2.getCouponPrice());
					}else {
						advertisingOrder1.setAuctionAmount(0);
						advertisingOrder1.setCouponPrice(0);
					}
				}
			}
		}
		return grid;
	}


	@Log("打开投放记录饼图")
	@RequestMapping(value = "putInRecordPieChartFrom")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String putInRecordPieChartFrom() {
		return "advertisingorder/putInRecordPieChartForm";
	}

	@Log("投放记录饼图数据")
	@RequestMapping("putInRecordPieChartData")
	@ResponseBody
	public Map<String,Object> putInRecordPieChartData(AdvertisingOrder advertisingOrder) {
		Map<String,Object> map = new HashMap<>();
		if (advertisingOrder.getDate() == null ||  "".equals(advertisingOrder.getDate())){
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM");//设置日期格式
			String nowdate = df.format(new Date());
			advertisingOrder.setDate(nowdate);
		}
		advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
		advertisingOrder = advertisingOrderService.advertisingOrderInfo(advertisingOrder);
		map.put("advertisingOrder",advertisingOrder);
		return map;
	}

	/**
	 * 导出数据
	 *
	 * @return
	 */
	@RequestMapping(value = "export", method = RequestMethod.GET)
	@ResponseBody
	public String exportFile(HttpServletRequest request, HttpServletResponse response) {
		try {
			String fileName = "投放记录数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
			//测试数据
			AdvertisingOrder advertisingOrder = new AdvertisingOrder();
			advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
			if (advertisingOrder.getDate() == null){
				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM");//设置日期格式
				String nowdate = df.format(new Date());
				advertisingOrder.setDate(nowdate);
			}

			List<AdvertisingOrder> advertisingOrderList = advertisingOrderService.advertisingOrderExcel(advertisingOrder);
			if (advertisingOrderList.size()> 0){
				for (AdvertisingOrder advertisingOrder1 : advertisingOrderList){
					if (advertisingOrder1.getDeliveryType() == 1){
						advertisingOrder.setDeliveryType(1);
						AdvertisingOrder advertisingOrder2 = advertisingOrderService.orderNumberData(advertisingOrder);
						if (advertisingOrder2 != null){
							advertisingOrder1.setAuctionAmount(advertisingOrder2.getAuctionAmount());
							advertisingOrder1.setCouponPrice(advertisingOrder2.getCouponPrice());
						}else {
							advertisingOrder1.setAuctionAmount(0);
							advertisingOrder1.setCouponPrice(0);
						}

					}else if (advertisingOrder1.getDeliveryType() == 2){
						advertisingOrder.setDeliveryType(2);
						AdvertisingOrder advertisingOrder2 = advertisingOrderService.orderNumberData(advertisingOrder);
						if (advertisingOrder2 != null){
							advertisingOrder1.setAuctionAmount(advertisingOrder2.getAuctionAmount());
							advertisingOrder1.setCouponPrice(advertisingOrder2.getCouponPrice());
						}else {
							advertisingOrder1.setAuctionAmount(0);
							advertisingOrder1.setCouponPrice(0);
						}
					}
				}
			}

			new ExportExcel("投放记录数据", adverOrderVo.class).setDataList(advertisingOrderList).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			request.setAttribute("error", "导出数据失败");
		}
		return null;
	}

	//对象转换为List集合
	private static <T> List<T> strToList(String str, Class<T> clazz) {
		net.sf.json.JSONArray json = net.sf.json.JSONArray.fromObject(str);
		JSONObject object = null;
		T t = null;
		List<T> list = new ArrayList<>();
		for (int i = 0; i < json.size(); i++) {
			object = JSONObject.fromObject(json.get(i));
			t = (T) JSONObject.toBean(object, clazz);
			list.add(t);
		}
		return list;
	}



	@Log("打开广告订单列表页面")
	@RequestMapping("index2")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String index2(){
		return "advertisingorder/advertisingOrderList2";
	}

	@Log("获取广告订单列表数据")
	@RequestMapping("list2")
	@ResponseBody
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public Grid list2(AdvertisingOrder advertisingOrder, GridParam param) {
		advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
		Grid grid =  advertisingOrderService.findPage2(advertisingOrder, param);
		List<AdvertisingOrder> advertisingOrderList = grid.getRows();
		for (AdvertisingOrder advertisingOrder1 : advertisingOrderList){
			HotelInfo hotelInfo = new HotelInfo();
			hotelInfo.setHotelCodeId(advertisingOrder1.getHotelCodeId());
			int count = hotelInfoService.getHotelInfo(hotelInfo);
			advertisingOrder1.setQuantityDelivered(count);
		}
		grid.setRows(advertisingOrderList);
		return grid;
	}



	@Log("打开广告订单列表页面2")
	@RequestMapping("index3")
	@RequiresPermissions("adviertisement:AdvertisingPage:view")
	public String index3(AdvertisingOrder advertisingOrder,ModelMap modelMap){
		modelMap.addAttribute("orderType2",advertisingOrder.getOrderType2());
		return "advertisingorder/advertisingOrderList3";
	}

	@Log("打开内容匹配")
	@RequestMapping("contentMatch")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String contentMatch(AdvertisingOrder advertisingOrder,ModelMap modelMap){
    	Integer uploadTime = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_TIME, Integer.class);
    	uploadTime = uploadTime == null ? 15 : uploadTime;
        modelMap.addAttribute("uploadTime", uploadTime);
		Integer picSize = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_P_SIZE, Integer.class);
		picSize = picSize == null ? 10 : picSize;
		modelMap.addAttribute("picSize", picSize);
		Integer videoSize = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_V_SIZE, Integer.class);
		videoSize = videoSize == null ? 30 : videoSize;
		modelMap.addAttribute("videoSize", videoSize);
		if (advertisingOrder.getId()==null){
			return "advertisingorder/contentMatchForm";
		}else{
			advertisingOrder=advertisingOrderService.getTypeData(advertisingOrder.getOrdernumber());
			if (advertisingOrder.getDeliveryType()==1){
				advertisingOrder.setStateName("图文");
			}else{
				advertisingOrder.setStateName("视频");
			}
			String[] str = advertisingOrder.getStand().split(",");
			advertisingOrder.setStand(adviertisementTypeService.getType3Name(Integer.parseInt(str[2])).getType3Name());
			modelMap.addAttribute("advertisingOrder",advertisingOrder);
			return "advertisingorder/contentMatchForm";
		}
	}


	@Log("上传广告")
	@RequestMapping("uploadTest2")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String uploadTest2(AdvertisingOrder advertisingOrder, ModelMap modelMap) {
		try {
			//图片
			if (advertisingOrder.getType() == 1){
				String pic = OSSClientUtils.ossUploadPictures(advertisingOrder.getAdvertisingContent());
				advertisingOrder.setAdvertisingContent(pic);
				//视频
			}else {
				advertisingOrder.setAdvertisingContent(OSSClientConstants.URL+((advertisingOrder.getAdvertisingContent().split(":/"))[1]));
			}
			advertisingOrder.setObjectId(Integer.parseInt(UserUtils.getUser().getBusinessId().toString()));
			Integer count = advertisingOrderService.get(advertisingOrder.getId()).getUploadCount();
			ShopInfo shopInfo = shopInfoService.get(advertisingOrder.getObjectId());
			String[] strings2 = advertisingOrderService.getTypeData(advertisingOrder.getOrdernumber()).getStand().split(",");
			String num = adviertisementTypeService.getType3Name(Integer.parseInt(strings2[2])).getType3Num();
			Date date = new Date();
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
			String string2 = simpleDateFormat.format(date).replaceAll("-", "");
			advertisingOrder.setAdvertisementMark(shopInfo.getShopNumber() + num + string2);
			if (count <= 0) {
				modelMap.addAttribute("error", "无制作机会");
				return "advertisingorder/advertisingOrderList2";
			} else {
				advertisingOrder.setUploadCount(count - 1);
				advertisingOrder.setState(0);
				advertisingOrderService.uploadAdvertisement(advertisingOrder);
			}
		} catch (Exception e) {
			//异常回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			e.printStackTrace();
			modelMap.addAttribute("error", "保存失败");
			return "advertisingorder/advertisingOrderList2";
		}
		modelMap.addAttribute("success", "1");
		return "advertisingorder/advertisingOrderList2";
	}



	@Log("打开广告订单列表详情页面")
	@RequestMapping("orderDetail")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String orderDetail(AdvertisingOrder advertisingOrder,ModelMap modelMap){
	    advertisingOrder=advertisingOrderService.getDetail(advertisingOrder);
		String string = UserUtils.getUser().getName();
		advertisingOrder.setAdvertisementName(string);
		modelMap.addAttribute("advertisingOrder",advertisingOrder);
		return "advertisingorder/OrderDetailForm";
	}

	@Log("获取广告订单列表数据")
	@RequestMapping("orderDetailList")
	@ResponseBody
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public Grid orderDetailList(AdvertisingOrder advertisingOrder, GridParam param) {
		Grid grid = advertisingOrderService.orderDetailList(advertisingOrder, param);
		List<AdvertisingOrder> list = grid.getRows();
		for (AdvertisingOrder advertisingOrder1 : list) {
			String userName = UserUtils.getUser().getName();
			advertisingOrder1.setAdvertisementName(userName);
		}
		grid.setRows(list);
		return grid;
	}





	@Log("广告商内容匹配")
	@RequestMapping("uploadTest3")
	@RequiresPermissions("advertisingorder:advertisingOrder:view")
	public String uploadTest3(AdvertisingOrder advertisingOrder, ModelMap modelMap) {
		try{
			//图片
			if (advertisingOrder.getType() == 1){
				String pic = OSSClientUtils.ossUploadPictures(advertisingOrder.getAdvertisingContent());
				advertisingOrder.setAdvertisingContent(pic);
				//视频
			}else {
				advertisingOrder.setAdvertisingContent(OSSClientConstants.URL+((advertisingOrder.getAdvertisingContent().split(":/"))[1]));
			}
			advertisingOrder.setObjectId(Integer.parseInt(UserUtils.getUser().getBusinessId().toString()));
			Integer count = advertisingOrderService.get(advertisingOrder.getId()).getUploadCount();
			if (count<=0){
				modelMap.addAttribute("error","无制作机会");
				return "advertisingorder/advertisingOrderList3";
			}else {
				AdvertiserInfo advertiserInfo = advertiserInfoService.get(advertisingOrder.getObjectId());
				String[] strings2 = advertisingOrderService.getTypeData(advertisingOrder.getOrdernumber()).getStand().split(",");
				String num = adviertisementTypeService.getType3Name(Integer.parseInt(strings2[2])).getType3Num();
				Date date = new Date();
				SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
				String string2 = simpleDateFormat.format(date).replaceAll("-", "");
				advertisingOrder.setState(0);
				advertisingOrder.setAdvertisementMark(advertiserInfo.getAdvertiserNumber() + num + string2);
				advertisingOrder.setUploadCount(count-1);
				advertisingOrderService.uploadAdvertisement2(advertisingOrder);
			}
		}catch (Exception e){
			//异常回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			e.printStackTrace();
			modelMap.addAttribute("error","上传失败");
			return "advertisingorder/advertisingOrderList3";
		}
		AdvertisingOrder advertisingOrder1 =advertisingOrderService.get(advertisingOrder.getId());
		modelMap.addAttribute("advertisingOrder",advertisingOrder1);
		modelMap.addAttribute("success","1");
		return "advertisingorder/advertisingOrderList3";
	}
	@Log("获取广告类型")
	@RequestMapping("getType3")
	@ResponseBody

	public List<AdviertisementType> getType3(){
		return advertisingOrderService.getType3();
	}




    @RequestMapping(value = "exportFile1", method = RequestMethod.GET)
    @ResponseBody
    public String exportFile1(AdvertisingOrder advertisingOrder ,HttpServletRequest request, HttpServletResponse response) {
        try {
            String fileName = "订单数据统计" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
            List<AdvertisingOrder> list = advertisingOrderService.orderDetailList2(advertisingOrder);
            new ExportExcel("订单数据统计", AdvertisingOrder.class).setDataList(list).write(response, fileName).dispose();
            return null;
        } catch (Exception e) {
            request.setAttribute("error", "导出数据失败");
        }
        return null;
    }




	@Log("获取在线商家订单列表数据")
	@RequestMapping("getOrderNum")
	@ResponseBody
	public List<AdvertisingOrder> getOrderNum(){
		Integer id=UserUtils.getUser().getBusinessId();
		List<AdvertisingOrder> advertisingOrderList = advertisingOrderService.getOrderNum(UserUtils.getUser().getBusinessId());
		return advertisingOrderList;
	}

	@Log("获取广告订单列表数据")
	@RequestMapping("getOrderNum2")
	@ResponseBody
	public List<AdvertisingOrder> getOrderNum2(){
		return advertisingOrderService.getOrderNum2(UserUtils.getUser().getBusinessId());
	}
	@RequestMapping("获取类型")
	@ResponseBody
	public Integer getType(AdvertisingOrder advertisingOrder){
		return advertisingOrderService.getType(advertisingOrder);
	}
	@Log("获取广告订单列表数据")
	@RequestMapping("getTypeData")
	@ResponseBody
	public AdvertisingOrder getTypeData(String ordernumber){
		AdvertisingOrder advertisingOrder =  advertisingOrderService.getTypeData(ordernumber);
		String string=advertisingOrder.getStand();
		String[] strings = string.split(",");
		//获取广告类型
		String name = adviertisementTypeService.getType3Name(Integer.parseInt(strings[2])).getType3Name();
		if (name!=null && name !=""){
			advertisingOrder.setStand(name);
		}
		return advertisingOrder;
	}

}
