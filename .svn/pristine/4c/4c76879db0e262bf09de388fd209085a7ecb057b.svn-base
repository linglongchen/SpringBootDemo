package com.chunqiu.mrjuly.modules.adviertisement.service;

import com.chunqiu.mrjuly.common.persistence.CrudService;
import com.chunqiu.mrjuly.common.utils.DateUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.modules.advertisingorder.model.AdvertisingOrder;
import com.chunqiu.mrjuly.modules.advertisingorder.model.DeliverySituation;
import com.chunqiu.mrjuly.modules.advertisingorder.model.HotelResource;
import com.chunqiu.mrjuly.modules.advertisingorder.model.HotelResourceCondition;
import com.chunqiu.mrjuly.modules.adviertisement.dao.AdviertisementTypeDao;
import com.chunqiu.mrjuly.modules.adviertisement.model.AdvertisementUpload;
import com.chunqiu.mrjuly.modules.adviertisement.model.AdviertisementType;
import com.chunqiu.mrjuly.modules.adviertisement.model.CheckRecord;
import com.chunqiu.mrjuly.modules.hotelinfo.dao.HotelInfoDao;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.install.model.Notification;
import com.chunqiu.mrjuly.modules.system.model.User;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * 广告管理Service
 *
 * @author chen
 * @version 2019-02-27
 */
@Service
public class AdviertisementTypeService extends CrudService<AdviertisementTypeDao, AdviertisementType, Integer> {
    @Resource
    private AdviertisementTypeDao dao;
    @Resource
    private HotelInfoDao hotelInfoDao;

    /**
     * 二级菜单列表
     *
     * @param adviertisementType
     * @param param
     * @return
     */
    public Grid getType2(AdviertisementType adviertisementType, GridParam param) {
        Grid grid = new Grid();
        grid.setRows(dao.getType2(adviertisementType));
        return grid;
    }

    /**
     * 被禁二级菜单列表
     *
     * @param adviertisementType
     * @param param
     * @return
     */
    public Grid getBanType2(AdviertisementType adviertisementType, GridParam param) {
        Grid grid = new Grid();
        grid.setRows(dao.getBanType2(adviertisementType));
        return grid;
    }

    /**
     * 三级菜单列表
     *
     * @param adviertisementType
     * @param param
     * @return
     */
    public Grid getType3(AdviertisementType adviertisementType, GridParam param) {
        Grid grid = new Grid();
        grid.setRows(dao.getType3(adviertisementType));
        return grid;
    }

    /**
     * 被禁三级菜单列表
     *
     * @param
     * @param param
     * @return
     */
    public Grid getBanType3(List<Integer> integerList, GridParam param) {
        Grid grid = new Grid();
        grid.setRows(dao.getBanType3(integerList));
        return grid;
    }

    /**
     * 删除二级菜单
     *
     * @param adviertisementType
     */
    public void delType2(AdviertisementType adviertisementType) {
        dao.delType2(adviertisementType);
    }

    /**
     * 删除三级菜单
     *
     * @param adviertisementType
     */
    public void delType3(AdviertisementType adviertisementType) {
        dao.delType3(adviertisementType);
    }

    /**
     * 新增二级菜单
     *
     * @param adviertisementType
     */
    public void addType2(AdviertisementType adviertisementType) {
        dao.addType2(adviertisementType);
    }

    /**
     * 新增三级菜单
     *
     * @param adviertisementType
     */
    public void addType3(AdviertisementType adviertisementType) {
        dao.addType3(adviertisementType);
    }

    /**
     * 空闲广告位发布
     *
     * @param advertisementUpload
     * @param param
     * @return
     */
    public Grid freeList(AdvertisementUpload advertisementUpload, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        grid.setRows(dao.freeList(advertisementUpload));
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 保存广告文件
     *
     * @param advertisementUpload
     */

    public void uploadTest(AdvertisementUpload advertisementUpload) {
        dao.uploadTest(advertisementUpload);
    }

    /**
     * 保存全部
     * @param advertisementUpload
     */
    public void uploadAll(List<AdvertisementUpload> advertisementUpload) {
        dao.uploadAll(advertisementUpload);
    }

    /**
     * 广告冻结列表
     *
     * @param advertisementUpload
     * @param param
     * @return
     */
    public Grid freezeList(AdvertisementUpload advertisementUpload, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        grid.setRows(dao.freezeList(advertisementUpload));
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 冻结操作
     *
     * @param advertisementUpload
     */
    public void freezeStatus(AdvertisementUpload advertisementUpload) {
        dao.freezeStatus(advertisementUpload);
    }


    public List<Integer> getType1Id(Integer id) {
        return dao.getType1Id(id);
    }


    /**
     * 禁播广告列表数据
     *
     * @param
     * @param param
     * @return
     */
    public Grid BanList(AdviertisementType adviertisementType, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        grid.setRows(dao.BanList(adviertisementType));
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 禁播广告列表数据
     *
     * @param
     * @param param
     * @return
     */
    public Grid BanList2(AdviertisementType adviertisementType, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        grid.setRows(dao.BanList2(adviertisementType));
        grid.setTotal(page.getTotal());
        return grid;
    }


    /**
     * 多选禁播
     */
    public void banAll(List<AdviertisementType> adviertisementTypeList) {
        dao.banAll(adviertisementTypeList);
    }

    /**
     * 多选禁播
     */
    public void RelieveBanAll(List<AdviertisementType> adviertisementTypeList) {
        dao.RelieveBanAll(adviertisementTypeList);
    }

    public void RelieveBanList3(List<Integer> integerList) {
        dao.RelieveBanList3(integerList);
    }

    /**
     * 获取广告位信息
     * @param id
     * @return
     */
    public AdvertisingOrder getUpload(Integer id) {
        return dao.getUpload(id);
    }

    /**
     * 内容审核列表数据
     */
    public Grid checkList(AdvertisementUpload advertisementUpload, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        grid.setRows(dao.checkList(advertisementUpload));
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 广告位数据
     * @param advertisementUpload
     * @param param
     * @return
     */
    public Grid checkList2(AdvertisementUpload advertisementUpload, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        dao.checkList2(advertisementUpload);
        grid.setRows(page.getResult());
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 更新通过广告审核
     *
     * @param advertisementUpload
     */
    public void updateUpload(AdvertisementUpload advertisementUpload) {
        dao.updateUpload(advertisementUpload);
    }

    /**
     * 插入审核记录
     * @param checkRecord
     */
    public void insertRecord(CheckRecord checkRecord) {
        dao.insertRecord(checkRecord);
    }

    /**
     * 内容审核记录列表数据
     * @param checkRecord
     * @param param
     * @return
     */
    public Grid checkRecord(CheckRecord checkRecord, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        grid.setRows(dao.checkRecord(checkRecord));
        grid.setTotal(page.getTotal());
        return grid;
    }


    /**
     * 广告首页
     *
     * @param advertisingOrder
     * @param
     * @return
     */
    public List<AdvertisingOrder> Page(AdvertisingOrder advertisingOrder) {
        return dao.Page(advertisingOrder);
    }

    public String getEndTime(AdvertisingOrder advertisingOrder) {
        return dao.getEndTime(advertisingOrder);
    }

    /**
     *查看用户组和用户编号
     * @param user
     * @return
     */
    public User selUser(User user) {
        return dao.selUser(user);
    }

    /**
     * 获取类型2的名称
     * @param id
     * @return
     */
    public AdviertisementType getType2Name(Integer id) {
        return dao.getType2Name(id);
    }

    /**
     * 匹配内容
     * @param id
     * @return
     */
    public AdviertisementType getType3Name(Integer id) {
        return dao.getType3Name(id);
    }

    public List<Integer> getIdList(Integer hotelCodeId) {
        return dao.getIdList(hotelCodeId);
    }

    public void updateStatus(Integer id) {
        dao.updateStatus(id);
    }
    /**
     * 同时删除二级管理
     * @param
     */
    public void deleteType2(Integer typeId) {
        dao.deleteType2(typeId);
    }

    /**
     * 同时删除三级管理
     * @param type2Id
     */
    public void deleteType3(Integer type2Id) {
        dao.deleteType3(type2Id);
    }

    /**
     * 根据一级获取二级的id
     * @param id
     * @return
     */
    public List<Integer> getType2Id(Integer id) {
        return dao.getType2Id(id);
    }

    /**
     * 获取父级下的自己列表
     * @param typeId
     * @return
     */
    public List<Integer> getListType2(Integer typeId) {
        return dao.getListType2(typeId);
    }

    /**
     * 获取二级菜单下的所有三级
     * @param type2Id
     * @return
     */
    public List<Integer> getListType3(Integer type2Id) {
        return dao.getListType3(type2Id);
    }

    /**
     * 查找所有广告
     * @param advertisingOrder
     * @return
     */
    public List<AdvertisingOrder>advertisingOrderByDate(AdvertisingOrder advertisingOrder){
        return dao.advertisingOrderByDate(advertisingOrder);
    }

    public int updateReadById(Notification notice){
        return dao.updateReadById(notice);
    }


    /**
     * 查看禁播列表中是否又被禁播的该二级的一级
     * @param id
     * @param hotelCodeId
     * @return
     */
    public String getBanType1(Integer id,Integer hotelCodeId){
        return  dao.getBanType1(id,hotelCodeId);
    }


    /**
     * 查看禁播列表中是否又被禁播的该三级的二级
     * @param id
     * @param hotelCodeId
     * @return
     */
    public String ReliseBanType2(Integer id,Integer hotelCodeId){
        return  dao.ReliseBanType2(id,hotelCodeId);
    }

    /**
     * 获取投放日期
     * @param advertisingOrder
     * @param param
     * @return
     */
    public Grid getPutInTime(AdvertisingOrder advertisingOrder,GridParam param) {
        Grid grid = new Grid();
        List<AdvertisingOrder> advertisingOrderList = new ArrayList<>();
        for (int j = 6; j < 30; j++) {
            Date date = new Date();
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(date); //需要将date数据转移到Calender对象中操作
            calendar.add(calendar.DATE, j);//把日期往后增加n天.正数往后推,负数往前移动
            date = calendar.getTime();   //这个时间就是日期往后推一天的结果
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String string = simpleDateFormat.format(date);
            AdvertisingOrder advertisingOrder1 = new AdvertisingOrder();
            advertisingOrder1.setPutInTime(string);
            if (advertisingOrder.getHotelCodeId() == null){
                advertisingOrder.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
            }else {
                advertisingOrder.setHotelCodeId(advertisingOrder.getHotelCodeId());
            }
           List<String> advertisingOrderList1 = dao.getOrderTime(advertisingOrder);
            if (advertisingOrderList1.contains(advertisingOrder1.getPutInTime())){
                advertisingOrder1.setState(0);
            }else {
                advertisingOrder1.setState(1);
            }
            advertisingOrderList.add(advertisingOrder1);
        }
        param.setLimit(10);
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        page.setTotal(20);
        grid.setRows(advertisingOrderList);
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 查询所有投放数据
     * @param advertisingOrder
     * @return
     */
    public DeliverySituation deliverySituationAdvertisementInfo(AdvertisingOrder advertisingOrder){
        return dao.deliverySituationAdvertisementInfo(advertisingOrder);
    }

    /**
     * 广告主列表
     * @param advertisingOrder
     * @return
     */
    public  List<DeliverySituation> masterInfoList(AdvertisingOrder advertisingOrder){
        return dao.masterInfoList(advertisingOrder);
    }

    /**
     * 投放情况
     * @param advertisingOrder
     * @return
     */
    public  DeliverySituation shopPutInInfo(AdvertisingOrder advertisingOrder){
        return dao.shopPutInInfo(advertisingOrder);
    }

    /**
     * 订单列表
     * @param advertisingOrder
     * @return
     */
    public List<AdvertisingOrder> shopOrderList(AdvertisingOrder advertisingOrder){
        return dao.shopOrderList(advertisingOrder);
    }

    /**
     * 今日到期滚动
     * @param advertisingOrder
     * @return
     */
    public Integer timeExpire(AdvertisingOrder advertisingOrder){
        return dao.timeExpire(advertisingOrder);
    }
    
    /**
     * 查询酒店资源列表
     * @param condition 条件
     * @return
     * @author wy
     */
    public Grid selectHotelResourceList(HotelResourceCondition condition,GridParam param){
    	condition.setStartDate(DateUtils.getMonthFirstDay(-1));
    	condition.setEndDate(DateUtils.getMonthLastDay(-1));
    	Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        List<HotelResource> results = dao.selectHotelResourceList(condition);
        int days = DateUtils.getDaysOfMonthDiff(-1);//获取上月总天数
        for (HotelResource hotelResource : results) {
			hotelResource.setDays(days);
			hotelResource.setAdvertisingStandard(splitAdvertisingStandard(hotelResource.getAdvertisingStandard()));
		}
        grid.setRows(results);
        grid.setTotal(page.getTotal());
        return grid;
    }
    
    public String splitAdvertisingStandard(String standard) {
    	StringBuilder result = new StringBuilder("");
    	String query = null;
    	if (StringUtils.isBlank(standard)) {
    		return null;
		} else {
			String[] ids = standard.split(",");
			if (ids != null && ids.length > 0) {
				if (StringUtils.isNotBlank(ids[0])) {
					query = dao.getAdviertisementTypeName(ids[0]);
					if (StringUtils.isNotBlank(query)) {
						result.append(query).append("-");
					}
				}
				if (ids.length > 1 && StringUtils.isNotBlank(ids[1])) {
					query = dao.getAdviertisementType2Name(ids[1]);
					if (StringUtils.isNotBlank(query)) {
						result.append(query).append("-");
					}
				}
				if (ids.length > 2 && StringUtils.isNotBlank(ids[2])) {
					query = dao.getAdviertisementType3Name(ids[2]);
					if (StringUtils.isNotBlank(query)) {
						result.append(query).append("-");
					}
				}
			}
			if (StringUtils.isNotBlank(result.toString())) {
				result.deleteCharAt(result.length() - 1);
				return result.toString();
			}
			return null;
		}
    }


    /**
     * 查询归属该酒店的广告位
     * @param hotelInfo
     * @return
     */
    public List<HotelInfo> uploadCountSumById(HotelInfo hotelInfo){
        return dao.uploadCountSumById(hotelInfo);
    }
}
