package com.chunqiu.mrjuly.modules.adviertisement.controller;

import com.chunqiu.mrjuly.common.enums.RedisKeyCode;
import com.chunqiu.mrjuly.common.utils.CacheRedisUtil;
import com.chunqiu.mrjuly.common.utils.DateUtils;
import com.chunqiu.mrjuly.common.utils.PathUtil;
import com.chunqiu.mrjuly.common.vo.FileVo;
import com.chunqiu.mrjuly.common.vo.Json;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.File;
import java.io.IOException;
import java.util.*;

@Controller
@RequestMapping("${adminPath}/api/upload")
public class uploadFile {

	@Autowired
	private CacheRedisUtil redisUtil;

    @RequestMapping(value = "/springUpload",method = RequestMethod.POST)
    @ResponseBody
    public Json springUpload(HttpServletRequest request) throws Exception {
        int type = 0;
        Json json = new Json();
        json.setSuccess(false);
        String source = "/uploadfile/";
        String date = DateUtils.getDate("yyyyMMdd");
        String path = PathUtil.initDirUpload(source, date);

        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
                request.getSession().getServletContext());
        String result = null;
        if (multipartResolver.isMultipart(request)) {
            MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;

            List<FileVo> fileList = new ArrayList<FileVo>();//用于存储保存的文件对象，当多图上传时，先检测所有图片后，再保存图片文件

            Iterator<String> iter = multiRequest.getFileNames();
            while (iter.hasNext()) {
                // 鐢盋ommonsMultipartFile缁ф壙鑰屾潵,鎷ユ湁涓婇潰鐨勬柟娉�
                MultipartFile file = multiRequest.getFile(iter.next());
                if (file != null) {
                    if (file.getSize() > 1024 * 1024 * 50) {
                        json.setMsg("文件大小不得超过50Mb");
                        return json;
                    } else {
                        String oldFileName = file.getOriginalFilename();
                        String extenstion = oldFileName.substring(oldFileName.lastIndexOf(".")).toLowerCase();//获取后缀名
                        if (extenstion.equals(".jpg") || extenstion.equals(".jpeg") || extenstion.equals(".bmp") || extenstion.equals(".png")){
                            //上传文件是图片
                            type = 1;
                        }else if (extenstion.equals(".rm")||extenstion.equals(".rmvb")||extenstion.equals(".mov")||extenstion.equals(".mtv")||extenstion.equals(".avi")||extenstion.equals(".3gp")||extenstion.equals(".amv")||extenstion.equals(".dmv")||extenstion.equals(".flv")||extenstion.equals(".mp4")){
                            //上传文件是视频
                            type = 2;
                        }
                            json.setType(type);
                        if (!extenstion.equals(".jpg") && !extenstion.equals(".jpeg") && !extenstion.equals(".bmp") && !extenstion.equals(".png")&&!extenstion.equals(".rm")&&!extenstion.equals(".rmvb")&&!extenstion.equals(".mov")&&!extenstion.equals(".mtv")&&!extenstion.equals(".avi")&&!extenstion.equals(".3gp")&&!extenstion.equals(".amv")&&!extenstion.equals(".dmv")&&!extenstion.equals(".flv")&&!extenstion.equals(".mp4")) {
                            json.setMsg("文件格式不正确");
                            return json;
                        } else {
                            String newFileName = UUID.randomUUID().toString();
                            String newFilePath = path + "/" + newFileName + extenstion;
                            File localFile = new File(newFilePath);
                            FileVo vo = new FileVo();
                            vo.setFile(file);
                            vo.setLocalFile(localFile);
                            vo.setFileName(source + "/" + date + "/" + newFileName + extenstion);
                            fileList.add(vo);
                        }
                    }
                }
            }

            if(CollectionUtils.isNotEmpty(fileList)){
                List<String> src = new ArrayList<String>();
                for (FileVo vo : fileList){
                    try {
                        vo.getFile().transferTo(vo.getLocalFile());

                        src.add(vo.getFileName());
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                }

                json.setData(src);
                json.setSuccess(true);
                return json;
            }
        }
        json.setMsg("请上传图片");
        return json;
    }



    @RequestMapping(value = "/springUploadAll",method = RequestMethod.POST)
    @ResponseBody
    public Json springUploadAll(HttpServletRequest request) throws Exception {
        int type = 0;
        Json json = new Json();
        json.setSuccess(false);
        String source = "/uploadfile/";
        String date = DateUtils.getDate("yyyyMMdd");
        String path = PathUtil.initDirUpload(source, date);
        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
                request.getSession().getServletContext());
        String result = null;
        if (multipartResolver.isMultipart(request)) {
            MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;

            List<FileVo> fileList = new ArrayList<FileVo>();//用于存储保存的文件对象，当多图上传时，先检测所有图片后，再保存图片文件

            Iterator<String> iter = multiRequest.getFileNames();
            while (iter.hasNext()) {
                // 鐢盋ommonsMultipartFile缁ф壙鑰屾潵,鎷ユ湁涓婇潰鐨勬柟娉�
                MultipartFile file = multiRequest.getFile(iter.next());
                if (file != null) {
                        String oldFileName = file.getOriginalFilename();
                        String extenstion = oldFileName.substring(oldFileName.lastIndexOf(".")).toLowerCase();//获取后缀名
                        if (extenstion.equals(".jpg") || extenstion.equals(".jpeg") || extenstion.equals(".bmp") || extenstion.equals(".png")){
                            //上传文件是图片
                            type = 1;
                            Integer size = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_P_SIZE, Integer.class);
                    		size = size == null ? 10 : size;
                            if (file.getSize() > 1024 * 1024 * size) {
                                json.setMsg("图片大小不得超过" + size + "Mb");
                                return json;
                            }
                        }else if (extenstion.equals(".rm")||extenstion.equals(".rmvb")||extenstion.equals(".mov")||extenstion.equals(".mtv")||extenstion.equals(".avi")||extenstion.equals(".3gp")||extenstion.equals(".amv")||extenstion.equals(".dmv")||extenstion.equals(".flv")||extenstion.equals(".mp4")){
                            //上传文件是视频
                            type = 2;
                            Integer size = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_V_SIZE, Integer.class);
                    		size = size == null ? 10 : size;
                            if (file.getSize() > 1024 * 1024 * size) {
                                json.setMsg("视频大小不得超过" + size + "Mb");
                                return json;
                            }
                        }
                        json.setType(type);
                        if (!extenstion.equals(".jpg") && !extenstion.equals(".jpeg") && !extenstion.equals(".bmp") && !extenstion.equals(".png")&&!extenstion.equals(".rm")&&!extenstion.equals(".rmvb")&&!extenstion.equals(".mov")&&!extenstion.equals(".mtv")&&!extenstion.equals(".avi")&&!extenstion.equals(".3gp")&&!extenstion.equals(".amv")&&!extenstion.equals(".dmv")&&!extenstion.equals(".flv")&&!extenstion.equals(".mp4")) {
                            json.setMsg("文件格式不正确");
                            return json;
                        }
                            String newFileName = UUID.randomUUID().toString();
                            String newFilePath = path + "/" + newFileName + extenstion;
                            File localFile = new File(newFilePath);
                            FileVo vo = new FileVo();
                            vo.setFile(file);
                            vo.setLocalFile(localFile);
                            vo.setFileName(source + "/" + date + "/" + newFileName + extenstion);
                            fileList.add(vo);
                }
            }

            if(CollectionUtils.isNotEmpty(fileList)){
                List<String> src = new ArrayList<String>();
                for (FileVo vo : fileList){
                    try {
                        vo.getFile().transferTo(vo.getLocalFile());

                        src.add(vo.getFileName());
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                }

                json.setData(src);
                json.setSuccess(true);
                return json;
            }
        }
        json.setMsg("请上传文件");
        return json;
    }



    @RequestMapping(value = "/springVideoUpload",method = RequestMethod.POST)
    @ResponseBody
    public Json springVideoUpload(HttpServletRequest request) throws Exception {
        Json json = new Json();
        json.setSuccess(false);
        String source = "/uploadfile/";
        String date = DateUtils.getDate("yyyyMMdd");
        String path = PathUtil.initDirUpload(source, date);

        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
                request.getSession().getServletContext());
        String result = null;
        if (multipartResolver.isMultipart(request)) {
            MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;

            List<FileVo> fileList = new ArrayList<FileVo>();//用于存储保存的文件对象，当多图上传时，先检测所有图片后，再保存图片文件

            Iterator<String> iter = multiRequest.getFileNames();
            while (iter.hasNext()) {
                // 鐢盋ommonsMultipartFile缁ф壙鑰屾潵,鎷ユ湁涓婇潰鐨勬柟娉�
                MultipartFile file = multiRequest.getFile(iter.next());
                if (file != null) {
                        String oldFileName = file.getOriginalFilename();
                        String extenstion = oldFileName.substring(oldFileName.lastIndexOf(".")).toLowerCase();//获取后缀名
                        if (!extenstion.equals(".rm")&&!extenstion.equals(".rmvb")&&!extenstion.equals(".mov")&&!extenstion.equals(".mtv")&&!extenstion.equals(".avi")&&!extenstion.equals(".3gp")&&!extenstion.equals(".amv")&&!extenstion.equals(".dmv")&&!extenstion.equals(".flv")&&!extenstion.equals(".mp4")) {
                            json.setMsg("视频格式不正确");
                            return json;
                        } else {
                            String newFileName = UUID.randomUUID().toString();
                            String newFilePath = path + "/" + newFileName + extenstion;
                            File localFile = new File(newFilePath);
                            FileVo vo = new FileVo();
                            vo.setFile(file);
                            vo.setLocalFile(localFile);
                            vo.setFileName(source + "/" + date + "/" + newFileName + extenstion);
                            fileList.add(vo);
                        }

                }
            }

            if(CollectionUtils.isNotEmpty(fileList)){
                List<String> src = new ArrayList<String>();
                for (FileVo vo : fileList){
                    try {
                        vo.getFile().transferTo(vo.getLocalFile());

                        src.add(vo.getFileName());
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                }

                json.setData(src);
                json.setSuccess(true);
                return json;
            }
        }
        json.setMsg("请上传视频");
        return json;
    }



    /**
     * 上传图片
     * @param request
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/springUpload2",method = RequestMethod.POST)
    @ResponseBody
    public Json springUpload2(HttpServletRequest request) throws Exception {
        int type = 0;
        Json json = new Json();
        json.setSuccess(false);
        String source = "/uploadfile/";
        String date = DateUtils.getDate("yyyyMMdd");
        String path = PathUtil.initDirUpload(source, date);
        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
                request.getSession().getServletContext());
        String result = null;
        if (multipartResolver.isMultipart(request)) {
            MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
            List<FileVo> fileList = new ArrayList<FileVo>();//用于存储保存的文件对象，当多图上传时，先检测所有图片后，再保存图片文件
            Iterator<String> iter = multiRequest.getFileNames();
            while (iter.hasNext()) {
                MultipartFile file = multiRequest.getFile(iter.next());
                if (file != null) {
                	Integer size = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_P_SIZE, Integer.class);
            		size = size == null ? 10 : size;
                    if (file.getSize() > 1024 * 1024 * size) {
                        json.setMsg("图片大小不得超过" + size + "Mb");
                        return json;
                    } else {
                        String oldFileName = file.getOriginalFilename();
                        String extenstion = oldFileName.substring(oldFileName.lastIndexOf(".")).toLowerCase();//获取后缀名
                        type = 1;
                        json.setType(type);
                        if (!extenstion.equals(".jpg") && !extenstion.equals(".jpeg") && !extenstion.equals(".bmp") && !extenstion.equals(".png")) {
                            json.setMsg("文件格式不正确,请上传图片");
                            return json;
                        }
                            String newFileName = UUID.randomUUID().toString();
                            String newFilePath = path + "/" + newFileName + extenstion;
                            File localFile = new File(newFilePath);
                            FileVo vo = new FileVo();
                            vo.setFile(file);
                            vo.setLocalFile(localFile);
                            vo.setFileName(source + "/" + date + "/" + newFileName + extenstion);
                            fileList.add(vo);
                    }
                }
            }
            if(CollectionUtils.isNotEmpty(fileList)){
                List<String> src = new ArrayList<String>();
                for (FileVo vo : fileList){
                    try {
                        vo.getFile().transferTo(vo.getLocalFile());

                        src.add(vo.getFileName());
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                }

                json.setData(src);
                json.setSuccess(true);
                return json;
            }
        }
        json.setMsg("请上传图片");
        return json;
    }




    @RequestMapping(value = "/springUpload3",method = RequestMethod.POST)
    @ResponseBody
    public Json springUpload3(HttpServletRequest request) throws Exception {
        int type = 0;
        Json json = new Json();
        json.setSuccess(false);
        String source = "/uploadfile/";
        String date = DateUtils.getDate("yyyyMMdd");
        String path = PathUtil.initDirUpload(source, date);

        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
                request.getSession().getServletContext());
        String result = null;
        if (multipartResolver.isMultipart(request)) {
            MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;

            List<FileVo> fileList = new ArrayList<FileVo>();//用于存储保存的文件对象，当多图上传时，先检测所有图片后，再保存图片文件

            Iterator<String> iter = multiRequest.getFileNames();
            while (iter.hasNext()) {
                // 鐢盋ommonsMultipartFile缁ф壙鑰屾潵,鎷ユ湁涓婇潰鐨勬柟娉�
                MultipartFile file = multiRequest.getFile(iter.next());
                if (file != null) {
                	Integer size = redisUtil.getByClass(RedisKeyCode.UPLOAD_ADVERTISEMENT_V_SIZE, Integer.class);
             		size = size == null ? 10 : size;
                    if (file.getSize() > 1024 * 1024 * size) {
                        json.setMsg("视频大小不得超过" + size + "Mb");
                        return json;
                    } else {
                        String oldFileName = file.getOriginalFilename();
                        String extenstion = oldFileName.substring(oldFileName.lastIndexOf(".")).toLowerCase();//获取后缀名
                        type = 2;
                        json.setType(type);
                        if (!extenstion.equals(".rm")&&!extenstion.equals(".rmvb")&&!extenstion.equals(".mov")&&!extenstion.equals(".mtv")&&!extenstion.equals(".avi")&&!extenstion.equals(".3gp")&&!extenstion.equals(".amv")&&!extenstion.equals(".dmv")&&!extenstion.equals(".flv")&&!extenstion.equals(".mp4")) {
                            json.setMsg("文件格式不正确,请上传视频");
                            return json;
                        }
                            String newFileName = UUID.randomUUID().toString();
                            String newFilePath = path + "/" + newFileName + extenstion;
                            File localFile = new File(newFilePath);
                            FileVo vo = new FileVo();
                            vo.setFile(file);
                            vo.setLocalFile(localFile);
                            vo.setFileName(source + "/" + date + "/" + newFileName + extenstion);
                            fileList.add(vo);
                        }
                    }
                }
            if(CollectionUtils.isNotEmpty(fileList)){
                List<String> src = new ArrayList<String>();
                for (FileVo vo : fileList){
                    try {
                        vo.getFile().transferTo(vo.getLocalFile());

                        src.add(vo.getFileName());
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                }

                json.setData(src);
                json.setSuccess(true);
                return json;
            }
        }
        json.setMsg("请上传视频");
        return json;
    }



    @RequestMapping(value = "/ueditor")
    @ResponseBody
    public String ueditor(HttpServletRequest request, HttpServletResponse response) {

        String s = "{\n"+
                "            \"imageActionName\": \"uploadimage\",\n" +
                "                \"imageFieldName\": \"file\", \n" +
                "                \"imageMaxSize\": 2048000, \n" +
                "                \"imageAllowFiles\": [\".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\"], \n" +
                "                \"imageCompressEnable\": true, \n" +
                "                \"imageCompressBorder\": 1600, \n" +
                "                \"imageInsertAlign\": \"none\", \n" +
                "                \"imageUrlPrefix\": \"\",\n" +
                "                \"imagePathFormat\": \"/ueditor/jsp/upload/image/{yyyy}{mm}{dd}/{time}{rand:6}\" }";
        return s;

    }


    @RequestMapping(value = "/imgUpdate")
    @ResponseBody
    public String imgUpdate(MultipartFile file) {
        if (file.isEmpty()) {
            return "error";
        }
        // 获取文件名
        String fileName = file.getOriginalFilename();
        // 获取文件的后缀名
        String suffixName = fileName.substring(fileName.lastIndexOf("."));
        // 这里我使用随机字符串来重新命名图片
        fileName = Calendar.getInstance().getTimeInMillis() +  suffixName;
        // 这里的路径为Nginx的代理路径，这里是/data/images/xxx.png
        File dest = new File("/data/uploadfiles/" + fileName);
        // 检测是否存在目录
        if (!dest.getParentFile().exists()) {
            dest.getParentFile().mkdirs();
        }
        try {
            file.transferTo(dest);
            //url的值为图片的实际访问地址 这里我用了Nginx代理，访问的路径是http://localhost/xxx.png
            String config = "{\"state\": \"SUCCESS\"," +
                    "\"url\": \"" + "http://47.103.74.207:8008/uploadfiles/" + fileName + "\"," +
                    "\"title\": \"" + fileName + "\"," +
                    "\"original\": \"" + fileName + "\"}";
            return config;
        } catch (IllegalStateException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "error";
    }
}
