package com.chunqiu.mrjuly.modules.hotelinfo.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.OssUtils.OSSClientConstants;
import com.chunqiu.mrjuly.common.utils.OssUtils.OSSClientUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.hotelinfo.model.DepartmentInfoList;
import com.chunqiu.mrjuly.modules.hotelinfo.service.DepartmentInfoService;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.List;

/**
 * 部门列表Controller
 * @author 周天
 * @version 2019-03-06
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/hotelinfo/departmentInfo")
@Transactional
public class DepartmentInfoController extends BaseController {

	@Autowired
	private DepartmentInfoService departmentInfoService;

	/**
	 * @Description：部门列表列表页面
	 * @author 周天
	 */
	@Log("打开部门列表列表页面")
	@RequestMapping("index")
	@RequiresPermissions("hotelinfo:departmentInfo:view")
	public String index(){
		return "hotelinfo/departmentInfoList";
	}

	/**
	 * @Description：部门列表列表数据
	 * @author 周天
	 */
	@Log("获取部门列表列表数据")
	@RequestMapping("list")
	@ResponseBody
	@RequiresPermissions("hotelinfo:departmentInfo:view")
	public Grid list(DepartmentInfoList departmentInfo, GridParam param) {
		departmentInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		departmentInfo.setId(UserUtils.getUser().getDepartmentId());
		return departmentInfoService.findPage(departmentInfo, param);
	}
	/**
	 * @Description：部门列表表单页面--新增/编辑
	 * @author 周天
	 */
	@Log("打开部门列表表单页面--新增/编辑")
	@RequestMapping(value = "form")
	@RequiresPermissions("hotelinfo:departmentInfo:view")
	public String form(DepartmentInfoList departmentInfo, ModelMap model) {
			departmentInfo = departmentInfoService.get(departmentInfo.getId());
			if (departmentInfo!=null){
				List<DepartmentInfoList> departmentInfoListList = new ArrayList<>();
				if (departmentInfo.getServerNumberId()!= null && !"".equals(departmentInfo.getServerNumberId()) ){
					String[] idstr = departmentInfo.getServerNumberId().split(",");
					for (int i = 0;i<idstr.length;i++){
						DepartmentInfoList departmentInfoList = new DepartmentInfoList();
						departmentInfoList.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
						departmentInfoList.setId(Integer.valueOf(idstr[i]));
						departmentInfoListList.add(departmentInfoList);
					}
				}

				try {
					List<Integer> integerList = new ArrayList<>();
					List<DepartmentInfoList> departmentInfoListList1 = departmentInfoService.departmentInfoListById(departmentInfoListList);
					for (DepartmentInfoList departmentInfoList : departmentInfoListList){
						integerList.add(departmentInfoList.getId());
					}
					model.addAttribute("departmentInfoList",departmentInfoListList1);
					model.addAttribute("integerList",integerList);
				}catch (Exception e){
					e.printStackTrace();
				}
				Integer type = getType(departmentInfo.getDepartmentalPositionPic());
				departmentInfo.setType(type);
			}

			model.addAttribute("departmentInfo", departmentInfo);
		//查询服务方式
		DepartmentInfoList departmentInfoList  = new DepartmentInfoList();
		departmentInfoList.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		List<DepartmentInfoList> departmentInfoListList = departmentInfoService.serviceModeList(departmentInfoList);
		model.addAttribute("serviceMode", departmentInfoListList);
		return "hotelinfo/departmentInfoForm";
	}
	/**
	 * @Description：部门列表新增/编辑 保存方法
	 * @author 周天
	 */
	@Log("新增/编辑部门列表")
	@RequestMapping("saveDepartmentInfo")
	@RequiresPermissions("hotelinfo:departmentInfo:edit")
	public String saveDepartmentInfo(DepartmentInfoList departmentInfo, ModelMap model){
		try{
			departmentInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());

			//图片
			if (!"".equals(departmentInfo.getPosition())){
				if (departmentInfo.getType() == 1){
					String position = OSSClientUtils.ossUploadPictures(departmentInfo.getPosition());
					departmentInfo.setDepartmentalPositionPic(position);
					//视频
				}else {
					boolean status = departmentInfo.getPosition().contains(":/");
					if(status){
						String position = (departmentInfo.getPosition().split(":/"))[1];
						departmentInfo.setDepartmentalPositionPic(OSSClientConstants.URL+position);
					}else {
						departmentInfo.setDepartmentalPositionPic(OSSClientConstants.URL+departmentInfo.getPosition());
					}
				}
			}

			//头像
			if (!"".equals(departmentInfo.getDepartmentHead())){
				String headImg = OSSClientUtils.ossUploadPictures(departmentInfo.getDepartmentHead());
				departmentInfo.setDepartmentHead(headImg);
			}

			departmentInfoService.save(departmentInfo);

		}catch(Exception e){
			log.error("保存失败！ msg={}", e.getMessage(), e);
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			model.addAttribute("error", "保存失败！");
			return form(departmentInfo, model);
		}
		return successPath;
	}



	public Integer getType(String extenstion){
		String [] str = extenstion.split("\\.");
		extenstion = str[1];
		if (extenstion.equals("jpg") || extenstion.equals("jpeg") || extenstion.equals("bmp") || extenstion.equals("png")){
			//上传文件是图片
			return 1;
		}else if (extenstion.equals("rm")||extenstion.equals("rmvb")||extenstion.equals("mov")||extenstion.equals("mtv")||extenstion.equals("avi")||extenstion.equals("3gp")||extenstion.equals("amv")||extenstion.equals("dmv")||extenstion.equals("flv")||extenstion.equals("mp4")){
			//上传文件是视频
			return  2;
		}
		return 1;
	}

	/**
	 * @Description：部门列表数据删除方法
	 * @author 周天
	 */
	@Log("删除部门列表")
	@RequestMapping("delDepartmentInfo")
	@ResponseBody
	@RequiresPermissions("hotelinfo:departmentInfo:edit")
	public Json delDepartmentInfo(DepartmentInfoList departmentInfo){
		Json json = new Json();
		try{
			departmentInfoService.delete(departmentInfo);
			departmentInfo = departmentInfoService.get(departmentInfo.getId());
			if (departmentInfo.getServerNumberId()!=null){
				List<DepartmentInfoList> departmentInfoListList = new ArrayList<>();
				String[] idstr = departmentInfo.getServerNumberId().split(",");
				for (int i = 0;i<idstr.length;i++){
					DepartmentInfoList departmentInfoList = new DepartmentInfoList();
					departmentInfoList.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
					departmentInfoList.setId(Integer.valueOf(idstr[i]));
					departmentInfoListList.add(departmentInfoList);
				}
			departmentInfoService.updateStatusByListIdNot(departmentInfoListList);
			}
			json.setSuccess(true);
		}catch(Exception e){
			log.error("删除失败！ msg={}", e.getMessage(), e);
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			json.setSuccess(false);
			json.setMsg("删除失败！");
		}
		return json;
	}

	@Log("激活休眠部门")
	@RequestMapping("activatedDormancy")
	@ResponseBody
	@RequiresPermissions("hotelinfo:departmentInfo:edit")
	public Json activatedDormancy(DepartmentInfoList departmentInfo){
		Json json = new Json();
		try{
			departmentInfoService.updateStatusById(departmentInfo);
			json.setSuccess(true);
		}catch(Exception e){
			e.printStackTrace();
		}
		return json;
	}

	@Log("查询服务端编号")
	@RequestMapping("serverNumerList")
	@ResponseBody
	@RequiresPermissions("hotelinfo:departmentInfo:view")
	public Grid serverNumerList(DepartmentInfoList departmentInfo, GridParam param){
		departmentInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		return  departmentInfoService.serverNumberById(departmentInfo,param);
	}

}
