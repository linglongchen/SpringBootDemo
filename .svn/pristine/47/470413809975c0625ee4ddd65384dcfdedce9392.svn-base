package com.chunqiu.mrjuly.modules.shopinfo.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.DateUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.service.HotelInfoService;
import com.chunqiu.mrjuly.modules.install.model.CustomerOrder;
import com.chunqiu.mrjuly.modules.install.model.ShopType;
import com.chunqiu.mrjuly.modules.install.service.CustomerOrderService;
import com.chunqiu.mrjuly.modules.install.service.ShopTypeService;
import com.chunqiu.mrjuly.modules.shopinfo.model.ShopInfo;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * 我的-订单数据统计
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/shopinfo/MerchantsHomepage")
public class MerchantsHomeageController extends BaseController{

    @Autowired
    private CustomerOrderService customerOrderService;

    @Autowired
    private ShopTypeService shopTypeService;

    @Autowired
    private HotelInfoService hotelInfoService;

    /**
     * 我的-订单数据统计列表页面
     * @return
     */
    @Log("登录我的-订单数据统计页面")
    @RequestMapping("index")
    //@RequiresPermissions("shopinfo:MerchantsHomepage:view")
    public String index(CustomerOrder customerOrder,ModelMap modelMap){
        customerOrder.setObjectId(UserUtils.getUser().getBusinessId());
        customerOrder = customerOrderService.customerOrderInfo(customerOrder);

        modelMap.addAttribute("customerOrder",customerOrder);
        return "shopinfo/MerchantsHomepage";
    }

    /**
     * 我的-订单数据统计列表数据
     * @param customerOrder
     * @param param
     * @return
     */
    @Log("查询我的-订单数据统计列表")
    @ResponseBody
    @RequestMapping("list")
    @RequiresPermissions("shopinfo:MerchantsHomepage:view")
    public Grid list(CustomerOrder customerOrder, GridParam param){
        Integer id = UserUtils.getUser().getBusinessId();
        customerOrder.setObjectId(id);
        return customerOrderService.findPageShopOrder(customerOrder, param);
    }




    /**
     * 订单状态
     * @param customerOrder
     * @return
     */
    @Log("订单状态")
   @RequestMapping("complete")
   @ResponseBody
    @RequiresPermissions("shopinfo:MerchantsHomepage:edit")
    public Json isPut(CustomerOrder customerOrder){
        Json json = new Json();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try{
            if(customerOrder.getStatus() ==1){
                customerOrder.setId(customerOrder.getId());
                customerOrder.setStatus(2);
               customerOrder.setCompletionTime(new Date());
                customerOrder.setSinglePerson(UserUtils.getUser().getId());
                customerOrder.setResponseTime(DateUtils.getTimeDifference(dateFormat.format(customerOrder.getCompletionTime()),customerOrder.getDateString()));

            }
            customerOrderService.save(customerOrder);
            json.setSuccess(true);
        }catch(Exception e){
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("操作失败！");
       }
       return json;


   }

    /**
     * 订单状态
     * @param customerOrder
     * @return
     */
    @Log("订单状态")
    @RequestMapping("cancel")
    @ResponseBody
    @RequiresPermissions("shopinfo:MerchantsHomepage:edit")
    public Json cancel(CustomerOrder customerOrder){
        Json json = new Json();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String nowdate = dateFormat.format(new Date());
        try{
            //已接单
            if (customerOrder.getStatus() == 1){
                //查询订单信息
                customerOrder = customerOrderService.get(customerOrder);
                //已接单状态
                customerOrder.setStatus(1);
                //接单人
                customerOrder.setSinglePerson(UserUtils.getUser().getId());
                //接单时间
                customerOrder.setOrderTime(DateUtils.getNowDate());
                //响应时间
                String responseTime = DateUtils.getTimeDifference(nowdate,customerOrder.getDate());
                customerOrder.setResponseTime(responseTime);
                //已完成
            }else if (customerOrder.getStatus() == 2){
                //查询订单信息
                customerOrder = customerOrderService.get(customerOrder);
                //已接单状态
                customerOrder.setStatus(2);
                //完成订单人员
                customerOrder.setCompletionPerson(UserUtils.getUser().getId());
                //完成订单时间
                customerOrder.setCompletionTime(DateUtils.getNowDate());
                //总耗时
                String responseTime = DateUtils.getTimeDifference(nowdate,customerOrder.getDate());
                customerOrder.setTotalTime(responseTime);
            }
            customerOrderService.save(customerOrder);
            json.setSuccess(true);
        }catch(Exception e){
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("操作失败！");
        }
        return json;


    }


    /**
     * 查看详情
     * @param customerOrder
     * @param model
     * @return
     */
    @Log("查看详情")
    @RequestMapping("form")
    @RequiresPermissions("shopinfo:MerchantsHomepage:view")
    public String form(CustomerOrder customerOrder, ModelMap model) {
        customerOrder.setObjectId(UserUtils.getUser().getBusinessId());
        customerOrder = customerOrderService.get(customerOrder.getId());

        model.addAttribute("customerOrder", customerOrder);
        if(customerOrder.getStatus()==1){
            model.addAttribute("status", "未完成");
        }else if(customerOrder.getStatus()==2){
            model.addAttribute("status", "已完成");
        }else if(customerOrder.getStatus()==3){
           model.addAttribute("status", "已取消");
      }
        return "shopinfo/MerchantsHomepageForm";
    }

    @InitBinder
    public void init(WebDataBinder binder) {
        binder.registerCustomEditor(Date.class, new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd"), true));
    }

    @Log("打开展业申请页面")
    @RequestMapping("index5")
    @RequiresPermissions("shopinfo:MerchantsHomepage:view")
    public String index5(ShopType shopType, ShopInfo shopInfo, HotelInfo hotelInfo, ModelMap model) {
        shopInfo.setId(UserUtils.getUser().getBusinessId());
        List<ShopType> shopTypeList = shopTypeService.findList(shopType);
        List<HotelInfo> hotelInfoList = hotelInfoService.findAllList9(hotelInfo);
        model.addAttribute("shopInfo",shopInfo);
        model.addAttribute("hotelInfoList",hotelInfoList);
        model.addAttribute("shopTypeList",shopTypeList);
        return "shopinfo/shopCreate";
    }

}
