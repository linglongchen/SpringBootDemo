package com.chunqiu.mrjuly.modules.shopinfo.controller;

import com.alibaba.fastjson.JSONObject;
import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.easemob.server.example.comm.RegUser;
import com.chunqiu.mrjuly.common.easemob.server.example.comm.huanxin;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.DateUtils;
import com.chunqiu.mrjuly.common.utils.OssUtils.OSSClientUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.utils.publicBean;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.service.HotelInfoService;
import com.chunqiu.mrjuly.modules.install.model.ServiceMode;
import com.chunqiu.mrjuly.modules.install.model.ShopType;
import com.chunqiu.mrjuly.modules.install.service.ShopTypeService;
import com.chunqiu.mrjuly.modules.shophotel.model.ShopHotel;
import com.chunqiu.mrjuly.modules.shopinfo.model.ShopInfo;
import com.chunqiu.mrjuly.modules.shopinfo.service.ShopInfoService;
import com.chunqiu.mrjuly.modules.system.model.User;

import lombok.extern.slf4j.Slf4j;
import net.sourceforge.pinyin4j.PinyinHelper;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;

import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/shopinfo/ShopCreate")
@Transactional
public class ShopInfoCreateController extends BaseController {

    @Autowired
    private ShopInfoService shopInfoService;

    @Autowired
    private ShopTypeService shopTypeService;

    @Autowired
    private HotelInfoService hotelInfoService;

    /**
     * 打开页面
     * @param shopType
     * @param hotelInfo
     * @param model
     * @return
     */
    @Log("打开展业申请页面")
    @RequestMapping("index")
    @RequiresPermissions("shopinfo:ShopCreate:view")
    public String index(ShopType shopType,ShopInfo shopInfo, HotelInfo hotelInfo, ModelMap model) {
        shopInfo.setId(UserUtils.getUser().getBusinessId());
        List<ShopType> shopTypeList = shopTypeService.findList(shopType);
        model.addAttribute("shopInfo",shopInfo);
        if (shopInfo.getBusinessLicensePeriod() != null) {
        	model.addAttribute("businessTime",DateUtils.formatDate(shopInfo.getBusinessLicensePeriod(), DateUtils.PATTERN_DATE));
		}
        model.addAttribute("shopTypeList",shopTypeList);
        return "shopinfo/shopInfoSetting";
    }

    /**
     * 计算数据
     * @param hotelInfo
     * @param request
     * @return
     */
    @Log("打开查询页面")
    @ResponseBody
    @RequestMapping("select")
    public Map<String,String> check(HotelInfo hotelInfo, HttpServletRequest request){
        Map<String,String> map = new HashMap<String,String>();
        //这里写你的查询
        HotelInfo hotelInfolist =  hotelInfoService.selectHotel(hotelInfo);
        String hotelAddress = hotelInfolist.getHotelAddress();//这个地方XXXX是你要的那个地段
        String hotelCode = hotelInfolist.getHotelCode();
        String hotelLat = hotelInfolist.getHotelLat();
        String hotelLng = hotelInfolist.getHotelLng();
        String shopLat = request.getParameter("shopLat");
        String shopLng = request.getParameter("shopLng");

        double hotelLatD = Double.parseDouble(hotelLat);
        double hotelLngD = Double.parseDouble(hotelLng);
        double shopLngD = Double.parseDouble(shopLat);
        double shopLatD = Double.parseDouble(shopLng);
        double hotelLatCir = hotelLatD * Math.PI / 180;
        double shopLatCir = shopLatD * Math.PI / 180;
        double lat = hotelLatCir - shopLatCir;
        double hotelLngCir = hotelLngD * Math.PI / 180;
        double shopLngCir = shopLngD * Math.PI / 180;
        double lon = hotelLngCir - shopLngCir;
        // 地球半径
        double R = 6378.137;
        double distance = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(lat / 2), 2)
                + Math.cos(hotelLatCir) * Math.cos(shopLatCir)
                * Math.pow(Math.sin(lon / 2), 2)));
        distance = distance * R;
        distance = Math.round(distance * 10000d) / 10000d;
        distance = distance * 1000;

        /*double distanceAdress = Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1)) * R;*/
        String juli = String.valueOf(distance);

        map.put("hotelAddress",hotelAddress);//这个地方的XXX是你随便起的名字  这里起什么页面data.什么
        map.put("hotelCode", hotelCode);//查完房map里面  替换掉这个true
        map.put("hotelLat", hotelLat);
        map.put("hotelLng",hotelLng);
        map.put("shopLat",shopLat);
        map.put("shopLng",shopLng);
        map.put("distanceAdress",juli);
        return map;//返回到页面  map里面定义的XXX  到页面上直接data.XX
    }

    /**
     * 数据新增
     * @param shopInfo
     * @param shopHotel
     * @param hotelInfo
     * @param serviceMode
     * @param shopType
     * @param model
     * @return
     */
    @Log("新增")
    @RequestMapping("save")
    @RequiresPermissions("shopinfo:ShopCreate:edit")
    public String saveFeed(ShopInfo shopInfo, ShopHotel shopHotel, HotelInfo hotelInfo, ServiceMode serviceMode, ShopType shopType, ModelMap model) {
        try {
                //新增操作
                if (shopInfo.getId() == null){
                    //企业编号
                    String shopNumber = getPinYinHeadChar(shopInfo.getShopName()+"0"+ DateUtils.getDate("yyyyMMddHHmmss"));
                    shopInfo.setShopNumber(shopNumber);
                    shopInfo.setSystemNum(shopNumber);
                }

                shopInfoService.saveFeed(shopInfo);
                //新增返回自增id
                if (shopInfo.getInsertId() != null){
                    User user = new User();
                    user.setId( UserUtils.getUser().getId());
                    //更新当前用户信息
                    user.setBusinessId(shopInfo.getInsertId());
                    shopInfoService.updateId(user);
                    //新增服务方式
                    serviceMode.setObjectId(UserUtils.getUser().getBusinessId());
                    serviceMode.setObjectId(shopInfo.getInsertId());
                    shopInfoService.serviceMode(serviceMode);
                    //新增一个商户IM账号
                    RegUser regUser = new RegUser();
                    regUser.setUsername(shopInfo.getShopNumber());
                    regUser.setPassword("123456");
                    huanxin.reg2(regUser);
                }

                //新增申请记录
                if (shopInfo.getInsertId() != null){
                    shopHotel.setShopId(shopInfo.getInsertId());
                }else {
                    shopHotel.setShopId(UserUtils.getUser().getBusinessId());
                }
                shopInfoService.saveFeed1(shopHotel);


            //当前为新增操作结束后
            if (shopInfo.getInsertId() != null){
                return index2(shopType, shopInfo, hotelInfo, model);
            }

            model.addAttribute("true", "保存成功！");
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            model.addAttribute("error", "保存失败！");

            return index(shopType, shopInfo, hotelInfo, model);
        }
        return index(shopType, shopInfo, hotelInfo, model);
    }


    /**
     * 得到中文首字母
     *
     * @param str
     * @return
     */
    public static String getPinYinHeadChar(String str) {
        String convert = "";
        for (int j = 0; j < str.length(); j++) {
            char word = str.charAt(j);
            String[] pinyinArray = PinyinHelper.toHanyuPinyinStringArray(word);
            if (pinyinArray != null) {
                convert += pinyinArray[0].charAt(0);
            } else {
                convert += word;
            }
        }
        return convert;
    }


    public String index2(ShopType shopType,ShopInfo shopInfo, HotelInfo hotelInfo, ModelMap model) {
        shopInfo.setStatus(3);
        //获取当前操作系统
        String osName = System.getProperty("os.name");
        String fileName = osName.toLowerCase().contains("windows")? publicBean.WINDOWIP: publicBean.LUNIXIP;
        shopInfo.setRoute(fileName);
        model.addAttribute("shopInfo",shopInfo);
        return "shopinfo/shopInfoSetting";
    }



    /**
     * 打开高德地图页面
     * @return
     */
    @Log("打开地图")
    @RequestMapping(value = "map")
    @RequiresPermissions("shopinfo:ShopCreate:view")
    public String map() {
        return "shopinfo/shopMap";
    }


    /**
     * 保存后返回当前页面
     * @param shopInfo
     * @param modelMap
     * @return
     */
    @Log("地图返回页面")
    @RequestMapping("returnMap")
    @RequiresPermissions("shopinfo:ShopCreate:view")
    public String returnMap(ShopInfo shopInfo, ModelMap modelMap){
        modelMap.addAttribute("shopInfo",shopInfo);
        return successPath5;
    }

    @Log("新增商家")
    @RequestMapping("saveOrUpdate")
    @RequiresPermissions("shopinfo:ShopCreate:edit")
    public String saveShopInfo(ShopInfo shopInfo, ServiceMode serviceMode, ShopType shopType, ModelMap model){
        String businessLicenseImg = OSSClientUtils.ossUploadPictures(shopInfo.getBusinessLicenseImg());
        shopInfo.setBusinessLicenseImg(businessLicenseImg);
        String shopImgs = OSSClientUtils.ossUploadPictures(shopInfo.getShopImgs());
        shopInfo.setShopImgs(shopImgs);
    	log.info(JSONObject.toJSONString(shopInfo));
    	if (shopInfo != null && shopInfo.getId() != null) {
			//更新
            shopInfo.setUpdateBy(UserUtils.getUser());
    		shopInfoService.updateByPrimaryKeySelective(shopInfo);
		} else {
			//企业编号
            String shopNumber = getPinYinHeadChar(shopInfo.getShopName()+"0"+ DateUtils.getDate("yyyyMMddHHmmss"));
            shopInfo.setShopNumber(shopNumber);
            shopInfo.setSystemNum(shopNumber);
            shopInfo.setCreateBy(UserUtils.getUser());
			shopInfoService.insertSelective(shopInfo);
			if (shopInfo.getId() != null){
                User user = new User();
                user.setId(UserUtils.getUser().getId());
                //更新当前用户信息
                user.setBusinessId(shopInfo.getId());
                shopInfoService.updateId(user);
                //新增服务方式
                serviceMode.setObjectId(UserUtils.getUser().getBusinessId());
                serviceMode.setObjectId(shopInfo.getId());
                shopInfoService.serviceMode(serviceMode);
                //新增一个商户IM账号
                RegUser regUser = new RegUser();
                regUser.setUsername(shopInfo.getShopNumber());
                regUser.setPassword("123456");
                huanxin.reg2(regUser);
                return index2(shopType, shopInfo, null, model);
            }
		}
        model.addAttribute("true", "保存成功！");
    	return index(shopType, shopInfo, null, model);
    }
    
    @Log("商家信息页面")
    @RequestMapping("shopInfoPage")
    @RequiresPermissions("shopinfo:ShopCreate:view")
    public String shopInfoPage(ShopInfo shopInfo, ModelMap model) throws Exception {
    	ShopType shopType = new ShopType();
        List<ShopType> shopTypeList = shopTypeService.findList(shopType);
        shopInfo = shopInfoService.get(UserUtils.getUser().getBusinessId());
        model.addAttribute("shopInfo",shopInfo);
        model.addAttribute("businessTime",DateUtils.formatDate(shopInfo.getBusinessLicensePeriod(), DateUtils.PATTERN_DATE));
        model.addAttribute("shopTypeList",shopTypeList);
        return "shopinfo/shopInfoSetting";
    }
}
