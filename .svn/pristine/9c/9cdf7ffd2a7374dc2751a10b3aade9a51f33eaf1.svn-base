package com.chunqiu.mrjuly.modules.record.controller;

import com.chunqiu.mrjuly.common.annotation.Limit;
import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.install.model.ShopType;
import com.chunqiu.mrjuly.modules.install.service.ShopTypeService;
import com.chunqiu.mrjuly.modules.record.model.ShopRecord;
import com.chunqiu.mrjuly.modules.record.service.ShopRecordService;
import com.chunqiu.mrjuly.modules.system.model.User;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.List;

/**
 * 审核记录Controller
 *
 * @author chen
 * @version 2019-03-06
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/record/shopRecord")
public class ShopRecordController extends BaseController {

    @Autowired
    private ShopRecordService shopRecordService;
    @Autowired
    private ShopTypeService shopTypeService;

    /**
     * @Description：审核记录列表页面
     * @author chen
     */
    @Limit(key = "record/shopRecordindex", period = 30, count = 5, name = "审核记录列表页面", prefix = "limit")
    @Log("打开审核记录列表页面")
    @RequestMapping("index")
    @RequiresPermissions("record:shopRecord:view")
    public String index() {
        return "record/shopRecordList";
    }

    /**
     * @Description：审核记录列表数据
     * @author chen
     */
    @Log("获取审核记录列表数据")
    @RequestMapping("list")
    @ResponseBody
    @RequiresPermissions("record:shopRecord:view")
    public Grid list(ShopRecord shopRecord, GridParam param) {
        shopRecord.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        return shopRecordService.findPage(shopRecord, param);
    }

    /**
     * @Description：审核记录表单页面--新增/编辑
     * @author chen
     */
    @Log("打开审核记录表单页面--新增/编辑")
    @RequestMapping(value = "form")
    @RequiresPermissions("record:shopRecord:view")
    public String form(ShopRecord shopRecord, ModelMap model) {
        shopRecord = shopRecordService.get(shopRecord.getId());
        model.addAttribute("shopRecord", shopRecord);
        if (shopRecord.getShopInfo()!=null){
            List<String> list = new ArrayList<>();
            String[] string = shopRecord.getShopInfo().getShopImgs().split(",");
            for (int i=0;i<string.length;i++){
                list.add(string[i]);
            }
            model.addAttribute("showImageList",list);
        }
        return "record/shopRecordForm";
    }

    /**
     * @Description：审核记录新增/编辑 保存方法
     * @author chen
     */
    @Log("新增/编辑审核记录")
    @RequestMapping("saveShopRecord")
    @RequiresPermissions("record:shopRecord:edit")
    public String saveShopRecord(ShopRecord shopRecord, ModelMap model) {
        try {
            shopRecordService.save(shopRecord);
        } catch (Exception e) {
            log.error("保存失败！ msg={}", e.getMessage(), e);

            model.addAttribute("error", "保存失败！");
            return form(shopRecord, model);
        }
        return successPath;
    }

    /**
     * @Description：审核记录数据删除方法
     * @author chen
     */
    @Log("删除审核记录")
    @RequestMapping("delShopRecord")
    @ResponseBody
    @RequiresPermissions("record:shopRecord:edit")
    public Json delShopRecord(ShopRecord shopRecord) {
        Json json = new Json();
        try {
            shopRecordService.delete(shopRecord);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("删除失败！ msg={}", e.getMessage(), e);

            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }
    @Log("审核人数据")
    @RequestMapping("recordPerson")
    @ResponseBody
    public List<User> recordPerson(){
        List<User> list=shopRecordService.recordPerson(Integer.parseInt(UserUtils.getUser().getId().toString()));
        list.add(UserUtils.getUser());
        return list;
    }

    @Log("行业类别数据")
    @RequestMapping("getTypeList")
    @ResponseBody
    public List<ShopType> getTypeList(ShopType  shopType){
        return shopTypeService.getTypeList(shopType);
    }

}