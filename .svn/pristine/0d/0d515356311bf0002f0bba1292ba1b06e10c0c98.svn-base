package com.chunqiu.mrjuly.modules.shopinfo.service;

import com.chunqiu.mrjuly.common.enums.BillTypeEnum;
import com.chunqiu.mrjuly.common.enums.PlatformTypeEnum;
import com.chunqiu.mrjuly.common.persistence.CrudService;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.modules.advertiserinfo.dao.AdvertiserInfoDao;
import com.chunqiu.mrjuly.modules.advertiserinfo.model.AccountMoney;
import com.chunqiu.mrjuly.modules.advertiserinfo.model.FlowSheetInfo2;
import com.chunqiu.mrjuly.modules.install.model.ServiceMode;
import com.chunqiu.mrjuly.modules.mybill.model.MyBillInfo;
import com.chunqiu.mrjuly.modules.shophotel.model.ShopHotel;
import com.chunqiu.mrjuly.modules.shopinfo.dao.ShopInfoDao;
import com.chunqiu.mrjuly.modules.shopinfo.model.ShopInfo;
import com.chunqiu.mrjuly.modules.system.model.User;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;

import org.springframework.stereotype.Service;

import javax.annotation.Resource;

import java.util.ArrayList;
import java.util.List;

/**
 * 商家信息Service
 *
 * @author chen
 * @version 2019-03-05
 */
@Service
public class ShopInfoService extends CrudService<ShopInfoDao, ShopInfo, Integer> {
    @Resource
    private ShopInfoDao dao;
    @Resource
    private AdvertiserInfoDao advertiserInfoDao;


    /**
     * 保存冻结
     * @param list
     */
    public void freezeAllShop(List<ShopInfo> list) {
        dao.freezeAllShop(list);
    }

    /**
     * 解冻商家信息
     * @param list
     */
    public void freezeAllShop2(List<ShopInfo> list) {
        dao.freezeAllShop2(list);
    }

    /**
     * 展业申请新增和编辑
     * @param shopInfo
     */
    public void saveFeed(ShopInfo shopInfo) {
        if (shopInfo.getId() == null) {
            shopInfo.preInsert();
            dao.shopCreate(shopInfo);
        } else {
            shopInfo.preUpdate();
            dao.updateShopCreate(shopInfo);
        }
    }



    /**
     * 新增服务方式
     * @param serviceMode
     * @return
     */
    public int serviceMode(ServiceMode serviceMode) {
        List<ServiceMode> serviceModeList = new ArrayList<>();
        ServiceMode serviceMode1 = new ServiceMode();
        serviceMode1.setObjectId(serviceMode.getObjectId());
        serviceMode1.setServiceMode("到店自取");
        serviceMode1.setType(serviceMode.getType());
        serviceModeList.add(serviceMode1);
        ServiceMode serviceMode2 = new ServiceMode();
        serviceMode2.setObjectId(serviceMode.getObjectId());
        serviceMode2.setServiceMode("由店铺送达");
        serviceMode2.setType(serviceMode.getType());
        serviceModeList.add(serviceMode2);
        return dao.serviceMode(serviceModeList);
    }

    /**
     * 新增申请记录
     * @param shopHotel
     */
    public void saveFeed1(ShopHotel shopHotel) {

        shopHotel.preInsert();
        dao.insertId(shopHotel);

    }

    /**
     * 更新当前用户信
     * @param user
     * @return
     */
    public int updateId(User user) {
        return dao.updateId(user);
    }

    /**
     * 商家保存打款信息
     * @param accountMoney
     */
    public void saveAccountRecharge(AccountMoney accountMoney) {
        FlowSheetInfo2 flowSheetInfo2 = new FlowSheetInfo2();
        ShopInfo shopInfo = new ShopInfo();
        shopInfo = dao.get(accountMoney.getShopInfoId());
        if (shopInfo.getAccount() == null) {
            shopInfo.setAccount(0f);
        }
        flowSheetInfo2.setAccountAmount(shopInfo.getAccount() + accountMoney.getPrice());
        flowSheetInfo2.setCreateDate2(accountMoney.getCreateDate());
        flowSheetInfo2.setObjectId(accountMoney.getShopInfoId());
        flowSheetInfo2.setOperatingAmount(accountMoney.getPrice());
        flowSheetInfo2.setFlowSheetPlatform(PlatformTypeEnum.SHOP.getType());
        flowSheetInfo2.setMerchantCode(shopInfo.getShopNumber());
        flowSheetInfo2.setMerchantName(shopInfo.getShopName());
        flowSheetInfo2.setOperationMode(1);
        flowSheetInfo2.setRemarks(accountMoney.getRemarks());
        flowSheetInfo2.setCreateBy(UserUtils.getUser());
        dao.insertFlow(flowSheetInfo2);
        MyBillInfo myBillInfo = new MyBillInfo();
        myBillInfo.setAmountPrice(accountMoney.getPrice());
        myBillInfo.setCreateBy(UserUtils.getUser());
        myBillInfo.setBillOfOriginId(accountMoney.getBillOfOriginId());
        myBillInfo.setType(1);
        myBillInfo.setStatus(BillTypeEnum.INMONEY.getType());
        myBillInfo.setRemarks(accountMoney.getRemarks());
        //默认数据库函数CURRENT_TIMESTAMP
//        myBillInfo.setStartTime(accountMoney.getCreateDate());
        myBillInfo.setObjectId(accountMoney.getShopInfoId());
        myBillInfo.preInsert();
        dao.insertMyBill(myBillInfo);
        ShopInfo shopInfo1 = new ShopInfo();
        shopInfo1.setId(accountMoney.getShopInfoId());
        shopInfo1.setAccount(shopInfo.getAccount() + accountMoney.getPrice());
        dao.update(shopInfo1);
        advertiserInfoDao.cutStatus(Integer.parseInt(accountMoney.getBillOfOriginId()));

    }

    /**
     * 商家保存扣款信息
     * @param accountMoney
     */
    public void saveCutAccountRecharge(AccountMoney accountMoney) {
    	//充扣流水业务,开始
        FlowSheetInfo2 shopFlowSheetInfo = new FlowSheetInfo2();
        ShopInfo shopInfo = new ShopInfo();
        shopInfo = dao.get(accountMoney.getShopInfoId());
        shopFlowSheetInfo.setAccountAmount(shopInfo.getAccount() - accountMoney.getPrice());
        //默认数据库函数CURRENT_TIMESTAMP
//        shopFlowSheetInfo.setCreateDate2(accountMoney.getCreateDate());
        shopFlowSheetInfo.setObjectId(shopInfo.getId());
        shopFlowSheetInfo.setOperatingAmount(shopInfo.getPrice());
        shopFlowSheetInfo.setFlowSheetPlatform(PlatformTypeEnum.SHOP.getType());
        shopFlowSheetInfo.setMerchantCode(shopInfo.getShopNumber());
        shopFlowSheetInfo.setMerchantName(shopInfo.getShopName());
        shopFlowSheetInfo.setOperationMode(accountMoney.getType());
        shopFlowSheetInfo.setRemarks(accountMoney.getRemarks());
        shopFlowSheetInfo.setCreateBy(UserUtils.getUser());
        dao.insertFlow(shopFlowSheetInfo);
    	//充扣流水业务,结束
        
        //账户账单业务,开始
        MyBillInfo myBillInfo = new MyBillInfo();
        myBillInfo.setAmountPrice(accountMoney.getPrice());
        myBillInfo.setCreateBy(UserUtils.getUser());
//        myBillInfo.setBillOfOriginId(UserUtils.getUser().getBusinessId());
        myBillInfo.setType(1);
        myBillInfo.setStatus(getBillTypeByPaymentType(accountMoney.getType()));
        myBillInfo.setRemarks(accountMoney.getRemarks());
        //默认数据库函数CURRENT_TIMESTAMP
//        myBillInfo.setStartTime(accountMoney.getCreateDate());
        myBillInfo.setObjectId(shopInfo.getId());
        dao.insertMyBill2(myBillInfo);
        //账户账单业务结束
        
        //账户余额更新,开始
        ShopInfo updateShopInfo = new ShopInfo();
        updateShopInfo.setId(shopInfo.getId());
        updateShopInfo.setAccount(shopInfo.getAccount() - accountMoney.getPrice());
        dao.update(updateShopInfo);
        //账户余额更新,结束
    }

    public Grid shopLeaseList(ShopHotel entity, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        dao.shopLeaseList(entity);
        grid.setRows(page.getResult());
        grid.setTotal(page.getTotal());
        return grid;
    }
    
    /**
     * 更新广告商星级
     * @param advertiserInfo 
     * @return 更新的行数
     * @author wy
     */
    public int updateStar(ShopInfo shopInfo){
    	return dao.updateStar(shopInfo);
    }
    
    /**
     * 根据扣款类型获取账单类型
     * @author wy
     */
    private int getBillTypeByPaymentType(int pType){
    	int result = 0;
    	switch (pType) {
		case 2:
			result = BillTypeEnum.RENT.getType();
			break;
		case 3:
			result = BillTypeEnum.RENT_OTHER.getType();
			break;
		default:
			result = BillTypeEnum.RENT.getType();
			break;
		}
    	return result;
    }
    
    public int insertSelective(ShopInfo shopInfo){
    	return dao.insertSelective(shopInfo);
    }
    
    public int updateByPrimaryKeySelective(ShopInfo shopInfo){
    	return dao.updateByPrimaryKeySelective(shopInfo);
    }
}
