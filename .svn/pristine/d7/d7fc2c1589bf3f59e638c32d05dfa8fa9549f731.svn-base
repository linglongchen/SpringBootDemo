package com.chunqiu.mrjuly.modules.install.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.install.model.Notice;
import com.chunqiu.mrjuly.modules.install.model.NoticeInfo;
import com.chunqiu.mrjuly.modules.install.service.NoticeInfoService;
import com.chunqiu.mrjuly.modules.install.service.NoticeService;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

/**
 * 公告管理
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/install/notice1")
@Transactional
public class NoticeInfoController extends BaseController{

    @Autowired
    private NoticeInfoService noticeInfoService;
    @Autowired
    private NoticeService noticeService;

    /**
     * 登录到公告页面
     * @return
     */
    @Log("登录到公告页面")
    @RequestMapping("index")
    @RequiresPermissions("install:notice1:view")
    public String index(){
        return "install/noticeList";
    }

    /**
     * 初始化公告管理数据页面
     * @param noticeInfo
     * @param param
     * @return
     */
    @Log("公告页面初始换列表")
    @ResponseBody
    @RequestMapping("list")
    @RequiresPermissions("install:notice1:view")
    public Grid list(NoticeInfo noticeInfo, GridParam param){
        return noticeInfoService.findPage(noticeInfo, param);
    }

    /**
     * 登录到公告新增/编辑页面
     * @param noticeInfo
     * @param model
     * @return
     */
    @Log("登录公告管理新增/编辑页面")
    @RequestMapping(value = "form")
    @RequiresPermissions("install:notice1:view")
    public String form(NoticeInfo noticeInfo, ModelMap model){
        if (noticeInfo.getNoticeTitle() == null && noticeInfo.getId() != null){
            noticeInfo = noticeInfoService.get(noticeInfo.getId());
        }
        model.addAttribute("noticeInfo",noticeInfo);
        return "install/noticeForm";
    }

    /**
     * 保存方法
     * @param noticeInfo
     * @param model
     * @return
     */
    @Log("保存公告")
    @RequestMapping("save")
    @RequiresPermissions("install:notice1:edit")
    public String save(NoticeInfo noticeInfo, ModelMap model){
        try{
            if (noticeInfo.getNoticeRoll() == null){
                model.addAttribute("error","请选择首页是否滚动");
                return form(noticeInfo, model);
            }
            if (noticeInfo.getTarget() == null){
                model.addAttribute("error","请选择发布对象");
                return form(noticeInfo, model);
            }
            if (noticeInfo.getNoticeForm() == null){
                model.addAttribute("error","请选择发布形式");
                return form(noticeInfo, model);
            }


                Notice notice = new Notice();
                notice.setTarget(noticeInfo.getTarget());
                List<Notice> noticeList = noticeService.noticeById(notice);
                noticeInfo.setNoticeList(noticeList);

             if (noticeInfo.getId() != null){
                    notice.setTargetId(noticeInfo.getTargetId());
                    notice.setType(1);
                    notice.setTimeSn(noticeInfo.getTimeSn());
                    noticeInfoService.updateObjectId(notice);
                    noticeInfo.setId(null);
                    if(noticeInfo.getNoticeForm() == 1){
                        noticeInfo.setScheduledReleaseTime(null);
                    }
             }else {
                 //时间戳
                 noticeInfo.setTimeSn(System.currentTimeMillis()+"");

             }
            noticeInfoService.save(noticeInfo);
        }catch(Exception e){
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            model.addAttribute("error", "保存失败！");
            return form(noticeInfo, model);
        }
        return successPath;
    }

    /**
     * 查看详情
     * @param noticeInfo
     * @param model
     * @return
     */
    @Log("查看详情")
    @RequestMapping("form1")
    @RequiresPermissions("install:notice1:view")
    public String form1(NoticeInfo noticeInfo, ModelMap model) {
        noticeInfo = noticeInfoService.get(noticeInfo.getId());
        model.addAttribute("noticeInfo", noticeInfo);
        if(noticeInfo.getNoticeRoll()==1){
            model.addAttribute("noticeRoll", "是");
        }else if(noticeInfo.getNoticeRoll()==2){
            model.addAttribute("noticeRoll", "否");
        }
        if(noticeInfo.getNoticeForm()==1){
            model.addAttribute("noticeForm", noticeInfo.getCreateDate());
        }else if(noticeInfo.getNoticeForm()==2){
            model.addAttribute("noticeForm", noticeInfo.getScheduledReleaseTime());
        }
        return "install/noticeListForm";
    }

    @Log("获取消息数据")
    @ResponseBody
    @RequestMapping("getNotice")
    public Json getNotice(){
        Json json = new Json();
        try{
            Integer objectId = UserUtils.getUser().getBusinessId();
            Integer type = UserUtils.getUser().getRoleType();
            Integer target=0;
            if (type==3){
                 target = 2;
            }else if (type==4){
                 target = 3;
            }
            NoticeInfo noticeInfo = noticeInfoService.getNotice(objectId,target);
            if (noticeInfo != null){
                if (noticeInfo.getNoticeContent()!=null && !"".equals(noticeInfo.getNoticeContent())){
                    json.setData(noticeInfo.getNoticeContent());
                }
            }

            return json;
        }catch (Exception e){
                e.printStackTrace();
            return null;
        }
    }


}
