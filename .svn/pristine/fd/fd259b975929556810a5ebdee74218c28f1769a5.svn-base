package com.chunqiu.mrjuly.modules.mine.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.modules.mine.model.FrameSetting;
import com.chunqiu.mrjuly.modules.mine.service.FrameSettingService;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import java.util.List;

@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/mine/frame")
public class FrameSettingController extends BaseController{

    @Autowired
    private FrameSettingService frameSettingService;

    @Log("登录到弹框设置")
    @RequestMapping("index")
    @RequiresPermissions("mine:frame:view")
    public String index(FrameSetting frameSetting, ModelMap model) {
        frameSetting.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        List<FrameSetting> list = frameSettingService.getAll(frameSetting.getHotelCodeId());
        if (list.size() == 0) {
            model.addAttribute("thirdPartyReminder", "");
            model.addAttribute("safeExit", "");
        } else {
            model.addAttribute("thirdPartyReminder", list.get(0).getThirdPartyReminder());
            model.addAttribute("safeExit", list.get(0).getSafeExit());
            model.addAttribute("id", list.get(0).getId());

        }
        return "mine/frameSetting";
    }

    @Log("保存方法")
    @RequestMapping("saveSetting")
    @RequiresPermissions("mine:frame:edit")
    public String save(FrameSetting frameSetting, ModelMap model) {
        String cid = frameSetting.getCid();
        frameSetting.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        if (cid == null || cid == ""){
            frameSetting.setId(null);
        }else {
            frameSetting.setId(Integer.valueOf(cid));
        }
        try {
            frameSettingService.saveList(frameSetting);
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", "编辑失败！");
            return index(frameSetting, model);
        }
        return index(frameSetting, model);
    }
}
