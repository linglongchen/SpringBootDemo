package com.chunqiu.mrjuly.modules.advertisingorder.service;

import com.chunqiu.mrjuly.common.persistence.CrudService;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.modules.advertiserinfo.model.AdvertiserInfo;
import com.chunqiu.mrjuly.modules.advertisingcart.model.AdvertisingCart;
import com.chunqiu.mrjuly.modules.advertisingorder.dao.AdvertisingOrderDao;
import com.chunqiu.mrjuly.modules.advertisingorder.model.AdvertisingOrder;
import com.chunqiu.mrjuly.modules.adviertisement.model.AdviertisementType;
import com.chunqiu.mrjuly.modules.flowsheetinfo.model.FlowSheetInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.install.model.CouponInfo;
import com.chunqiu.mrjuly.modules.install.model.NoticeInfo;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;

import org.springframework.stereotype.Service;

import javax.annotation.Resource;

import java.util.List;

/**
 * 广告订单Service
 *
 * @author 周天
 * @version 2019-03-21
 */
@Service
public class AdvertisingOrderService extends CrudService<AdvertisingOrderDao, AdvertisingOrder, Integer> {
    @Resource
    private AdvertisingOrderDao dao;

    /**
     * 更新状态
     * @param advertisingOrder
     * @return
     */
    public int updateStatus(AdvertisingOrder advertisingOrder) {
        return dao.updateStatus(advertisingOrder);
    }

    /**
     * 查看未读信息
     * @param noticeInfo
     * @return
     */
    public int selCou(NoticeInfo noticeInfo) {
        return dao.selCou(noticeInfo);
    }

    /**
     * 今日投放
     * @param advertisingOrder
     * @return
     */
    public int selCount(AdvertisingOrder advertisingOrder) {
        return dao.selCount(advertisingOrder);
    }

    /**
     * 查看竞拍成功
     * @param advertisingOrder
     * @return
     */
    public int selCount1(AdvertisingOrder advertisingOrder) {
        return dao.selCount1(advertisingOrder);
    }

    /**
     * 查询广告主对应的订单号
     * @param advertisingOrder
     * @return
     */
    public List<AdvertisingOrder> selNum(AdvertisingOrder advertisingOrder) {
        return dao.selNum(advertisingOrder);
    }


    /**
     * 查询订单对应的所有数据
     * @param advertisingOrder
     * @return
     */
    public AdvertisingOrder selAllIn(AdvertisingOrder advertisingOrder) {
        return dao.selAllIn(advertisingOrder);
    }

    /**
     * 计算总数
     * @param advertisingOrder
     * @return
     */
    public AdvertisingOrder getTotal(AdvertisingOrder advertisingOrder) {
        return dao.getTotal(advertisingOrder);
    }


    /**
     * 查看今日到期
     * @param advertisingOrder
     * @return
     */
    public int selTime(AdvertisingOrder advertisingOrder) {
        return dao.selTime(advertisingOrder);
    }

    /**
     * 查看审核驳回的
     * @param advertisingOrder
     * @return
     */
    public int selState(AdvertisingOrder advertisingOrder) {
        return dao.selState(advertisingOrder);
    }

    /**
     * 查找所有的数据
     * @param advertisingOrder
     * @return
     */
    public List<AdvertisingOrder> selContent(AdvertisingOrder advertisingOrder) {
        return dao.selContent(advertisingOrder);
    }


    /**
     * c查找当日竞拍的订单
     * @param advertisingOrder
     * @return
     */
    public List<AdvertisingOrder> advertisingOrderList(AdvertisingOrder advertisingOrder) {
        return dao.advertisingOrderList(advertisingOrder);
    }

    /**
     * 更新当前订单的当前价和总价
     * @param advertisingOrder
     * @return
     */
    public int updateOrderPrice(AdvertisingOrder advertisingOrder) {
        return dao.updateOrderPrice(advertisingOrder);
    }

    /**
     * 更新订单
     * @param advertisingOrder
     * @return
     */
    public int updateOrderById(AdvertisingOrder advertisingOrder) {
        return dao.updateOrderById(advertisingOrder);
    }

    /**
     * 优惠券更新
     * @param advertisingOrder
     * @return
     */
    public int updateCouponById(AdvertisingOrder advertisingOrder) {
        return dao.updateCouponById(advertisingOrder);
    }

    /**
     * 查询前一天竞拍完成待结算的订单
     * @param advertisingOrder
     * @return
     */
    public List<AdvertisingOrder> advertisingOrderListByBefore(AdvertisingOrder advertisingOrder) {
        return dao.advertisingOrderListByBefore(advertisingOrder);
    }

    /**
     * 查询广告订单成功购买列表数据
     * @param entity
     * @param param
     * @return
     */
    public Grid successPurchase(AdvertisingOrder entity, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        dao.successPurchase(entity);
        grid.setRows(page.getResult());
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 获取广告订单列表数据
     * @param entity
     * @param param
     * @return
     */
    public Grid findPage2(AdvertisingOrder entity, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        dao.findList2(entity);
        grid.setRows(page.getResult());
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 广告订单数据
     * @param advertisingOrder
     * @return
     */

    public AdvertisingOrder getDetail(AdvertisingOrder advertisingOrder) {
        return dao.getDetail(advertisingOrder);
    }


    /**
     * 获取广告订单列表数据
     * @param entity
     * @param param
     * @return
     */
    public Grid orderDetailList(AdvertisingOrder entity, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        dao.orderDetailList(entity);
        grid.setRows(page.getResult());
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 导出数据广告订单
     * @param entity
     * @return
     */
    public List<AdvertisingOrder> orderDetailList2(AdvertisingOrder entity) {
        return dao.orderDetailList(entity);
    }

    /**
     * 获取在线商家订单列表数据
     * @param objectId
     * @return
     */
    public List<AdvertisingOrder> getOrderNum(Integer objectId) {
        return dao.getOrderNum(objectId);
    }

    /**
     * 获取广告订单列表数据
     * @param objectId
     * @return
     */
    public List<AdvertisingOrder> getOrderNum2(Integer objectId) {
        return dao.getOrderNum2(objectId);
    }

    /**
     * 更新上传广告数据
     * @param advertisingOrder
     */
    public void uploadAdvertisement(AdvertisingOrder advertisingOrder) {
        dao.uploadAdvertisement(advertisingOrder);
    }

    /**
     * 更新上传广告数据
     * @param advertisingOrder
     */
    public void uploadAdvertisement2(AdvertisingOrder advertisingOrder) {
        dao.uploadAdvertisement2(advertisingOrder);
    }

    /**
     * 获取类型
     * @param advertisingOrder
     * @return
     */
    public int getType(AdvertisingOrder advertisingOrder) {
        return dao.getType(advertisingOrder);
    }

    /**
     * 获取广告类型
     * @return
     */
    public List<AdviertisementType> getType3() {
        return dao.getType3();
    }

    /**
     * 查询所有前两天交易完成并且没有通过审核的订单
     * @return
     */
    public List<AdvertisingOrder> productionAdvertisingList() {
        return dao.productionAdvertisingList();
    }

    /**
     * 返还给当前账户
     * @param advertisingCart
     * @return
     */
    public int rechargePrice(AdvertisingCart advertisingCart) {
        return dao.rechargePrice(advertisingCart);
    }

    /**
     * 酒店查询数据
     * @param advertisingOrder
     * @return
     */
    public List<AdvertisingOrder> AdvertisingOrderHotelList(AdvertisingOrder advertisingOrder) {
        return dao.AdvertisingOrderHotelList(advertisingOrder);
    }

    /**
     * 查询酒店总览数据列表
     * @param entity
     * @param param
     * @return
     */
    public Grid overviewOrderList(AdvertisingOrder entity, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        dao.overviewOrderList(entity);
        grid.setRows(page.getResult());
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 查询投放广告数据分析
     * @param entity
     * @param param
     * @return
     */
    public Grid analysisOfAdvertisingDataList(AdvertisingOrder entity, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        dao.analysisOfAdvertisingDataList(entity);
        grid.setRows(page.getResult());
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 查询当前订单被点击的状态次数
     * @param advertisingOrder
     * @return
     */
    public List<AdvertisingOrder> orderCLickList(AdvertisingOrder advertisingOrder) {
        return dao.orderCLickList(advertisingOrder);
    }

    /**
     * 查询投放记录数据
     * @param entity
     * @param param
     * @return
     */
    public Grid releaseRecordDataList(AdvertisingOrder entity, GridParam param) {
        Grid grid = new Grid();
        Page page = PageHelper.offsetPage(param.getOffset(), param.getLimit(), true);
        dao.releaseRecordDataList(entity);
        grid.setRows(page.getResult());
        grid.setTotal(page.getTotal());
        return grid;
    }

    /**
     * 投放记录饼图数据
     * @param advertisingOrder
     * @return
     */
    public AdvertisingOrder advertisingOrderInfo(AdvertisingOrder advertisingOrder) {
        return dao.advertisingOrderInfo(advertisingOrder);
    }


    public AdvertisingOrder orderNumberData(AdvertisingOrder advertisingOrder) {
        return dao.orderNumberData(advertisingOrder);
    }

    /**
     * 导出数据
     * @param advertisingOrder
     * @return
     */
    public List<AdvertisingOrder> advertisingOrderExcel(AdvertisingOrder advertisingOrder) {
        return dao.advertisingOrderExcel(advertisingOrder);
    }

    /**
     * 获取广告类型
     * @param ordernumber
     * @return
     */
    public AdvertisingOrder getTypeData(String ordernumber) {
        return dao.getTypeData(ordernumber);
    }

    /**
     * 获取订单数量
     * @param advertisingCart
     * @return
     */
    public Integer orderNum(AdvertisingCart advertisingCart){
        return dao.orderNum(advertisingCart);
    }
    /**
     * 获取订单数量
     * @param advertisingCart
     * @return
     */
    public Integer orderNum2(AdvertisingCart advertisingCart){
        return dao.orderNum2(advertisingCart);
    }

    /**
     * 插入下一个人竞拍的当前价提醒消息
     * @param advertisingOrder
     * @return
     */
    public  AdvertisingOrder advertisingOrderInfoById (AdvertisingOrder advertisingOrder){
        return dao.advertisingOrderInfoById(advertisingOrder);
    }

    /**
     * 广告数据列表
     * @return
     */
    public List<HotelInfo> hotelInfo(){
        return dao.hotelInfo();
    }

    /**
     * 查询所有订单信息
     * @param advertisingOrderList
     * @return
     */
    public List<AdvertisingOrder>orderPriceListById(List<AdvertisingOrder> advertisingOrderList){
        return dao.orderPriceListById(advertisingOrderList);
    }

    /**
     * 查询优惠券内容
     * @param id
     * @return
     */
    public CouponInfo couponInfoById(Integer id){
        return dao.couponInfoById(id);
    }
    
    public Double getOrderMaxPriceByCondition(AdvertisingOrder condition) {
    	return dao.getOrderMaxPriceByCondition(condition);
    }
}
