package com.chunqiu.mrjuly.modules.lyhoteldevicerelation.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.easemob.server.example.comm.RegUser;
import com.chunqiu.mrjuly.common.easemob.server.example.comm.huanxin;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.BeanValidators;
import com.chunqiu.mrjuly.common.utils.StringUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.utils.excel.ExportExcel;
import com.chunqiu.mrjuly.common.utils.excel.ImportExcel;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.lyhoteldevicerelation.model.LyClientExport;
import com.chunqiu.mrjuly.modules.lyhoteldevicerelation.model.LyCodeExport;
import com.chunqiu.mrjuly.modules.lyhoteldevicerelation.model.LyHotelDeviceRelation;
import com.chunqiu.mrjuly.modules.lyhoteldevicerelation.service.LyHotelDeviceRelationService;
import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;
import java.util.ArrayList;
import java.util.List;

/**
 * 外壳编号Controller 1.5版本
 * @author 周天
 * @version 2019-06-11
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/lyhoteldevicerelation/lyHotelDeviceRelation")
public class LyHotelDeviceRelationController extends BaseController {

	@Autowired
	private LyHotelDeviceRelationService lyHotelDeviceRelationService;
	
	/**
	 * @Description：外壳编号列表页面
	 * @author 周天
	 */
	@Log("打开外壳编号列表页面")
	@RequestMapping("index")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public String index(){
		return "lyhoteldevicerelation/lyHotelDeviceRelationList";
	}
	
	/**
	 * @Description：外壳编号列表数据
	 * @author 周天
	 */
	@Log("获取外壳编号列表数据")
	@RequestMapping("list")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public Grid list(LyHotelDeviceRelation lyHotelDeviceRelation, GridParam param) {
		return lyHotelDeviceRelationService.findPage(lyHotelDeviceRelation, param);
	}
	/**
	 * @Description：外壳编号表单页面--新增/编辑
	 * @author 周天
	 */
	@Log("打开外壳编号表单页面--新增/编辑")
	@RequestMapping(value = "form")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public String form(LyHotelDeviceRelation lyHotelDeviceRelation, ModelMap model) {
		lyHotelDeviceRelation = lyHotelDeviceRelationService.get(lyHotelDeviceRelation.getId());
		model.addAttribute("lyHotelDeviceRelation", lyHotelDeviceRelation);
		List<HotelInfo> hotelInfoList = lyHotelDeviceRelationService.hotelCodeList();
		model.addAttribute("hotelInfoList", hotelInfoList);
		return "lyhoteldevicerelation/lyHotelDeviceRelationForm";
	}
	/**
	 * @Description：外壳编号表单页面--新增/编辑
	 * @author 周天
	 */
	@Log("打开外壳编号表单页面--新增/编辑")
	@RequestMapping(value = "formAll")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public String formAll(LyHotelDeviceRelation lyHotelDeviceRelation, ModelMap model) {
		model.addAttribute("lyHotelDeviceRelation", lyHotelDeviceRelation);
		List<HotelInfo> hotelInfoList = lyHotelDeviceRelationService.hotelCodeList();
		model.addAttribute("hotelInfoList", hotelInfoList);
		return "lyhoteldevicerelation/lyHotelDeviceRelationForm";
	}

	/**
	 * @Description：外壳编号新增/编辑 保存方法
	 * @author 周天
	 */
	@Log("新增/编辑外壳编号")
	@RequestMapping("saveLyHotelDeviceRelation")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:save")
	public String saveLyHotelDeviceRelation(LyHotelDeviceRelation lyHotelDeviceRelation, ModelMap model){
		try{
			if (!"".equals(lyHotelDeviceRelation.getIdList())){
				List<LyHotelDeviceRelation> lyHotelDeviceRelationList = new ArrayList<>();
				String[] idStr = lyHotelDeviceRelation.getIdList().split(",");
				for (int i = 0;i<idStr.length;i++){
					LyHotelDeviceRelation hotelDeviceRelation = new LyHotelDeviceRelation();
					hotelDeviceRelation.setId(Long.parseLong(idStr[i]));
					hotelDeviceRelation.setHotelId(lyHotelDeviceRelation.getHotelId());
					lyHotelDeviceRelationList.add(hotelDeviceRelation);
				}
				lyHotelDeviceRelationService.insertHotelCodeIdByList(lyHotelDeviceRelationList,lyHotelDeviceRelation);
			}else {
				lyHotelDeviceRelationService.save(lyHotelDeviceRelation);
			}

		}catch(Exception e){
			log.error("保存失败！ msg={}", e.getMessage(), e);

			model.addAttribute("error", "保存失败！");
			return form(lyHotelDeviceRelation, model);
		}
		return successPath;
	}
	/**
	 * @Description：外壳编号数据删除方法
	 * @author 周天
	 */
	@Log("删除外壳编号")
	@RequestMapping("delLyHotelDeviceRelation")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:del")
	public Json delLyHotelDeviceRelation(LyHotelDeviceRelation lyHotelDeviceRelation){
		Json json = new Json();
		try{
			lyHotelDeviceRelationService.delete(lyHotelDeviceRelation);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("删除失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("删除失败！");
		}
		return json;
	}

	/**
	 * 下载导入数据模板
	 *
	 * @param response
	 * @param map
	 * @return
	 */
	@RequestMapping("template")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public void importFileTemplate(HttpServletResponse response, ModelMap map) {
		try {
			String fileName = "设备外壳编码数据导入模板.xlsx";
			List<LyCodeExport> list = Lists.newArrayList();
			LyCodeExport vo = new LyCodeExport();
			vo.setUniqueEncoding("ceshibianma1");
			vo.setType(1);
			list.add(vo);
			LyCodeExport vo1 = new LyCodeExport();
			vo1.setUniqueEncoding("ceshibianma2");
			vo1.setType(2);
			list.add(vo1);
			new ExportExcel("设备外壳编码数据", LyCodeExport.class, 2).setDataList(list).write(response, fileName).dispose();
		} catch (Exception e) {
			addMessage(map, "导入模板下载失败！失败信息：" + e.getMessage());
		}
	}


	/**
	 * 导入设备编码
	 * @param file
	 * @return
	 */
	@RequestMapping(value = "import", method = RequestMethod.POST)
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:save")
	public Json importFile(MultipartFile file) {
		Json json = new Json();
		try {
			int successNum = 0;     //导入成功条数计数器
			int failureNum = 0;     //导入失败条数计数器
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<LyCodeExport> list = ei.getDataList(LyCodeExport.class);
			List<LyCodeExport> codeExportList = new ArrayList<>();
			if (list.size() > 0){
				//创建IM用户list
				List<RegUser> regUserList = new ArrayList<>();
				for (int i = 0;i<list.size();i++) {
					if (StringUtils.isNotBlank(list.get(i).getUniqueEncoding())){
						RegUser regUser = new RegUser();
						regUser.setUsername(list.get(i).getUniqueEncoding());
						regUser.setPassword("666666");
						regUserList.add(regUser);
						list.get(i).preInsert();
						try {
							BeanValidators.validateWithException(validator, list.get(i).getUniqueEncoding());    //通过对象上注解验证数据完整性
							/*   System.out.print("外壳编码"+ vo.getUniqueEncoding() );
							 */   successNum ++;
							codeExportList.add(list.get(i));
						} catch (ConstraintViolationException ex) {
							ex.printStackTrace();
							failureNum ++;
						} catch (Exception ex) {
							ex.printStackTrace();
							failureNum ++;
						}
					}
				}
				//新增外壳设备编号
				lyHotelDeviceRelationService.insertHotelCodeList(codeExportList);
				//创建IM用户
				huanxin.reg(regUserList);
			}
			if (failureNum > 0) {
				json.setSuccess(false);
				json.setMsg("成功导入 " + successNum + " 条demo，失败" + + failureNum + " 条demo");
				return json;
			}
			json.setSuccess(true);
			json.setMsg("已成功导入 " + successNum + " 条demo");
			return json;
		} catch (Exception e) {
			e.printStackTrace();

			json.setSuccess(false);
			json.setMsg("导入demo失败");
		}
		return json;
	}


	/**
	 * @Description：解除关联
	 * @author 周天
	 */
	@Log("解除关联")
	@RequestMapping("releaseOfAssociation")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:save")
	public Json releaseOfAssociation(LyHotelDeviceRelation lyHotelDeviceRelation){
		Json json = new Json();
		try{
			lyHotelDeviceRelationService.updateHotelIdById(lyHotelDeviceRelation);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("解除失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("解除失败！");
		}
		return json;
	}

	/**
	 * @Description：全部设备管理界面
	 * @author 周天
	 */
	@Log("打开全部设备管理界面")
	@RequestMapping("allIndex")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public String allIndex(){
		return "lyhoteldevicerelation/lyAllEquipmentManagementList";
	}

	/**
	 * @Description：外壳编号列表数据
	 * @author 周天
	 */
	@Log("获取全部设备管理列表数据")
	@RequestMapping("allList")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public Grid allList(LyHotelDeviceRelation lyHotelDeviceRelation, GridParam param) {
		return lyHotelDeviceRelationService.allFindPage(lyHotelDeviceRelation, param);
	}

	/**
	 * @Description：休眠，激活设备
	 * @author 周天
	 */
	@Log("休眠，激活设备")
	@RequestMapping("updateDeviceStatus")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:save")
	public Json updateDeviceStatus(LyHotelDeviceRelation lyHotelDeviceRelation){
		Json json = new Json();
		try{
			lyHotelDeviceRelationService.updateDeviceStatusById(lyHotelDeviceRelation);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("更新失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("更新失败！");
		}
		return json;
	}

	/**
	 * @Description：客户端设备管理界面
	 * @author 周天
	 */
	@Log("打开客户端设备管理界面")
	@RequestMapping("deviceIndex")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public String deviceIndex(){
		return "lyhoteldevicerelation/lyClientDeviceManagementList";
	}


	/**
	 * @Description：外壳编号列表数据
	 * @author 周天
	 */
	@Log("获取客户端设备管理列表数据")
	@RequestMapping("clientList")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public Grid clientList(LyHotelDeviceRelation lyHotelDeviceRelation, GridParam param) {
		lyHotelDeviceRelation.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		return lyHotelDeviceRelationService.clientFindPage(lyHotelDeviceRelation, param);
	}

	/**
	 * @Description：解除
	 * @author 周天
	 */
	@Log("解除设备")
	@RequestMapping("updateDeviceRelieveStatus")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:save")
	public Json updateDeviceRelieveStatus(LyHotelDeviceRelation lyHotelDeviceRelation){
		Json json = new Json();
		try{
			lyHotelDeviceRelationService.updateDeviceRelieveStatusById(lyHotelDeviceRelation);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("更新失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("更新失败！");
		}
		return json;
	}

	/**
	 * @Description：多条解除
	 * @author 周天
	 */
	@Log("多条解除设备")
	@RequestMapping("updateDeviceRelieveListStatus")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:save")
	public Json updateDeviceRelieveListStatus(LyHotelDeviceRelation lyHotelDeviceRelation){
		Json json = new Json();
		try{
			String [] idList = lyHotelDeviceRelation.getIdList().split(",");
			List<LyHotelDeviceRelation> lyHotelDeviceRelationList = new ArrayList<>();
			for (int i = 0;i<idList.length;i++){
				LyHotelDeviceRelation hotelDeviceRelation = new LyHotelDeviceRelation();
				hotelDeviceRelation.setId(Long.parseLong(idList[i]));
				lyHotelDeviceRelationList.add(hotelDeviceRelation);
			}
			lyHotelDeviceRelationService.updateDeviceRelieveStatusByIdList(lyHotelDeviceRelationList);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("更新失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("更新失败！");
		}
		return json;
	}

	/**
	 * @Description：关联客房界面
	 * @author 周天
	 */
	@Log("打开客户端设备管理关联客房界面")
	@RequestMapping("associatedRoomsIndex")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public String associatedRoomsIndex(LyHotelDeviceRelation lyHotelDeviceRelation,ModelMap map){
		map.addAttribute("lyHotelDeviceRelation",lyHotelDeviceRelation);
		return "lyhoteldevicerelation/lyAssociatedRoomsForm";
	}


	/**
	 *
	 * 保存客房号
	 * @param lyHotelDeviceRelation
	 * @param model
	 * @return
	 */
	@Log("保存客房号")
	@RequestMapping("saveLyHotelRooms")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:save")
	public String saveLyHotelRooms(LyHotelDeviceRelation lyHotelDeviceRelation, ModelMap model){
		try{
			//判断当前酒店下是否有重复的客房号
			LyHotelDeviceRelation relation = lyHotelDeviceRelationService.getLyHotelDeviceRelationById(lyHotelDeviceRelation);
			if(relation != null){
				model.addAttribute("error", "客房号已存在！");
				return associatedRoomsIndex(lyHotelDeviceRelation, model);
			}else {
				if (lyHotelDeviceRelation.getCode().length() == 1){
					lyHotelDeviceRelation.setCode("000"+lyHotelDeviceRelation.getCode());
				}else if (lyHotelDeviceRelation.getCode().length() == 2){
					lyHotelDeviceRelation.setCode("00"+lyHotelDeviceRelation.getCode());
				}else if (lyHotelDeviceRelation.getCode().length() == 3){
					lyHotelDeviceRelation.setCode("0"+lyHotelDeviceRelation.getCode());
				}else if (lyHotelDeviceRelation.getCode().length() == 4){
					lyHotelDeviceRelation.setCode(lyHotelDeviceRelation.getCode());
				}
				lyHotelDeviceRelationService.updateClientCodeById(lyHotelDeviceRelation);
			}

		}catch(Exception e){
			model.addAttribute("error", "保存失败！");
			return associatedRoomsIndex(lyHotelDeviceRelation, model);
		}
		return successPath;
	}

	/**
	 * 下载未关联客房的客户端编号
	 *
	 * @param response
	 * @param map
	 * @return
	 */
	@RequestMapping("downloadClient")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public void downloadClient(HttpServletResponse response, ModelMap map) {
		try {
			String fileName = "客房号导入模板.xlsx";
			LyHotelDeviceRelation lyHotelDeviceRelation = new LyHotelDeviceRelation();
			lyHotelDeviceRelation.setHotelId(UserUtils.getUser().getHotelCodeId());
			List<LyClientExport> list = lyHotelDeviceRelationService.getClientExportListByHotelId(lyHotelDeviceRelation);
			new ExportExcel("客房号导入数据", LyClientExport.class, 2).setDataList(list).write(response, fileName).dispose();
		} catch (Exception e) {
			addMessage(map, "导入模板下载失败！失败信息：" + e.getMessage());
		}
	}


	/**
	 * 导入客房号
	 * @param file
	 * @return
	 */
	@RequestMapping(value = "importClientExcel", method = RequestMethod.POST)
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:save")
	public Json importClientExcel(MultipartFile file) {
		Json json = new Json();
		try {
			int successNum = 0;     //导入成功条数计数器
			int failureNum = 0;     //导入失败条数计数器
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<LyClientExport> list = ei.getDataList(LyClientExport.class);
			for (int i = 0;i<list.size();i++){
				//字符串长度
				Integer code = list.get(i).getCode().length();
				//客房号是否为纯数字
				boolean result = list.get(i).getCode().matches("[0-9]+");
				if (code <= 4 && code >= 1 && result == true ){
					//外壳编号是否已绑定客房号
					LyHotelDeviceRelation lyHotelDeviceRelation = new LyHotelDeviceRelation();
					lyHotelDeviceRelation.setHotelId(UserUtils.getUser().getHotelCodeId());
					lyHotelDeviceRelation.setDeviceCoding(list.get(i).getDeviceCoding());
					lyHotelDeviceRelation = lyHotelDeviceRelationService.getClientNumberByDeviceCoding(lyHotelDeviceRelation);
					//客房号是否有重复
					LyHotelDeviceRelation deviceRelation = new LyHotelDeviceRelation();
					deviceRelation.setHotelId(UserUtils.getUser().getHotelCodeId());
					deviceRelation.setCode(list.get(i).getCode());
					deviceRelation = lyHotelDeviceRelationService.getLyHotelDeviceRelationById(deviceRelation);
					if (lyHotelDeviceRelation == null && deviceRelation == null){
						//更新客房号
						LyHotelDeviceRelation relation = new LyHotelDeviceRelation();
						relation.setDeviceCoding(list.get(i).getDeviceCoding());
						if (list.get(i).getCode().length() == 1){
							relation.setCode("000"+list.get(i).getCode());
						}else if (list.get(i).getCode().length() == 2){
							relation.setCode("00"+list.get(i).getCode());
						}else if (list.get(i).getCode().length() == 3){
							relation.setCode("0"+list.get(i).getCode());
						}else if (list.get(i).getCode().length() == 4){
							relation.setCode(list.get(i).getCode());
						}
						lyHotelDeviceRelationService.updateClientCodeByDeviceCoding(relation);
						successNum ++;
					}
				}
			}
			json.setSuccess(true);
			json.setMsg("已成功导入 " + successNum + " 条");
			return json;
		} catch (Exception e) {
			e.printStackTrace();
			json.setSuccess(false);
			json.setMsg("导入失败");
		}
		return json;
	}


	/**
	 * @Description：服务端设备管理界面
	 * @author 周天
	 */
	@Log("打开客户端设备管理界面")
	@RequestMapping("serverIndex")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public String serverIndex(LyHotelDeviceRelation lyHotelDeviceRelation,ModelMap map){
		lyHotelDeviceRelation.setHotelId(UserUtils.getUser().getHotelCodeId());
		List<LyHotelDeviceRelation> lyHotelDeviceRelationList = lyHotelDeviceRelationService.getDepartmentListByHotelId(lyHotelDeviceRelation);
		map.addAttribute("lyHotelDeviceRelationList",lyHotelDeviceRelationList);
		return "lyhoteldevicerelation/lyServerDeviceManagementList";
	}


	/**
	 * @Description：获取服务端设备管理列表数据
	 * @author 周天
	 */
	@Log("获取服务端设备管理列表数据")
	@RequestMapping("serverList")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public Grid serverList(LyHotelDeviceRelation lyHotelDeviceRelation, GridParam param) {
		lyHotelDeviceRelation.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		return lyHotelDeviceRelationService.serverFindPage(lyHotelDeviceRelation, param);
	}


	/**
	 * @Description：服务端解除
	 * @author 周天
	 */
	@Log("服务端解除部门")
	@RequestMapping("updateServerRelieve")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:save")
	public Json updateServerRelieve(LyHotelDeviceRelation lyHotelDeviceRelation){
		Json json = new Json();
		try{
			lyHotelDeviceRelationService.updateServerRelieveById(lyHotelDeviceRelation);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("解除失败！ msg={}", e.getMessage(), e);
			json.setSuccess(false);
			json.setMsg("解除失败！");
		}
		return json;
	}


	/**
	 * @Description：关联部门界面
	 * @author 周天
	 */
	@Log("打开关联部门界面")
	@RequestMapping("associatedDepartmentsIndex")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public String associatedDepartmentsIndex(LyHotelDeviceRelation lyHotelDeviceRelation,ModelMap map){
		lyHotelDeviceRelation.setHotelId(UserUtils.getUser().getHotelCodeId());
		List<LyHotelDeviceRelation> lyHotelDeviceRelationList = lyHotelDeviceRelationService.getDepartmentListByHotelId(lyHotelDeviceRelation);
		map.addAttribute("lyHotelDeviceRelationList",lyHotelDeviceRelationList);
		return "lyhoteldevicerelation/lyAssociatedDepartmentsForm";
	}


	/**
	 *
	 * 保存客房号
	 * @param lyHotelDeviceRelation
	 * @param model
	 * @return
	 */
	@Log("保存部门号")
	@RequestMapping("saveLyHotelDepartments")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:save")
	public String saveLyHotelDepartments(LyHotelDeviceRelation lyHotelDeviceRelation, ModelMap model){
		try{
			//判断当前酒店的部门里是否有相同的部门号
			LyHotelDeviceRelation relation = lyHotelDeviceRelationService.getServerDepartmentNumerByHotelId(lyHotelDeviceRelation);
			if (relation != null){
				model.addAttribute("error", "部门号已存在！");
				return associatedDepartmentsIndex(lyHotelDeviceRelation, model);
			}else {
				if (lyHotelDeviceRelation.getCode().length() == 1){
					lyHotelDeviceRelation.setCode("0"+lyHotelDeviceRelation.getCode());
				}else if (lyHotelDeviceRelation.getCode().length() == 2){
					lyHotelDeviceRelation.setCode(lyHotelDeviceRelation.getCode());
				}
				lyHotelDeviceRelationService.updateServerDepartmentCodeById(lyHotelDeviceRelation);
			}

		}catch(Exception e){
			model.addAttribute("error", "保存失败！");
			return associatedDepartmentsIndex(lyHotelDeviceRelation, model);
		}
		return successPath;
	}


	/**
	 * @Description：服务端多条解除设备
	 * @author 周天
	 */
	@Log("服务端多条解除设备")
	@RequestMapping("updateServerRelieveListStatus")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:save")
	public Json updateServerRelieveListStatus(LyHotelDeviceRelation lyHotelDeviceRelation){
		Json json = new Json();
		try{
			String [] idList = lyHotelDeviceRelation.getIdList().split(",");
			List<LyHotelDeviceRelation> lyHotelDeviceRelationList = new ArrayList<>();
			for (int i = 0;i<idList.length;i++){
				LyHotelDeviceRelation hotelDeviceRelation = new LyHotelDeviceRelation();
				hotelDeviceRelation.setId(Long.parseLong(idList[i]));
				lyHotelDeviceRelationList.add(hotelDeviceRelation);
			}
			lyHotelDeviceRelationService.updateDepartmentsDismantledByIdList(lyHotelDeviceRelationList);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("解除失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("解除失败！");
		}
		return json;
	}


	/**
	 * @Description：关联部门界面
	 * @author 周天
	 */
	@Log("打开酒店全部设备管理界面")
	@RequestMapping("allHotelIndex")
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public String allHotelIndex(){
		return "lyhoteldevicerelation/lyAllHotelEquipmentManagementList";
	}


	/**
	 * @Description：外壳编号列表数据
	 * @author 周天
	 */
	@Log("获取外壳编号列表数据")
	@RequestMapping("allHotelList")
	@ResponseBody
	@RequiresPermissions("lyhoteldevicerelation:lyHotelDeviceRelation:view")
	public Grid allHotelList(LyHotelDeviceRelation lyHotelDeviceRelation, GridParam param) {
		lyHotelDeviceRelation.setHotelId(UserUtils.getUser().getHotelCodeId());
		return lyHotelDeviceRelationService.allHotelListFindPage(lyHotelDeviceRelation, param);
	}
}