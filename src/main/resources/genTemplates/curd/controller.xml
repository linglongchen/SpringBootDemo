<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/modules/${moduleName}/controller/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
package ${packageName}.modules.${moduleName}.controller<#if subModuleName != "">.${subModuleName}</#if>;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import lombok.extern.slf4j.Slf4j;

import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import ${packageName}.modules.${moduleName}.model<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.modules.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Slf4j
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;
	
	/**
	 * @Description：${functionName}列表页面
	 * @author ${functionAuthor}
	 */
	@Limit(key = "${urlPrefix}index", period = 30, count = 5, name = "${functionName}列表页面", prefix = "limit")
	@Log("打开${functionName}列表页面")
	@RequestMapping("index")
	@RequiresPermissions("${moduleName}:${className}:view")
	public String index(){
		return "/${viewPrefix}List";
	}
	
	/**
	 * @Description：${functionName}列表数据
	 * @author ${functionAuthor}
	 */
	@Limit(key = "${urlPrefix}list", period = 30, count = 5, name = "${functionName}列表数据", prefix = "limit")
	@Log("获取${functionName}列表数据")
	@RequestMapping("list")
	@ResponseBody
	@RequiresPermissions("${moduleName}:${className}:view")
	public Grid list(${ClassName} ${className}, GridParam param) {
		return ${className}Service.findPage(${className}, param);
	}
	/**
	 * @Description：${functionName}表单页面--新增/编辑
	 * @author ${functionAuthor}
	 */
	@Limit(key = "${urlPrefix}form", period = 30, count = 5, name = "${functionName}-新增/编辑页面", prefix = "limit")
	@Log("打开${functionName}表单页面--新增/编辑")
	@RequestMapping(value = "form")
	@RequiresPermissions("${moduleName}:${className}:view")
	public String form(${ClassName} ${className}, ModelMap model) {
		<#list table.columnList as c>
		<#-- 如果不是基类属性 -->
			<#if c.isNotBaseField && c.isNull != '1'>
		if(${className}.get${c.simpleJavaField?cap_first}() == null && ${className}.getId() != null){
				<#break>
			</#if>
		</#list>
			${className} = ${className}Service.get(${className}.getId());
		}
		model.addAttribute("${className}", ${className});
		return "/${viewPrefix}Form";
	}
	/**
	 * @Description：${functionName}新增/编辑 保存方法
	 * @author ${functionAuthor}
	 */
	@Limit(key = "${urlPrefix}save${ClassName}", period = 30, count = 5, name = "${functionName}-保存页面", prefix = "limit")
	@Log("新增/编辑${functionName}")
	@RequestMapping("save${ClassName}")
	@RequiresPermissions("${moduleName}:${className}:save")
	public String save${ClassName}(${ClassName} ${className}, ModelMap model){
		try{
		<#list table.columnList as c>
			<#if c.showType == 'editor'>
			${className}.set${c.simpleJavaField?cap_first}(StringEscapeUtils.unescapeHtml4(${className}.get${c.simpleJavaField?cap_first}()));
			</#if>
		</#list>
			${className}Service.save(${className});
		}catch(Exception e){
			log.error("保存失败！ msg={}", e.getMessage(), e);

			model.addAttribute("error", "保存失败！");
			return form(${className}, model);
		}
		return successPath;
	}
	/**
	 * @Description：${functionName}数据删除方法
	 * @author ${functionAuthor}
	 */
	@Limit(key = "${urlPrefix}del${ClassName}", period = 30, count = 5, name = "${functionName}-删除", prefix = "limit")
	@Log("删除${functionName}")
	@RequestMapping("del${ClassName}")
	@ResponseBody
	@RequiresPermissions("${moduleName}:${className}:del")
	public Json del${ClassName}(${ClassName} ${className}){
		Json json = new Json();
		try{
			${className}Service.delete(${className});
			json.setSuccess(true);
		}catch(Exception e){
			log.error("删除失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("删除失败！");
		}
		return json;
	}

}]]>
	</content>
</template>