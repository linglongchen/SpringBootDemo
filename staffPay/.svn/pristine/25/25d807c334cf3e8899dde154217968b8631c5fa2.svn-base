package com.chunqiu.mrjuly.modules.communicationrecordinfo.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.DateUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.utils.excel.ExportExcel;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.communicationrecordinfo.model.CommunicationRecordInfo;
import com.chunqiu.mrjuly.modules.communicationrecordinfo.model.CommunicationRecordVo;
import com.chunqiu.mrjuly.modules.communicationrecordinfo.service.CommunicationRecordInfoService;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.List;

/**
 * 通讯记录Controller
 * @author 周天
 * @version 2019-03-13
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/communicationrecordinfo/communicationRecordInfo")
public class CommunicationRecordInfoController extends BaseController {

	@Autowired
	private CommunicationRecordInfoService communicationRecordInfoService;

	/**
	 * @Description：通讯记录列表页面
	 * @author 周天
	 */
	@Log("打开通讯记录列表页面")
	@RequestMapping("index")
	@RequiresPermissions("communicationrecordinfo:communicationRecordInfo:view")
	public String index(){
		return "communicationrecordinfo/communicationRecordInfoList";
	}

	/**
	 * @Description：通讯记录列表数据
	 * @author 周天
	 */
    @Log("获取通讯记录列表数据")
	@RequestMapping("list")
	@ResponseBody
	@RequiresPermissions("communicationrecordinfo:communicationRecordInfo:view")
	public Grid list(CommunicationRecordInfo communicationRecordInfo, GridParam param) {
    	communicationRecordInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		return communicationRecordInfoService.findPage(communicationRecordInfo, param);
	}
	/**
	 * @Description：通讯记录表单页面--新增/编辑
	 * @author 周天
	 */
	@Log("打开通讯记录表单页面--新增/编辑")
	@RequestMapping(value = "form")
	@RequiresPermissions("communicationrecordinfo:communicationRecordInfo:view")
	public String form(CommunicationRecordInfo communicationRecordInfo, ModelMap model) {
		model.addAttribute("communicationRecordInfo", communicationRecordInfo);
		return "communicationrecordinfo/communicationRecordInfoForm";
	}

	@Log("获取通讯记录列表详情数据")
	@RequestMapping("info")
	@ResponseBody
	@RequiresPermissions("communicationrecordinfo:communicationRecordInfo:view")
	public Grid info(CommunicationRecordInfo communicationRecordInfo, GridParam param) {
		return communicationRecordInfoService.communicationRecordInfoList(communicationRecordInfo, param);
	}

	/**
	 * @Description：通讯记录新增/编辑 保存方法
	 * @author 周天
	 */
	@Log("新增/编辑通讯记录")
	@RequestMapping("saveCommunicationRecordInfo")
	@RequiresPermissions("communicationrecordinfo:communicationRecordInfo:edit")
	public String saveCommunicationRecordInfo(CommunicationRecordInfo communicationRecordInfo, ModelMap model){
		try{
			communicationRecordInfoService.save(communicationRecordInfo);
		}catch(Exception e){
			log.error("保存失败！ msg={}", e.getMessage(), e);

			model.addAttribute("error", "保存失败！");
			return form(communicationRecordInfo, model);
		}
		return successPath;
	}
	/**
	 * @Description：通讯记录数据删除方法
	 * @author 周天
	 */
	@Log("删除通讯记录")
	@RequestMapping("delCommunicationRecordInfo")
	@ResponseBody
	@RequiresPermissions("communicationrecordinfo:communicationRecordInfo:edit")
	public Json delCommunicationRecordInfo(CommunicationRecordInfo communicationRecordInfo){
		Json json = new Json();
		try{
			communicationRecordInfoService.delete(communicationRecordInfo);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("删除失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("删除失败！");
		}
		return json;
	}


	/**
	 * 单条导出数据
	 *
	 * @return
	 */
	@RequestMapping(value = "export", method = RequestMethod.POST)
	@ResponseBody
	public String exportFile(HttpServletRequest request, HttpServletResponse response,CommunicationRecordInfo communicationRecordInfo) {
		try {
			if (communicationRecordInfo.getIdList() != null){
				List<String> stringList = new ArrayList<>();
				String [] idList = communicationRecordInfo.getIdList().split(",");
				for (int i = 0;i<idList.length;i++){
					stringList.add(idList[i]);
				}
				communicationRecordInfo.setStringList(stringList);
			}

			String fileName = "通讯记录数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
			List<CommunicationRecordVo> list = new ArrayList<CommunicationRecordVo>();
			List<CommunicationRecordInfo> communicationRecordInfoList = communicationRecordInfoService.communicationRecordInfos(communicationRecordInfo);
			for (CommunicationRecordInfo communicationRecordInfo1 :communicationRecordInfoList){
					CommunicationRecordVo communicationRecordVo = new CommunicationRecordVo();
					communicationRecordVo.setCodeName(communicationRecordInfo.getCodeName());
					communicationRecordVo.setCreateDate(String.valueOf(communicationRecordInfo1.getCreateDate()));
					communicationRecordVo.setStatus(communicationRecordInfo1.getCodeName());
					communicationRecordVo.setTalkTime(communicationRecordInfo1.getTalkTime());
					list.add(communicationRecordVo);
			}

			new ExportExcel("通讯记录数据", CommunicationRecordVo.class).setDataList(list).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			request.setAttribute("error", "导出数据失败");
		}
		return null;
	}

	/**
	 * 单条导出数据
	 *
	 * @return
	 */
	@RequestMapping(value = "exportList", method = RequestMethod.POST)
	@ResponseBody
	public String exportList(HttpServletRequest request, HttpServletResponse response,CommunicationRecordInfo communicationRecordInfo) {
		try {
			if (communicationRecordInfo.getServerSideIdList() != null){
				List<String> serverStringList = new ArrayList<>();
				String [] idList = communicationRecordInfo.getServerSideIdList().split(",");
				for (int i = 0;i<idList.length;i++){
					serverStringList.add(idList[i]);
				}
				communicationRecordInfo.setServerSideIdStr(serverStringList);
			}

			if (communicationRecordInfo.getClientIdList() != null){
				List<String> clientStringList = new ArrayList<>();
				String [] idList = communicationRecordInfo.getClientIdList().split(",");
				for (int i = 0;i<idList.length;i++){
					clientStringList.add(idList[i]);
				}
				communicationRecordInfo.setClientIdStr(clientStringList);
			}

			String fileName = "通讯记录数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
			List<CommunicationRecordVo> list = new ArrayList<CommunicationRecordVo>();
			communicationRecordInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
			List<CommunicationRecordInfo> communicationRecordInfoList = communicationRecordInfoService.exportList(communicationRecordInfo);
			for (CommunicationRecordInfo communicationRecordInfo1 :communicationRecordInfoList){
				CommunicationRecordVo communicationRecordVo = new CommunicationRecordVo();
				communicationRecordVo.setCodeName(communicationRecordInfo1.getCodeName());
				communicationRecordVo.setCreateDate(String.valueOf(communicationRecordInfo1.getCreateDate()));
				communicationRecordVo.setStatus(communicationRecordInfo1.getCallRecord());
				communicationRecordVo.setTalkTime(communicationRecordInfo1.getTalkTime());
				list.add(communicationRecordVo);
			}

			new ExportExcel("通讯记录数据", CommunicationRecordVo.class).setDataList(list).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			request.setAttribute("error", "导出数据失败");
		}
		return null;
	}

	@Log("新增通讯记录")
	@RequestMapping("insertRecord")
	@RequiresPermissions("communicationrecordinfo:communicationRecordInfo:edit")
	public Json insertRecord(CommunicationRecordInfo communicationRecordInfo){
		Json json = new Json();
		communicationRecordInfoService.insertRecord(communicationRecordInfo);
		json.setSuccess(true);
		return json;
	}


}
