package com.chunqiu.mrjuly.common.utils;

import com.chunqiu.mrjuly.modules.advertiserinfo.model.AdvertiserInfo;
import com.chunqiu.mrjuly.modules.advertiserinfo.service.AdvertiserInfoService;
import com.chunqiu.mrjuly.modules.advertisingcart.model.AdvertisingCart;
import com.chunqiu.mrjuly.modules.advertisingcart.service.AdvertisingCartService;
import com.chunqiu.mrjuly.modules.advertisingorder.model.AdvertisingOrder;
import com.chunqiu.mrjuly.modules.advertisingorder.service.AdvertisingOrderService;
import com.chunqiu.mrjuly.modules.hotelinfo.model.LyHotelDeviceActivate;
import com.chunqiu.mrjuly.modules.hotelinfo.model.LyHotelUserPrize;
import com.chunqiu.mrjuly.modules.hotelinfo.service.HotelInfoService;
import com.chunqiu.mrjuly.modules.hotelinfo.service.LyHotelDeviceActivateService;
import com.chunqiu.mrjuly.modules.hotelinfo.service.LyHotelUserPrizeService;
import com.chunqiu.mrjuly.modules.install.model.NoticeInfo;
import com.chunqiu.mrjuly.modules.install.model.PrizeInfo;
import com.chunqiu.mrjuly.modules.install.model.SysParameter;
import com.chunqiu.mrjuly.modules.install.service.PrizeInfoService;
import com.chunqiu.mrjuly.modules.install.service.SysParameterService;
import com.chunqiu.mrjuly.modules.mybill.model.MyBillInfo;
import com.chunqiu.mrjuly.modules.mybill.service.MyBillInfoService;
import com.chunqiu.mrjuly.modules.shopinfo.model.ShopInfo;
import com.chunqiu.mrjuly.modules.shopinfo.service.ShopInfoService;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.Set;


@SpringBootApplication
@EnableScheduling
@Transactional
public class Task {
    @Autowired
    private AdvertisingOrderService advertisingOrderService;
    @Autowired
    private AdvertisingCartService advertisingCartService;
    @Autowired
    private ShopInfoService shopInfoService;
    @Autowired
    private AdvertiserInfoService advertiserInfoService;
    @Autowired
    private MyBillInfoService myBillInfoService;
    @Autowired
    private HotelInfoService hotelInfoService;
    @Autowired
    private PrizeInfoService prizeInfoService;
    @Autowired
    private SysParameterService sysParameterService;
    @Autowired
    private LyHotelDeviceActivateService hotelDeviceActivateService;
    @Autowired
    private LyHotelUserPrizeService hotelUserPrizeService;

    //定时任务 判断当前竞拍中的订单在当天23点59分之前是否有最大的
    @Scheduled(cron = "00 59 23 * * ?")
    public void Auction() {
      try{
        System.out.println("----------------------开始自动竞拍--------------------");
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
        String nowdate = df.format(new Date());
        AdvertisingOrder advertisingOrder = new AdvertisingOrder();
        advertisingOrder.setDate(nowdate);
        //当天竞拍的订单
        List<AdvertisingOrder> advertisingOrderList = advertisingOrderService.advertisingOrderList(advertisingOrder);
        if (advertisingOrderList.size() > 0) {
            for (AdvertisingOrder order : advertisingOrderList) {
                //判断当前订单是竞拍中的状态
                if (order.getAuctionStatus() == 2) {
                    //当前订单是图文类型
                    if (order.getDeliveryType() == 1) {
                        //订单为当前价类型
                        if (order.getPriceType() == 1) {
                            //查询当前广告位的所有最高当前价
                            AdvertisingCart advertisingCart = new AdvertisingCart();
                            advertisingCart.setUploadId(order.getUploadId());
                            advertisingCart.setHotelCodeId(order.getHotelCodeId());
                            advertisingCart.setPutInTime(order.getPutInTime());
                            //当前酒店的广告位状态为支付成功并且是待结算或者结算成功
                            Integer countSuccess = advertisingCartService.countOrderSusccessById(advertisingCart);
                            //当前广告位已被竞拍
                            if (countSuccess > 0) {
                                //更新当前订单为竞拍失败
                                order.setAuctionStatus(1);
                                order.setPayStatus(0);
                                advertisingOrderService.updateStatus(order);
                            } else {
                                //当前酒店的广告位的图文最大当前价小于我的竞拍的当前价
                                advertisingCart.setDeliveryType(order.getDeliveryType());
                                Float priceTypePrice = advertisingCartService.priceTypePrice(advertisingCart);
                                if (priceTypePrice <= order.getPriceTypePrice()) {
                                        //更新当前订单为竞拍成功,待结算状态
                                        order.setAuctionStatus(3);
                                        order.setPayStatus(1);
                                        advertisingOrderService.updateStatus(order);
                                } else {
                                    //更新当前订单为竞拍失败
                                    order.setAuctionStatus(1);
                                    order.setPayStatus(0);
                                    advertisingOrderService.updateStatus(order);
                                }
                            }
                        }

                        //当前是视频价类型
                    } else if (order.getDeliveryType() == 2) {
                        //订单为当前价类型
                        if (order.getPriceType() == 1) {
                            //查询当前广告位的所有最高当前价
                            AdvertisingCart advertisingCart = new AdvertisingCart();
                            advertisingCart.setUploadId(order.getUploadId());
                            advertisingCart.setHotelCodeId(order.getHotelCodeId());
                            advertisingCart.setPutInTime(order.getPutInTime());
                            //当前酒店的广告位状态为支付成功并且是待结算或者结算成功
                            Integer countSuccess = advertisingCartService.countOrderSusccessById(advertisingCart);
                            //当前广告位已被竞拍
                            if (countSuccess > 0) {
                                //更新当前订单为竞拍失败
                                order.setAuctionStatus(1);
                                order.setPayStatus(0);
                                advertisingOrderService.updateStatus(order);
                            } else {
                                //当前酒店的广告位的图文最大当前价小于我的竞拍的当前价
                                advertisingCart.setDeliveryType(order.getDeliveryType());
                                Float priceTypePrice = advertisingCartService.priceTypePrice(advertisingCart);
                                if (priceTypePrice <= order.getPriceTypePrice()) {
                                        //更新当前订单为竞拍成功,待结算状态
                                        order.setAuctionStatus(3);
                                        order.setPayStatus(1);
                                        advertisingOrderService.updateStatus(order);
                                } else {
                                    //更新当前订单为竞拍失败
                                    order.setAuctionStatus(1);
                                    order.setPayStatus(0);
                                    advertisingOrderService.updateStatus(order);
                                }
                            }
                        }
                    }
                }
            }
        }
        }catch (Exception e){
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        }
    }


    //自动结算
    @Scheduled(cron = "00 59 23 * * ?")
    public void Settlement() {
        try{
        System.out.println("----------------------开始自动结算--------------------");
        //当前时间
        SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");//设置日期格式
        //当前日期
        String nowdate = df.format(new Date());
        Calendar calendar = Calendar.getInstance();//此时打印它获取的是系统当前时间
        calendar.add(Calendar.DATE, -1);    //得到前一天
        //前一天日期
        String yestedayDate = new SimpleDateFormat("yyyy-MM-dd").format(calendar.getTime());
        AdvertisingOrder advertisingOrder = new AdvertisingOrder();
        advertisingOrder.setDate(yestedayDate);
        //系统参数
        SysParameter sysParameter = advertisingCartService.sysParameterInfo();
        //查询前一天竞拍完成待结算的订单
        List<AdvertisingOrder> advertisingOrderList = advertisingOrderService.advertisingOrderListByBefore(advertisingOrder);
        if (advertisingOrderList.size() > 0) {
            //公司编号
            String codeName = "";
            //当前人的账号余额
            double price = 0;
            //公司名称
            String name = "";
            for (AdvertisingOrder advertisingOrder1 : advertisingOrderList) {
                //在线商家
                if (advertisingOrder1.getType() == 1) {
                    ShopInfo shopInfo = shopInfoService.get(advertisingOrder1.getObjectId());
                    codeName = shopInfo.getShopNumber();
                    price = shopInfo.getAccount();
                    name = shopInfo.getShopName();
                    //广告商
                } else if (advertisingOrder1.getType() == 2) {
                    AdvertiserInfo advertiserInfo = advertiserInfoService.get(advertisingOrder1.getObjectId());
                    codeName = advertiserInfo.getAdvertiserNumber();
                    price = advertiserInfo.getAccountBalance();
                    name = advertiserInfo.getAdvertiserName();
                }

                //判断当前账号钱是否大于当前广告价格
                if (price > advertisingOrder1.getAuctionAmount()) {
                    //随机数
                    String math = System.currentTimeMillis() + "";
                    //下单编号
                    String transactionodersn = nowdate + "-" + "1" + "-" + advertisingOrder1.getAuctionAmount() + "-" + codeName + "-" + math;
                    advertisingOrder1.setTransactionodersn(transactionodersn);
                    advertisingOrder1.setCouponId(0);
                    advertisingOrder1.setTotalOrderPrice(advertisingOrder1.getAuctionAmount());
                    advertisingOrder1.setSavingMoney(0);
                    //更新订单
                    int count = advertisingOrderService.updateOrderById(advertisingOrder1);
                    if (count > 0) {
                        //扣除当前账户冻结总金额
                        AdvertisingCart advertisingCart1 = new AdvertisingCart();
                        advertisingCart1.setId(advertisingOrder1.getObjectId());
                        advertisingCart1.setType(advertisingOrder1.getType());
                        advertisingCart1.setAuctionAmount(advertisingOrder1.getAuctionAmount());
                        int updatePrice = advertisingCartService.updateUserAccount(advertisingCart1);
                        if (updatePrice > 0) {
                            //新增我的账单
                            MyBillInfo myBillInfo = new MyBillInfo();
                            myBillInfo.setBillOfOriginId(advertisingOrder1.getId().toString());
                            myBillInfo.setStatus(1);
                            myBillInfo.setRemarks("广告位结算");
                            myBillInfo.setType(advertisingOrder1.getType());
                            myBillInfo.setAmountPrice(Float.valueOf(String.valueOf(advertisingOrder1.getAuctionAmount())));
                            myBillInfo.setObjectId(advertisingOrder1.getObjectId());
                            myBillInfoService.insertBillInfo(myBillInfo);
                        }
                    }

                    //当账号钱小于当前拍卖金额
                } else {
                    //更新订单信息
                    AdvertisingOrder advertisingOrder2 = new AdvertisingOrder();
                    advertisingOrder2.setId(advertisingOrder1.getId());
                    advertisingOrder2.setAuctionStatus(1);
                    advertisingOrder2.setPayStatus(0);
                    advertisingOrderService.updateStatus(advertisingOrder2);
                    //系统参数
                    double eductAccountBalance = (sysParameter.getEductAccountBalance()) * 0.01;
                    //扣除账户的金钱
                    double auctionAmount = (advertisingOrder1.getAuctionAmount()) * eductAccountBalance;
                    //扣除当前账户冻结总金额
                    AdvertisingCart advertisingCart1 = new AdvertisingCart();
                    advertisingCart1.setId(advertisingOrder1.getObjectId());
                    advertisingCart1.setType(advertisingOrder1.getType());
                    advertisingCart1.setAuctionAmount(auctionAmount);
                    int updatePrice = advertisingCartService.updateUserAccount(advertisingCart1);
                    if (updatePrice > 0) {
                        //新增我的账单
                        MyBillInfo myBillInfo = new MyBillInfo();
                        myBillInfo.setBillOfOriginId(advertisingOrder1.getId().toString());
                        myBillInfo.setStatus(1);
                        myBillInfo.setRemarks("广告位结算");
                        myBillInfo.setType(advertisingOrder1.getType());
                        myBillInfo.setAmountPrice(Float.valueOf(String.valueOf(auctionAmount)));
                        myBillInfo.setObjectId(advertisingOrder1.getObjectId());
                        myBillInfoService.insertBillInfo(myBillInfo);
                    }
                }

            }
        }
        }catch (Exception e){
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        }
    }


    //制作广告为通过审核
    @Scheduled(cron = "00 59 23 * * ?")
    public void productionAdvertising() {
        try{
        System.out.println("----------------------开始自动审核广告通过--------------------");
        //系统参数
        SysParameter sysParameter = advertisingCartService.sysParameterInfo();
        //查询所有前两天交易完成并且没有通过审核的订单
        List<AdvertisingOrder> advertisingOrderList = advertisingOrderService.productionAdvertisingList();
        if (advertisingOrderList.size() > 0) {
            for (AdvertisingOrder advertisingOrder : advertisingOrderList) {
                //当前订单的金额的百分之
                double eductPrepayAd = sysParameter.getEductPrepayAd();
                double eductPrepayAd1 = eductPrepayAd * 0.01;
                //扣除百分之的钱
                double auctionAmount = (advertisingOrder.getAuctionAmount()) * eductPrepayAd1;
                double auctionAmount1 = advertisingOrder.getAuctionAmount() - auctionAmount;

                //返还给当前账户
                AdvertisingCart advertisingCart1 = new AdvertisingCart();
                advertisingCart1.setId(advertisingOrder.getObjectId());
                advertisingCart1.setType(advertisingOrder.getType());
                advertisingCart1.setAuctionAmount(auctionAmount1);
                int updatePrice = advertisingOrderService.rechargePrice(advertisingCart1);
                if (updatePrice > 0) {
                    //更新订单状态
                    AdvertisingOrder advertisingOrder1 = new AdvertisingOrder();
                    advertisingOrder1.setAuctionStatus(1);
                    advertisingOrder1.setPayStatus(0);
                    advertisingOrder1.setId(advertisingOrder.getId());
                    advertisingOrderService.updateStatus(advertisingOrder1);
                    //新增我的账单
                    MyBillInfo myBillInfo = new MyBillInfo();
                    myBillInfo.setBillOfOriginId(advertisingOrder.getId().toString());
                    myBillInfo.setStatus(2);
                    myBillInfo.setType(advertisingOrder.getType());
                    myBillInfo.setAmountPrice(Float.valueOf(String.valueOf(auctionAmount)));
                    myBillInfo.setObjectId(advertisingOrder.getObjectId());
                    myBillInfoService.insertBillInfo(myBillInfo);
                }
            }
        }
        }catch (Exception e){
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        }
    }

    /**
     * 请于广告申请提交后48小时内提出异议，否则视为通过内容审核
     */
    @Scheduled(cron = "00 59 23 * * ?")
    public void setState(){
        try{
        SysParameter sysParameter = new SysParameter();
        Integer time = sysParameterService.get(sysParameter).getCheckTime();
        hotelInfoService.setState(time);
        }catch (Exception e){
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        }
    }

    /**
     * 定时抽奖
     */
    @Scheduled(cron = "00 59 23 * * ?")
    public void luckDraw(){
        try {
	        //查询所有奖项
	        List<PrizeInfo> prizeInfoList = prizeInfoService.prizeInfoList();
	        //查询当前日期的激活记录
	        LyHotelDeviceActivate condition = new LyHotelDeviceActivate();
	        condition.setActivateDate(DateUtils.getNowDate());
	        List<LyHotelDeviceActivate> records = hotelDeviceActivateService.selectRecordsByCondition(condition);
	        if (CollectionUtils.isNotEmpty(prizeInfoList) && CollectionUtils.isNotEmpty(records)) {
	        	int randomNum = 0;
	        	LyHotelUserPrize insertPrize = null;
	        	LyHotelDeviceActivate win = null;
	        	PrizeInfo prizeInfo = null;
	        	NoticeInfo noticeInfo = null;
	        	Set<Long> winIds = new HashSet<Long>();
	        	Iterator<PrizeInfo> prizeIterator = prizeInfoList.iterator();
				while (prizeIterator.hasNext()) {
					//获取第一个奖品
					prizeInfo = (PrizeInfo) prizeIterator.next();
					while (true) {
						//获取所有记录中随机值
						randomNum = new Random().nextInt(records.size());
						//获取中奖记录
						win = records.get(randomNum);
						if (!winIds.contains(win.getId())) {
							break;
						}
					}
					//保存中奖记录
					insertPrize = new LyHotelUserPrize();
					insertPrize.setDeviceActivateId(win.getId());
					insertPrize.setFullName(win.getName());
					insertPrize.setHotelId(win.getHotelId());
					insertPrize.setPrizeId(prizeInfo.getId());
					hotelUserPrizeService.insertSelective(insertPrize);
					//记录中奖ID
					winIds.add(win.getId());
	                //新增客户端消息
					noticeInfo = new NoticeInfo();
	                noticeInfo.setNoticeTitle(win.getName()+"中得" + prizeInfo.getPrize()+"，奖品为" + prizeInfo.getPrizeName());
	                noticeInfo.setNoticeContent(win.getName()+"中得" + prizeInfo.getPrize()+"，奖品为" + prizeInfo.getPrizeName());
	                noticeInfo.setTarget(4);
	                noticeInfo.setType(3);
	                noticeInfo.setRoomNumber(win.getRoomId().toString());
	                noticeInfo.setHotelCodeId(win.getHotelId());
	                prizeInfoService.NoticeInfo(noticeInfo);
	                //新增酒店平台消息
	                noticeInfo.setTarget(1);
	                noticeInfo.setType(2);
	                noticeInfo.setHotelCodeId(null);
	                noticeInfo.setObjectId(win.getHotelId());
	                noticeInfo.setTimeSn(System.currentTimeMillis()+"");
	                noticeInfo.setRoomNumber(null);
	                noticeInfo.setNoticeRoll(1);
	                //系统当前时间
	                Calendar calendar = Calendar.getInstance();
	                //得到后一天
	                calendar.add(Calendar.DATE, 1);    
	                noticeInfo.setCircularEndTimeTwo(DateUtils.formatDate(calendar.getTime()));
	                prizeInfoService.NoticeInfo(noticeInfo);
					//中奖数与记录数一致时，结束抽奖
					if (winIds.size() == records.size()) {
						break;
					}
				}
			}
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        }
    }

}

