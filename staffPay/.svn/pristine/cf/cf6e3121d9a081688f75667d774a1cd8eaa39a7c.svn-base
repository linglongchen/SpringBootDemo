package com.chunqiu.mrjuly.modules.invoiceinfo.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.accountrecharge.model.AccountRecharge;
import com.chunqiu.mrjuly.modules.invoiceinfo.model.InvoiceInfo;
import com.chunqiu.mrjuly.modules.invoiceinfo.service.InvoiceInfoService;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * 发票管理Controller
 *
 * @author 周天
 * @version 2019-03-15
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/invoiceinfo/invoiceInfo")
public class InvoiceInfoController extends BaseController {

    @Autowired
    private InvoiceInfoService invoiceInfoService;

    /**
     * @Description：发票管理列表页面
     * @author 周天
     */
    @Log("发票管理列表页面")
    @RequestMapping("index")
    @RequiresPermissions("invoiceinfo:invoiceInfo:view")
    public String index() {
        return "invoiceinfo/invoiceInfoList";
    }


    @Log("打开开具页面")
    @RequestMapping("openingIndex")
    @RequiresPermissions("invoiceinfo:invoiceInfo:view")
    public String openingIndex(InvoiceInfo invoiceInfo, ModelMap modelMap) {
        modelMap.addAttribute("invoiceInfo", invoiceInfo);
        return "invoiceinfo/invoiceOpeningForm";
    }

    @Log("更新发票号")
    @RequestMapping("updateInvoiceNumber")
    @RequiresPermissions("invoiceinfo:invoiceInfo:edit")
    public String updateInvoiceNumber(InvoiceInfo invoiceInfo, ModelMap modelMap) {
        try {
            invoiceInfoService.updateInvoiceNumber(invoiceInfo);
        } catch (Exception e) {
            log.error("保存失败！ msg={}", e.getMessage(), e);
        }
        return successPath;
    }

    /**
     * @Description：发票管理列表数据
     * @author 周天
     */
    @Log("获取发票管理列表数据")
    @RequestMapping("list")
    @ResponseBody
    @RequiresPermissions("invoiceinfo:invoiceInfo:view")
    public Grid list(InvoiceInfo invoiceInfo, GridParam param) {
        invoiceInfo.setObjectId(UserUtils.getUser().getBusinessId());
        Grid grid = invoiceInfoService.findPage(invoiceInfo, param);
        return grid;
    }


    /**
     * @Description：发票管理表单页面--新增/编辑
     * @author 周天
     */
    @Log("打开发票管理表单页面--新增/编辑")
    @RequestMapping(value = "form")
    @RequiresPermissions("invoiceinfo:invoiceInfo:view")
    public String form(InvoiceInfo invoiceInfo, ModelMap model) {
        invoiceInfo = invoiceInfoService.get(invoiceInfo.getId());
        model.addAttribute("invoiceInfo", invoiceInfo);
        return "invoiceinfo/invoiceInfoForm";
    }

    /**
     * @Description：发票管理新增/编辑 保存方法
     * @author 周天
     */
    @Log("新增/编辑发票管理")
    @RequestMapping("saveInvoiceInfo")
    @RequiresPermissions("invoiceinfo:invoiceInfo:edit")
    public String saveInvoiceInfo(InvoiceInfo invoiceInfo, ModelMap model) {
        try {
            invoiceInfoService.save(invoiceInfo);
        } catch (Exception e) {
            log.error("保存失败！ msg={}", e.getMessage(), e);

            model.addAttribute("error", "保存失败！");
            return form(invoiceInfo, model);
        }
        return successPath;
    }

    /**
     * @Description：发票管理数据删除方法
     * @author 周天
     */
    @Log("删除发票管理")
    @RequestMapping("delInvoiceInfo")
    @ResponseBody
    @RequiresPermissions("invoiceinfo:invoiceInfo:edit")
    public Json delInvoiceInfo(InvoiceInfo invoiceInfo) {
        Json json = new Json();
        try {
            invoiceInfoService.delete(invoiceInfo);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("删除失败！ msg={}", e.getMessage(), e);

            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }

    @Log("打开在线商家财务管理页面")
    @RequestMapping("financialManagementIndex")
    @RequiresPermissions("invoiceinfo:invoiceInfo:view")
    public String financialManagementIndex() {
        return "invoiceinfo/merchantFinanceList";
    }

    @Log("打开广告商财务管理页面")
    @RequestMapping("advertiserFinancialManagementIndex")
    @RequiresPermissions("invoiceinfo:invoiceInfo:view")
    public String advertiserFinancialManagementIndex() {
        return "invoiceinfo/advertiserFinancialManagementList";
    }


    @Log("在线商家/广告商财务管理")
    @RequestMapping("financialManagement")
    @ResponseBody
    @RequiresPermissions("invoiceinfo:invoiceInfo:view")
    public Grid financialManagement(AccountRecharge accountRecharge, GridParam param) {
        Grid grid = invoiceInfoService.accountRechargeList(accountRecharge, param);
        return grid;
    }

    @Log("打开审核内容界面")
    @RequestMapping("financialAuditIndex")
    @RequiresPermissions("invoiceinfo:invoiceInfo:view")
    public String financialAuditIndex(InvoiceInfo invoiceInfo, ModelMap model) {
        model.addAttribute("invoiceInfo", invoiceInfo);
        return "invoiceinfo/financialAuditForm";
    }


    @Log("更新审核状态")
    @RequestMapping("updateAudit")
    @RequiresPermissions("invoiceinfo:invoiceInfo:edit")
    public String updateAudit(InvoiceInfo invoiceInfo, ModelMap model) {
        try {
            invoiceInfoService.updateAudit(invoiceInfo);
        } catch (Exception e) {
            log.error("保存失败！ msg={}", e.getMessage(), e);

            model.addAttribute("error", "保存失败！");
            return form(invoiceInfo, model);
        }
        return successPath;
    }

}
