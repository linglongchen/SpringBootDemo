package com.chunqiu.mrjuly.modules.shopinfo.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.DateUtils;
import com.chunqiu.mrjuly.common.utils.MD5Util;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.accountrecharge.model.AccountRecharge;
import com.chunqiu.mrjuly.modules.advertiserinfo.model.AccountMoney;
import com.chunqiu.mrjuly.modules.advertiserinfo.model.AdvertiserInfo;
import com.chunqiu.mrjuly.modules.advertiserinfo.service.AdvertiserInfoService;
import com.chunqiu.mrjuly.modules.record.model.ShopRecord;
import com.chunqiu.mrjuly.modules.record.service.ShopRecordService;
import com.chunqiu.mrjuly.modules.shophotel.model.ShopHotel;
import com.chunqiu.mrjuly.modules.shophotel.service.ShopHotelService;
import com.chunqiu.mrjuly.modules.shopinfo.model.ShopInfo;
import com.chunqiu.mrjuly.modules.shopinfo.service.ShopInfoService;
import com.chunqiu.mrjuly.modules.system.model.LyConfigStar;
import com.chunqiu.mrjuly.modules.system.service.LyConfigStarService;

import lombok.extern.slf4j.Slf4j;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 商家信息Controller
 *
 * @author chen
 * @version 2019-03-05
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/shopinfo/shopInfo")
@Transactional
public class ShopInfoController extends BaseController {

    @Autowired
    private ShopInfoService shopInfoService;
    @Autowired
    private ShopRecordService shopRecordService;
    @Autowired
    private ShopHotelService shopHotelService;
    @Autowired
    private AdvertiserInfoService advertiserInfoService;
	@Autowired
	private LyConfigStarService lyConfigStarService;

    /**
     * @Description：商家信息列表页面
     * @author chen
     */
    @Log("打开商家信息列表页面")
    @RequestMapping("index")
    @RequiresPermissions("shopinfo:shopInfo:view")
    public String index() {
        return "shopinfo/shopInfoList";
    }


    @RequestMapping("list2")
    @ResponseBody
    @RequiresPermissions("shopinfo:shopInfo:view")
    public Grid list2(ShopHotel shopHotel, GridParam param) {
        shopHotel.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        return shopHotelService.findPage(shopHotel, param);
    }

    /**
     * @Description：商家信息列表数据
     * @author chen
     */
    @Log("获取商家信息列表数据")
    @RequestMapping("list")
    @ResponseBody
    @RequiresPermissions("shopinfo:shopInfo:view")
    public Grid list(ShopInfo shopInfo, GridParam param) {
        return shopInfoService.findPage(shopInfo, param);
    }

    /**
     * @Description：商家信息表单页面--新增/编辑
     * @author chen
     */
    @Log("打开商家信息表单页面--新增/编辑")
    @RequestMapping(value = "form")
    @RequiresPermissions("shopinfo:shopInfo:view")
    public String form(ShopInfo shopInfo, ModelMap model) {
        ShopInfo shopInfo2 = shopInfoService.get(shopInfo.getId());
        shopInfo2.setShopHotelId(shopInfo.getShopHotelId());
        if (shopInfo2 !=null){
            model.addAttribute("shopInfo", shopInfo2);
            List<String> list = new ArrayList<>();
            String[] string = shopInfo2.getShopImgs().split(",");
            for (int i=0;i<string.length;i++){
                list.add(string[i]);
            }
            model.addAttribute("showImageList",list);
        }
        return "shopinfo/shopInfoForm";
    }

    /**
     * @Description：商家信息新增/编辑 保存方法
     * @author chen
     */
    @Log("新增/编辑商家信息")
    @RequestMapping("saveShopInfo")
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public String saveShopInfo(ShopInfo shopInfo, ModelMap model) {
        try {
            shopInfoService.save(shopInfo);
        } catch (Exception e) {
            log.error("保存失败！ msg={}", e.getMessage(), e);

            model.addAttribute("error", "保存失败！");
            return form(shopInfo, model);
        }
        return successPath;
    }

    /**
     * @Description：商家信息数据删除方法
     * @author chen
     */
    @Log("删除商家信息")
    @RequestMapping("delShopInfo")
    @ResponseBody
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public Json delShopInfo(ShopInfo shopInfo) {
        Json json = new Json();
        try {
            shopInfoService.delete(shopInfo);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("删除失败！ msg={}", e.getMessage(), e);

            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }
    @Log("通过")
    @RequestMapping("pass")
    @ResponseBody
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public Json pass(ShopInfo shopInfo){
        Json json = new Json();
        try{
            shopInfo.setHotelPerson(Integer.parseInt(UserUtils.getUser().getId().toString()));
//            shopInfoService.saveReject(shopInfo);
            ShopHotel shopHotel = new ShopHotel();
            shopHotel.setCheckPerson(shopInfo.getHotelPerson());
            shopHotel.setShopId(shopInfo.getId());
            shopHotel.setStatus(shopInfo.getAuditorStatus());
            shopHotel.setId(shopInfo.getShopHotelId());
            shopHotel.setBanReason(" ");
            shopHotelService.save(shopHotel);
            ShopRecord shopRecord = new ShopRecord();
            if (shopInfo.getAuditorStatus()!= null || shopInfo.getId()!=null){
                shopRecord.setResult(shopInfo.getAuditorStatus());
                shopRecord.setShopInfoId(shopInfo.getShopHotelId());
                shopRecord.setUserId(Integer.parseInt(UserUtils.getUser().getId().toString()));
                shopRecordService.insertRecord(shopRecord);
            }
            json.setSuccess(true);
        }catch (Exception e){
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("操作失败");
        }
        return json;
    }


    @Log("驳回搁置页面")
    @RequestMapping("passForm")
    @RequiresPermissions("shopinfo:shopInfo:view")
    public String passForm(ShopInfo shopInfo,ModelMap modelMap){
        modelMap.addAttribute("shopInfo",shopInfo);
        return "shopinfo/rejectForm";
    }

    @Log("执行保存驳回搁置")
    @RequestMapping("saveReject")
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public String saveReject(ShopInfo shopInfo,ModelMap modelMap){
        try{
            shopInfo.setHotelPerson(Integer.parseInt(UserUtils.getUser().getId().toString()));
//            shopInfoService.saveReject(shopInfo);
            ShopHotel shopHotel = new ShopHotel();
            shopHotel.setBanReason(shopInfo.getHotelReason());
            shopHotel.setCheckPerson(shopInfo.getHotelPerson());
            shopHotel.setShopId(shopInfo.getId());
            shopHotel.setStatus(shopInfo.getAuditorStatus());
            shopHotel.setId(shopInfo.getShopHotelId());
            shopHotelService.save(shopHotel);
            ShopRecord shopRecord = new ShopRecord();
            if (shopInfo.getAuditorStatus()!= null || shopInfo.getId()!=null){
                shopRecord.setResult(shopInfo.getAuditorStatus());
                shopRecord.setShopInfoId(shopInfo.getShopHotelId());
                shopRecord.setUserId(Integer.parseInt(UserUtils.getUser().getId().toString()));
                shopRecord.setResultReason(shopInfo.getHotelReason());
                shopRecordService.insertRecord(shopRecord);
            }

        }catch (Exception e){
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            log.error("保存失败！ msg={}", e.getMessage(), e);
            modelMap.addAttribute("error", "保存失败！");
            return passForm(shopInfo, modelMap);
        }
        return successPath1;
    }

    @Log("商家管理列表页面")
    @RequestMapping("ShopManage")
    @RequiresPermissions("shopinfo:shopInfo:view")
    public String ShopManage(){
        return "shopinfo/ShopManageList";
    }





    @Log("商家管理列表页面")
    @RequestMapping("ShopManageForm")
    @RequiresPermissions("shopinfo:shopInfo:view")
    public String ShopManageForm(ShopInfo shopInfo,ModelMap model){
        shopInfo = shopInfoService.get(shopInfo.getId());
        if (shopInfo!=null){
            model.addAttribute("shopInfo", shopInfo);
            List<String> list = new ArrayList<>();
            String[] string = shopInfo.getShopImgs().split(",");
            for (int i=0;i<string.length;i++){
                list.add(string[i]);
            }
            model.addAttribute("showImageList",list);
        }
        return "shopinfo/ShopManageForm";
    }


    @Log("获取商家信息列表数据")
    @RequestMapping("ShopManageList")
    @ResponseBody
    @RequiresPermissions("shopinfo:shopInfo:view")
    public Grid ShopManageList(ShopInfo shopInfo, GridParam param) {
        return shopInfoService.findPage(shopInfo, param);
    }

    @Log("冻结商家信息")
    @RequestMapping("freezeShop")
    @ResponseBody
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public Json freezeShop(ShopInfo shopInfo) {
        Json json = new Json();
        try {
            shopInfo.setStatus(1);
            shopInfoService.save(shopInfo);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("冻结失败！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
            json.setMsg("冻结失败！");
        }
        return json;
    }

    @Log("解冻商家信息")
    @RequestMapping("freezeAllShop")
    @ResponseBody
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public Json freezeAllShop(ShopInfo shopInfo) {
        Json json = new Json();
        try {
            List<ShopInfo> list = new ArrayList<>();
            String[] strings = shopInfo.getShopIds().split(",");
            for (int i=0;i<strings.length;i++){
                ShopInfo shopInfo1 = new ShopInfo();
                shopInfo1.setId(Integer.parseInt(strings[i]));
                shopInfo1.setStatus(shopInfo.getStatus());
                list.add(shopInfo1);
            }
            shopInfoService.freezeAllShop2(list);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("操作失败！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
            json.setMsg("操作失败！");
        }
        return json;
    }

    @Log("解冻商家信息")
    @RequestMapping("ShopInfo")
    @ResponseBody
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public Json ShopInfo(ShopInfo shopInfo) {
        Json json = new Json();
        try {
            shopInfo.setStatus(0);
            shopInfoService.save(shopInfo);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("解冻失败！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
            json.setMsg("解冻失败！");
        }
        return json;
    }

    /**
     * 冻结原因
     * @return
     */
    @Log("冻结原因")
    @RequestMapping("freezeReason")
    @RequiresPermissions("shopinfo:shopInfo:view")
    public String freezeReason(ShopInfo shopInfo,ModelMap modelMap) {
        modelMap.addAttribute("shopInfo",shopInfo);
        return "shopinfo/freezeReasonForm";
    }
    @Log("保存冻结")
    @RequestMapping("saveFreeze")
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public String saveFreeze(ShopInfo shopInfo, ModelMap model) {
        try {
            if (shopInfo.getShopIds()!= null && shopInfo.getShopIds() != ""){
                List<ShopInfo> shopInfoList = new ArrayList<>();
                String[] strings = shopInfo.getShopIds().split(",");
                for (String id : strings){
                    ShopInfo shopInfo1 = new ShopInfo();
                    shopInfo1.setStatus(shopInfo.getStatus());
                    shopInfo1.setId(Integer.parseInt(id));
                    shopInfo1.setFreezeReason(shopInfo.getFreezeReason());
                    shopInfoList.add(shopInfo1);
                }
                shopInfoService.freezeAllShop(shopInfoList);
            }else{
                shopInfoService.save(shopInfo);
            }
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            log.error("保存失败！ msg={}", e.getMessage(), e);
            model.addAttribute("error", "保存失败！");
            return freezeReason(shopInfo, model);
        }
        return successPath;
    }


    @Log("打款")
    @RequestMapping(value = "payAdvertiserInfo")
    @RequiresPermissions("shopinfo:shopInfo:view")
    public String payAdvertiserInfo(ShopInfo shopInfo, ModelMap model) {
        shopInfo = shopInfoService.get(shopInfo.getId());
        if (shopInfo.getAccount()==null){
            shopInfo.setAccount(0f);
        }
        List<AccountRecharge> list = advertiserInfoService.accountRechargeLis2(shopInfo.getId());
        Map<Integer,String> map = new HashMap<>();
        for (int i=0;i<list.size();i++){
            map.put(list.get(i).getId(),list.get(i).getRemittanceFlowNumber());
        }
        shopInfo.setRemark("");
        shopInfo.setPrice(0.0f);
        model.addAttribute("map", list);
        model.addAttribute("shopInfo", shopInfo);
        return "shopinfo/payAdvertiserInfoForm";
    }

    @Log("扣款")
    @RequestMapping(value = "cutAdvertiserInfo")
    @RequiresPermissions("shopinfo:shopInfo:view")
    public String cutAdvertiserInfo(ShopInfo shopInfo, ModelMap model) {
        shopInfo = shopInfoService.get(shopInfo.getId());
        if (shopInfo.getAccount()==null){
            shopInfo.setAccount(0f);
        }
        shopInfo.setRemark("");
        shopInfo.setPrice(0.0f);
        model.addAttribute("shopInfo", shopInfo);
        return "shopinfo/cutAdvertiserInfoForm";
    }
    @Log("保存打款信息")
    @RequestMapping("saveAccountRecharge")
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public String saveAccountRecharge(AccountMoney accountMoney, ModelMap modelMap){
        try{
            String user=UserUtils.getUser().getAccount();
            String password = UserUtils.getUser().getPassword();
            String pwd = MD5Util.encrypt(accountMoney.getPassword());
        	ShopInfo shopInfo = shopInfoService.get(accountMoney.getShopInfoId());
            shopInfo.setPrice(accountMoney.getPrice());
            shopInfo.setRemark(accountMoney.getRemarks());
            List<AccountRecharge> list = advertiserInfoService.accountRechargeLis2(shopInfo.getId());
            modelMap.addAttribute("shopInfo",shopInfo);
            modelMap.addAttribute("map", list);
            if (accountMoney.getPrice() == null || accountMoney.getPrice() <= 0) {
                modelMap.addAttribute("error", "请输入打款金额！");
                return "shopinfo/payAdvertiserInfoForm";
			} else if (StringUtils.isBlank(accountMoney.getBillOfOriginId())) {
				modelMap.addAttribute("error", "请选择汇款单！");
                return "shopinfo/payAdvertiserInfoForm";
			} else if (!(user.equals(accountMoney.getAdmin()) && password.equals(pwd))) {
                modelMap.addAttribute("error", "账号密码错误！");
                return "shopinfo/payAdvertiserInfoForm";
			} else {
                shopInfoService.saveAccountRecharge(accountMoney);
            }
        }catch (Exception e){
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            modelMap.addAttribute("error", "保存失败！");
            return "shopinfo/payAdvertiserInfoForm";
        }
        return successPath;
    }

    @Log("保存扣款信息")
    @RequestMapping("saveCutAccountRecharge")
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public String saveCutAccountRecharge(AccountMoney accountMoney, ModelMap modelMap){
        try{
            String user=UserUtils.getUser().getAccount();
            String password = UserUtils.getUser().getPassword();
            String pwd = MD5Util.encrypt(accountMoney.getPassword());
            ShopInfo shopInfo = shopInfoService.get(accountMoney.getShopInfoId());
            shopInfo.setPrice(accountMoney.getPrice());
            shopInfo.setRemark(accountMoney.getRemarks());
            shopInfo.setAccount(shopInfo.getAccount() == null ? 0 : shopInfo.getAccount());
            modelMap.addAttribute("shopInfo", shopInfo);
            if (accountMoney.getPrice() == null || accountMoney.getPrice() <= 0) {
                modelMap.addAttribute("error", "请输入扣款金额！");
                return "shopinfo/cutAdvertiserInfoForm";
			} else if (!(user.equals(accountMoney.getAdmin()) && password.equals(pwd))) {
                modelMap.addAttribute("error", "账号密码错误！");
                return "shopinfo/cutAdvertiserInfoForm";
			} else if (shopInfo != null && (shopInfo.getAccount() == null ? 0 : shopInfo.getAccount()) < accountMoney.getPrice()){
                modelMap.addAttribute("error", "账户余额不足！");
                return "shopinfo/cutAdvertiserInfoForm";
            } else {
				shopInfoService.saveCutAccountRecharge(accountMoney);
            }
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            modelMap.addAttribute("error", "保存失败！");
            return "shopinfo/cutAdvertiserInfoForm";
        }
        return successPath;
    }


    @Log("打开商家我的财务")
    @RequestMapping("myShopFinanceIndex")
    @RequiresPermissions("shopinfo:shopInfo:view")
    public String myShopFinanceIndex(ShopInfo shopInfo,ModelMap modelMap) {
        shopInfo = shopInfoService.get(UserUtils.getUser().getBusinessId());
        modelMap.addAttribute("shopInfo",shopInfo);
        return "shopinfo/shopInfoMyFinance";
    }

    @Log("更新商家我的财务")
    @RequestMapping("updateMyShopFinance")
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public String updateMyShopFinance(ShopInfo shopInfo,ModelMap modelMap) {
        try {
            shopInfoService.save(shopInfo);
        } catch (Exception e) {
            log.error("更新失败！ msg={}", e.getMessage(), e);
        }
        return myShopFinanceIndex(shopInfo,modelMap);
    }

    @Log("获取商家租赁的酒店时间")
    @RequestMapping("shopLeaseList")
    @ResponseBody
    @RequiresPermissions("shopinfo:shopInfo:view")
    public Grid shopLeaseList(ShopHotel shopHotel, GridParam param) throws ParseException {
        shopHotel.setId(UserUtils.getUser().getBusinessId());
        Grid grid = shopInfoService.shopLeaseList(shopHotel, param);
        if (grid != null){
                List<ShopHotel> shopHotelList = grid.getRows();
                for (ShopHotel shopHotel1 : shopHotelList){
                   String time = DateUtils.leaseTime(shopHotel1.getDate());
                   shopHotel1.setDate(time);
                }
                grid.setRows(shopHotelList);
        }
        return grid ;
    }
    
    @Log("商家星级管理页面")
    @RequestMapping(value = "shopStar")
    @RequiresPermissions("shopinfo:shopInfo:view")
    public String shopStar(ShopInfo shopInfo, ModelMap model) {
    	shopInfo = shopInfoService.get(shopInfo.getId());
        LyConfigStar currentStar = lyConfigStarService.selectByPrimaryKey(shopInfo.getStarId());
        shopInfo.setStarId(currentStar == null ? 0 : currentStar.getStar().longValue());
        model.addAttribute("shopInfo", shopInfo);
        List<LyConfigStar> configStars = lyConfigStarService.getAllConfigStar();
        model.addAttribute("configStars", configStars);
        return "shopinfo/shopStar";
    }
    
    @Log("更新商家星级")
    @RequestMapping(value = "updateShopStar")
    @RequiresPermissions("shopinfo:shopInfo:edit")
    public String updateShopStar(ShopInfo shopInfo, ModelMap model) {
    	try {
    		if (shopInfo != null && shopInfo.getId() != null && shopInfo.getStarId() != null) {
    			shopInfoService.updateStar(shopInfo);
			}
        } catch (Exception e) {
            log.error("更新商家星级发生异常！ msg={}", e.getMessage(), e);
            model.addAttribute("error", "更新失败！");
            return index();
        }
        return successPath;
    }
}
