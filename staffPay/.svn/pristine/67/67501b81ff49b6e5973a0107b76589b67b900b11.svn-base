package com.chunqiu.mrjuly.modules.descriptionsettings.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.OssUtils.OSSClientUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.descriptionsettings.model.DescriptionSettings;
import com.chunqiu.mrjuly.modules.descriptionsettings.service.DescriptionSettingsService;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.List;

/**
 * 使用说明Controller
 * @author 周天
 * @version 2019-03-12
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/descriptionsettings/descriptionSettings")
public class DescriptionSettingsController extends BaseController {

	@Autowired
	private DescriptionSettingsService descriptionSettingsService;

	/**
	 * @Description：使用说明列表页面
	 * @author 周天
	 */
	@Log("打开使用安全说明列表页面")
	@RequestMapping("index")
	@RequiresPermissions("descriptionsettings:descriptionSettings:view")
    public String index(DescriptionSettings descriptionSettings,ModelMap modelMap){
		descriptionSettings.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		descriptionSettings.setType(1);
		descriptionSettings = descriptionSettingsService.descriptionSettings(descriptionSettings);
		if (descriptionSettings == null){
			DescriptionSettings descriptionSettings1 = new DescriptionSettings();
			List<String> stringList = new ArrayList<>();
			for (int i = 0;i< 6;i++){
				stringList.add("/images/default2.png");
				descriptionSettings1.setPicList(stringList);
			}
			descriptionSettings = descriptionSettings1;
		}else {
			List<String> stringList = new ArrayList<>();
			if (descriptionSettings.getPic() != null){
				String [] str = descriptionSettings.getPic().split(",");
				for (int i = 0;i<str.length;i++){
					stringList.add(str[i]);
					descriptionSettings.setPicList(stringList);
				}
			}

		}
		modelMap.addAttribute("descriptionSettings",descriptionSettings);
		return "descriptionsettings/descriptionSettingsList";
	}

	/**
	 * @Description：部门名册说明列表页面
	 * @author 周天
	 */
	@Log("打开部门名册说明列表页面")
	@RequestMapping("departmentIndex")
	@RequiresPermissions("descriptionsettings:descriptionSettings:view")
	public String departmentIndex(DescriptionSettings descriptionSettings,ModelMap modelMap){
		descriptionSettings.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		descriptionSettings.setType(2);
		descriptionSettings = descriptionSettingsService.descriptionSettings(descriptionSettings);
		if (descriptionSettings == null){
			DescriptionSettings descriptionSettings1 = new DescriptionSettings();
			List<String> stringList = new ArrayList<>();
			for (int i = 0;i< 6;i++){
				stringList.add("/images/default2.png");
				descriptionSettings1.setPicList(stringList);
			}
			descriptionSettings = descriptionSettings1;
		}else {
			List<String> stringList = new ArrayList<>();
			if (descriptionSettings.getPic() != null){
				String [] str = descriptionSettings.getPic().split(",");
				for (int i = 0;i<str.length;i++){
					stringList.add(str[i]);
					descriptionSettings.setPicList(stringList);
				}
			}

		}
		modelMap.addAttribute("descriptionSettings",descriptionSettings);
		return "descriptionsettings/departmentSettingsList";
	}

	/**
	 * @Description：部门名册说明列表页面
	 * @author 周天
	 */
	@Log("打开设备使用说明列表页面")
	@RequestMapping("equipmentUseIndex")
	@RequiresPermissions("descriptionsettings:descriptionSettings:view")
	public String equipmentUseIndex(DescriptionSettings descriptionSettings,ModelMap modelMap){
		return "descriptionsettings/equipmentUseList";
	}

	/**
	 * @Description：使用说明列表数据
	 * @author 周天
	 */
	@Log("获取使用说明列表数据")
	@RequestMapping("list")
	@ResponseBody
	@RequiresPermissions("descriptionsettings:descriptionSettings:view")
	public Grid list(DescriptionSettings descriptionSettings, GridParam param) {
		descriptionSettings.setType(3);
		descriptionSettings.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		return descriptionSettingsService.findPage(descriptionSettings, param);
	}
	/**
	 * @Description：使用说明表单页面--新增/编辑
	 * @author 周天
	 */
	@Log("打开使用说明表单页面--新增/编辑")
	@RequestMapping(value = "form")
	@RequiresPermissions("descriptionsettings:descriptionSettings:view")
	public String form(DescriptionSettings descriptionSettings, ModelMap model) {
		descriptionSettings = descriptionSettingsService.get(descriptionSettings.getId());
		if (descriptionSettings == null){
			DescriptionSettings descriptionSettings1 = new DescriptionSettings();
			List<String> stringList = new ArrayList<>();
			for (int i = 0;i< 6;i++){
				stringList.add("/images/default2.png");
				descriptionSettings1.setPicList(stringList);
			}
			descriptionSettings = descriptionSettings1;
		}else {
            List<String> stringList = new ArrayList<>();
            String [] str = descriptionSettings.getPic().split(",");
            for (int i = 0;i<str.length;i++){
                stringList.add(str[i]);
				descriptionSettings.setPicList(stringList);
            }
        }
		model.addAttribute("descriptionSettings", descriptionSettings);
		return "descriptionsettings/descriptionSettingsForm";
	}
	/**
	 * @Description：使用说明新增/编辑 保存方法
	 * @author 周天
	 */
	@Log("新增/编辑使用说明")
	@RequestMapping("saveDescriptionSettings")
	@RequiresPermissions("descriptionsettings:descriptionSettings:edit")
	public String saveDescriptionSettings(DescriptionSettings descriptionSettings, ModelMap model){
		try{
			descriptionSettings.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
			String pic = OSSClientUtils.ossUploadPictures(descriptionSettings.getPic());
			descriptionSettings.setPic(pic);
			descriptionSettingsService.save(descriptionSettings);
		}catch(Exception e){
			log.error("保存失败！ msg={}", e.getMessage(), e);

			model.addAttribute("error", "保存失败！");
		}
		if (descriptionSettings.getType() == 1){
			return index(descriptionSettings,model);
		}else if (descriptionSettings.getType() == 2){
			return departmentIndex(descriptionSettings,model);
		}
		return "";
	}

	/**
	 * @Description：使用说明新增/编辑 保存方法
	 * @author 周天
	 */
	@Log("新增/编辑设备使用说明")
	@RequestMapping("saveSettings")
	@RequiresPermissions("descriptionsettings:descriptionSettings:edit")
	public String saveSettings(DescriptionSettings descriptionSettings, ModelMap model){
		try{
			descriptionSettings.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
			String pic = OSSClientUtils.ossUploadPictures(descriptionSettings.getPic());
			descriptionSettings.setPic(pic);
			descriptionSettingsService.saveSetting(descriptionSettings);
		}catch(Exception e){
			log.error("保存失败！ msg={}", e.getMessage(), e);

			model.addAttribute("error", "保存失败！");
			return form(descriptionSettings, model);
		}

		return successPath;
	}

	/**
	 * @Description：使用说明数据删除方法
	 * @author 周天
	 */
	@Log("删除使用说明")
	@RequestMapping("delDescriptionSettings")
	@ResponseBody
	@RequiresPermissions("descriptionsettings:descriptionSettings:edit")
	public Json delDescriptionSettings(DescriptionSettings descriptionSettings){
		Json json = new Json();
		try{
			descriptionSettingsService.delete(descriptionSettings);
			json.setSuccess(true);
		}catch(Exception e){
			log.error("删除失败！ msg={}", e.getMessage(), e);

			json.setSuccess(false);
			json.setMsg("删除失败！");
		}
		return json;
	}

}
