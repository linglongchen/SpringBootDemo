package com.chunqiu.mrjuly.modules.shopinfo.controller;

import lombok.extern.slf4j.Slf4j;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.shopinfo.model.MarketListModel;
import com.chunqiu.mrjuly.modules.shopinfo.model.MarketBindShopCondition;
import com.chunqiu.mrjuly.modules.shopinfo.service.LyHotelMarketBusinessRelationService;

/**
 * 商场管理Controller
 * 
 * @author wy
 *
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/market")
@Transactional
public class MarketManageController extends BaseController {

	private static Logger log = LoggerFactory.getLogger(MarketManageController.class);

	@Autowired
	private LyHotelMarketBusinessRelationService relationService;

	@Log("打开商场管理页面")
	@RequestMapping("marketPage")
	@RequiresPermissions("market:manage:show")
	public String marketPage() {
		return "shopinfo/marketManageList";
	}

	@Log("获取商场列表数据")
	@RequestMapping("marketList")
	@ResponseBody
	@RequiresPermissions("market:manage:show")
	public Grid ShopManageList(MarketListModel condition, GridParam param) {
		return relationService.selectMarketList(condition, param);
	}
	
	@Log("打开商场绑定商家页面")
	@RequestMapping("bindShopPage")
	@RequiresPermissions("market:manage:show")
	public String bindShopPage(MarketListModel condition, ModelMap model) {
        model.addAttribute("marketId",condition.getMarketId());
		return "shopinfo/marketBindShop";
	}
	
	@Log("获取商场未绑定商家列表数据")
	@RequestMapping("marketUnbindShops")
	@ResponseBody
	@RequiresPermissions("market:manage:show")
	public Grid marketUnbindShops(MarketBindShopCondition condition, GridParam param) {
		return relationService.selectMarketUnbindShops(condition, param);
	}
	
	@Log("商场绑定商家功能")
	@RequestMapping("bindShop")
	@ResponseBody
	@RequiresPermissions("market:manage:edit")
	public Json updateBindShop(MarketBindShopCondition condition, ModelMap model) {
		Json json = new Json();
		try {
			if (condition == null || condition.getMarketId() == null || condition.getShopId() == null) {
				json.setSuccess(false);
				json.setMsg("绑定失败！");
			} else {
				relationService.updateBindType(condition, true);
				json.setSuccess(true);
				json.setMsg("绑定成功！");
			}
        } catch (Exception e) {
            log.error("商场绑定商家发生异常！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
			json.setMsg("绑定失败！");
        }
        return json;
	}
	
	
	@Log("打开商场解绑商家页面")
	@RequestMapping("unbindShopPage")
	@RequiresPermissions("market:manage:show")
	public String unbindShopPage(MarketListModel condition, ModelMap model) {
        model.addAttribute("marketId",condition.getMarketId());
		return "shopinfo/marketUnbindShop";
	}
	
	@Log("获取商场绑定商家列表数据")
	@RequestMapping("marketBindShops")
	@ResponseBody
	@RequiresPermissions("market:manage:show")
	public Grid marketBindShops(MarketBindShopCondition condition, GridParam param) {
		return relationService.selectMarketBindShops(condition, param);
	}
	
	@Log("商场解绑商家功能")
	@RequestMapping("unbindShop")
	@ResponseBody
	@RequiresPermissions("market:manage:edit")
	public Json updateUnbindShop(MarketBindShopCondition condition, ModelMap model) {
		Json json = new Json();
		try {
			if (condition == null || condition.getMarketId() == null || condition.getShopId() == null) {
				json.setSuccess(false);
				json.setMsg("解绑失败！");
			} else {
				relationService.updateBindType(condition, false);
				json.setSuccess(true);
				json.setMsg("解绑成功！");
			}
        } catch (Exception e) {
            log.error("商场解绑商家发生异常！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
			json.setMsg("解绑失败！");
        }
        return json;
	}
}
