package com.chunqiu.mrjuly.modules.install.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.DateUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.utils.excel.ExportExcel;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.hotelinfo.model.DepartmentCategories;
import com.chunqiu.mrjuly.modules.hotelinfo.model.DepartmentGoodsInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.model.DepartmentInfoList;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.service.DepartmentCategoriesService;
import com.chunqiu.mrjuly.modules.hotelinfo.service.DepartmentGoodsInfoService;
import com.chunqiu.mrjuly.modules.hotelinfo.service.DepartmentInfoService;
import com.chunqiu.mrjuly.modules.hotelinfo.service.HotelInfoService;
import com.chunqiu.mrjuly.modules.install.model.CustomerOrder;
import com.chunqiu.mrjuly.modules.install.model.CustomerOrder1;
import com.chunqiu.mrjuly.modules.install.model.ServiceMode;
import com.chunqiu.mrjuly.modules.install.model.ShopType;
import com.chunqiu.mrjuly.modules.install.service.CustomerOrderService;
import com.chunqiu.mrjuly.modules.install.service.ShopTypeService;
import com.chunqiu.mrjuly.modules.platform.model.LocalNotice;
import com.chunqiu.mrjuly.modules.shopinfo.model.ShopInfo;
import com.chunqiu.mrjuly.modules.system.model.User;
import com.chunqiu.mrjuly.modules.system.service.UserService;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import static com.chunqiu.mrjuly.common.utils.JPushUtil.sendNotifyClient;

/**
 * 我的-订单数据统计
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/install/customerOrder")
@Transactional
public class CustomerOrderController extends BaseController{

    @Autowired
    private CustomerOrderService customerOrderService;

    @Autowired
    private DepartmentInfoService departmentInfoService;

    @Autowired
    private DepartmentGoodsInfoService departmentGoodsInfoService;

    @Autowired
    private UserService userService;

    @Autowired
    private DepartmentCategoriesService departmentCategoriesService;
    @Autowired
    private ShopTypeService shopTypeService;
    @Autowired
    private HotelInfoService hotelInfoService;

    /**
     * 我的-订单数据统计列表页面
     * @return
     */
    @Log("登录我的-订单数据统计页面")
    @RequestMapping("index")
    @RequiresPermissions("install:customerOrder:view")
    public String index(CustomerOrder customerOrder,ModelMap modelMap){

        return "install/customerOrderList";
    }

    @Log("登录我的-订单数据统计页面")
    @RequestMapping("index2")
    @RequiresPermissions("install:customerOrder:view")
    public String index2(CustomerOrder customerOrder,ModelMap modelMap){
        modelMap.addAttribute("customerOrder",customerOrder);
        return "install/customerOrderList2";
    }

    @Log("查询我的-订单数据统计列表")
    @ResponseBody
    @RequestMapping("getList")
    @RequiresPermissions("install:customerOrder:view")
    public Grid getList(CustomerOrder customerOrder, GridParam param){
        return customerOrderService.getList(customerOrder, param);
    }


    /**
     * 我的-订单数据统计列表数据
     * @param customerOrder
     * @param param
     * @return
     */
    @Log("查询我的-订单数据统计列表")
    @ResponseBody
    @RequestMapping("list")
    @RequiresPermissions("install:customerOrder:view")
    public Grid list(CustomerOrder customerOrder, GridParam param){
        customerOrder.setObjectId(UserUtils.getUser().getBusinessId());
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return customerOrderService.findPage(customerOrder, param);
    }
    @Log("查询我的-订单数据统计列表")
    @ResponseBody
    @RequestMapping("list2")
    @RequiresPermissions("install:customerOrder:view")
    public Grid list2(CustomerOrder customerOrder, GridParam param){

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        return customerOrderService.findPage2(customerOrder, param);
    }

    /**
     * 订单状态
     * @param customerOrder
     * @return
     */
    @Log("订单状态")
   @RequestMapping("isPut")
   @ResponseBody
    @RequiresPermissions("install:customerOrder:view")
    public Json isPut(CustomerOrder customerOrder){
        Json json = new Json();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try{
            if(customerOrder.getStatus() ==0){
                customerOrder.setStatus(1);
               customerOrder.setOrderTime(new Date());
                customerOrder.setSinglePerson(UserUtils.getUser().getId());
                customerOrder.setResponseTime(DateUtils.getTimeDifference(dateFormat.format(customerOrder.getOrderTime()),customerOrder.getDateString()));



            }else if(customerOrder.getStatus() ==1){
                customerOrder.setStatus(2);
                customerOrder.setCompletionTime(new Date());
                customerOrder.setCompletionPerson(UserUtils.getUser().getId());
                customerOrder.setTotalTime(DateUtils.getTimeDifference(dateFormat.format(customerOrder.getCompletionTime()),customerOrder.getDateString()));



            }
            customerOrderService.save(customerOrder);
            json.setSuccess(true);
        }catch(Exception e){
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("操作失败！");
       }
       return json;


   }


    /**
     * 本地订单数据统计导出数据
     *
     * @return
     */
    @RequestMapping(value = "export", method = RequestMethod.GET)
    @ResponseBody
    public String exportFile(HttpServletRequest request,CustomerOrder customerOrder, HttpServletResponse response) {
        customerOrder.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        try {
            String fileName = "订单数据统计" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
            List<CustomerOrder> list = customerOrderService.findAll(customerOrder);
            new ExportExcel("订单数据统计", CustomerOrder.class).setDataList(list).write(response, fileName).dispose();
            return null;
        } catch (Exception e) {
            request.setAttribute("error", "导出数据失败");
        }
        return null;
    }
    /**
     * 商家订单数据统计导出数据
     *
     * @return
     */
    @RequestMapping(value = "export1", method = RequestMethod.GET)
    @ResponseBody
    public String exportFile1(HttpServletRequest request,CustomerOrder customerOrder, HttpServletResponse response) {
        customerOrder.setObjectId(UserUtils.getUser().getBusinessId());
        try {
            String fileName = "订单数据统计" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
            List<CustomerOrder> list = customerOrderService.findPageShopOrder11(customerOrder);
            new ExportExcel("订单数据统计", CustomerOrder1.class).setDataList(list).write(response, fileName).dispose();
            return null;
        } catch (Exception e) {
            request.setAttribute("error", "导出数据失败");
        }
        return null;
    }
    /**
     * 本地订单数据统计导出数据
     *
     * @return
     */
    @RequestMapping(value = "export2", method = RequestMethod.GET)
    @ResponseBody
    public String export2(CustomerOrder customerOrder,HttpServletRequest request, HttpServletResponse response) {
        try {
            String fileName = "订单数据统计" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";

            List<CustomerOrder> list = customerOrderService.getList2(customerOrder);

            new ExportExcel("订单数据统计", CustomerOrder.class).setDataList(list).write(response, fileName).dispose();
            return null;
        } catch (Exception e) {
            request.setAttribute("error", "导出数据失败");
        }
        return null;
    }

    /**
     * 本地服务系统我的订单数据统计
     * @return
     */
    @Log("登录我的-订单数据统计页面")
    @RequestMapping("index1")
    @RequiresPermissions("install:customerOrder:view")
    public String index1(DepartmentInfoList departmentInfoList, DepartmentCategories departmentCategories,ServiceMode serviceMode, User user, CustomerOrder customerOrder, DepartmentGoodsInfo departmentGoodsInfo, ModelMap model){
        departmentInfoList.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        departmentCategories.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        user.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        List<DepartmentInfoList> departmentList = departmentInfoService.findAll(departmentInfoList);
        /*List<DepartmentGoodsInfo> departmentGoodsInfoList = departmentGoodsInfoService.findAllList(departmentGoodsInfo);*/
        List<DepartmentCategories> departmentCategoriesList = departmentCategoriesService.findAllList(departmentCategories);
        List<User> userList = userService.findList(user);
        List<ServiceMode> serviceModeList = customerOrderService.selMode(serviceMode);
        model.addAttribute("serviceModeList",serviceModeList);
        model.addAttribute("departmentList",departmentList);
        /*model.addAttribute("departmentGoodsInfoList",departmentGoodsInfoList);*/
        model.addAttribute("departmentCategoriesList",departmentCategoriesList);
        model.addAttribute("userList",userList);
        return "mine/customerList";
    }


    /**
     * 初始化订单数据统计
      * @param customerOrder
     * @param param
     * @return
     */
    @Log("查询我的-订单数据统计列表")
    @ResponseBody
    @RequestMapping("list1")
    @RequiresPermissions("install:customerOrder:view")
    public Grid list1(CustomerOrder customerOrder, GridParam param, ModelMap model) throws ParseException {
        customerOrder.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        CustomerOrder customerOrderList = customerOrderService.selectTotal(customerOrder);
        try {
            if (customerOrderList != null){
                customerOrder.setTotalTime(DateUtils.getTime(customerOrderList.getTotalTime()));
            }

        } catch (ParseException e) {
            e.printStackTrace();
        }
        model.addAttribute("customerOrder",customerOrder);
        Grid grid = customerOrderService.findPageList(customerOrder, param);
        List<CustomerOrder> customerOrders = grid.getRows();
        if (customerOrders.size()>0){
                for (CustomerOrder customerOrder1 : customerOrders){
                    customerOrder1.setTotalTimeTwo(customerOrder.getTotalTime());
                    if (customerOrder1.getStatus() == 1 ){
                        customerOrder1.setResponseTime(DateUtils.getTime(customerOrder1.getResponseTime()));
                      }
                    if (customerOrder1.getStatus() == 2){
                        customerOrder1.setResponseTime(DateUtils.getTime(customerOrder1.getResponseTime()));
                        customerOrder1.setTotalTime(DateUtils.getTime(customerOrder1.getTotalTime()));

                    }
                     }
        }
        return grid;
    }


    @InitBinder
    public void init(WebDataBinder binder) {
        binder.registerCustomEditor(Date.class, new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd"), true));
    }


    @Log("查询我的-订单数据统计列表")
    @ResponseBody
    @RequestMapping("getMode")
    public List<ServiceMode> getMode(ServiceMode serviceMode){
        return customerOrderService.getMode(serviceMode);
    }


    /**
     * 我的-订单数据统计列表数据
     * @param customerOrder
     * @param param
     * @return
     */
    @Log("查询我的-订单数据统计列表")
    @ResponseBody
    @RequestMapping("listThree")
    @RequiresPermissions("install:customerOrder:view")
    public Grid listThree(CustomerOrder customerOrder, GridParam param){
        Integer id = UserUtils.getUser().getBusinessId();
        customerOrder.setObjectId(id);
        return customerOrderService.findPageShopOrder(customerOrder, param);
    }


    /**
     * 订单状态
     * @param customerOrder
     * @return
     */
    @Log("订单状态")
    @RequestMapping("cancel")
    @ResponseBody
    @RequiresPermissions("install:customerOrder:edit")
    public Json cancel(CustomerOrder customerOrder){
        Json json = new Json();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String nowdate = dateFormat.format(new Date());
        try{
            //已接单
            if (customerOrder.getStatus() == 1){
                //查询订单信息
                customerOrder = customerOrderService.get(customerOrder);
                //已接单状态
                customerOrder.setStatus(1);
                //接单人
                customerOrder.setSinglePerson(UserUtils.getUser().getId());
                //接单时间
                customerOrder.setOrderTime(DateUtils.getNowDate());
                //响应时间
                String responseTime = DateUtils.getTimeDifference(nowdate,customerOrder.getDate());
                customerOrder.setResponseTime(responseTime);
                //给房间号发送推送
                CustomerOrder customerOrder1 = customerOrderService.customerOrderRoom(customerOrder);
                sendNotifyClient(customerOrder1.getUniqueEncoding(),"您有一条新的订单信息!","您的订单已被接单!");
                //新增一条我的消息
                LocalNotice localNotice = new LocalNotice();
                localNotice.setRoomNumber(customerOrder.getOrderRoom());
                localNotice.setHotelCodeId(customerOrder.getHotelCodeId());
                localNotice.preInsert();
                localNotice.setNoticeTitle("您有一条新的订单信息!");
                localNotice.setNoticeContent("您的订单已被接单!");
                customerOrderService.insertNotice(localNotice);
                //已完成
            }else if (customerOrder.getStatus() == 2){
                //查询订单信息
                customerOrder = customerOrderService.get(customerOrder);
                //已接单状态
                customerOrder.setStatus(2);
                //完成订单人员
                customerOrder.setCompletionPerson(UserUtils.getUser().getId());
                //完成订单时间
                customerOrder.setCompletionTime(DateUtils.getNowDate());
                //总耗时
                String responseTime = DateUtils.getTimeDifference(nowdate,customerOrder.getDate());
                customerOrder.setTotalTime(responseTime);
            }
            customerOrderService.save(customerOrder);
            json.setSuccess(true);
        }catch(Exception e){
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("操作失败！");
        }
        return json;


    }
    @Log("打开展业申请页面")
    @RequestMapping("index5")
    @RequiresPermissions("install:customerOrder:view")
    public String index5(ShopType shopType, ShopInfo shopInfo, HotelInfo hotelInfo, ModelMap model) {
    	return "shophotel/shopHotelList";
    }
}
