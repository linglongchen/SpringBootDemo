package com.chunqiu.mrjuly.modules.hotelinfo.controller;

import com.chunqiu.mrjuly.common.annotation.Limit;
import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.DateUtils;
import com.chunqiu.mrjuly.common.utils.OssUtils.OSSClientUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.utils.excel.ExportExcel;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.advertisingorder.model.AdvertisingOrder;
import com.chunqiu.mrjuly.modules.adviertisement.model.AdvertisementUpload;
import com.chunqiu.mrjuly.modules.adviertisement.model.AdviertisementType;
import com.chunqiu.mrjuly.modules.adviertisement.service.AdviertisementTypeService;
import com.chunqiu.mrjuly.modules.hotelinfo.model.DepartmentInfoList;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.model.MenuInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.service.HotelInfoService;
import com.chunqiu.mrjuly.modules.install.model.ServiceMode;
import com.chunqiu.mrjuly.modules.mine.model.FrameSetting;
import com.chunqiu.mrjuly.modules.mine.service.FrameSettingService;
import com.chunqiu.mrjuly.modules.mybill.model.MyBillInfo;
import com.chunqiu.mrjuly.modules.mybill.service.MyBillInfoService;
import com.chunqiu.mrjuly.modules.shophotel.model.ShopHotel;
import com.chunqiu.mrjuly.modules.shophotel.service.ShopHotelService;
import com.chunqiu.mrjuly.modules.shopinfo.model.ShopInfo;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections.CollectionUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 酒店信息Controller
 *
 * @author chen
 * @version 2019-03-01
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/hotelinfo/hotelInfo")
@Transactional
public class HotelInfoController extends BaseController {

    @Autowired
    private HotelInfoService hotelInfoService;
    @Autowired
    private AdviertisementTypeService adviertisementTypeService;
    @Autowired
    private ShopHotelService shopHotelService;
    @Autowired
    private MyBillInfoService myBillInfoService;
    @Autowired
    private FrameSettingService frameSettingService;

    /**
     * @Description：酒店信息列表页面
     * @author chen
     */
    @Log("打开酒店信息列表页面")
    @RequestMapping("index")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String index(HotelInfo hotelInfo, ModelMap modelMap) {
        hotelInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        if (hotelInfo.getHotelAdStandard() == null) {
            hotelInfo = hotelInfoService.hotelInfoById(hotelInfo);
            if (hotelInfo != null) {
                hotelInfo.setHotelAdStandardId(hotelInfo.getHotelAdStandard());
            }
        }
        if (hotelInfo != null) {
            String hotelAdStandard = "";
            int type = 0;
            String[] strId = hotelInfo.getHotelAdStandard().split(",");
            for (int i = 0; i < strId.length; i++) {
                type++;
                MenuInfo menuInfo = new MenuInfo();
                menuInfo.setType(type);
                menuInfo.setId(Integer.valueOf(strId[i]));
                menuInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
                menuInfo = hotelInfoService.menuInfo(menuInfo);
                if(menuInfo!=null){
                    hotelAdStandard += menuInfo.getTypeName() + "-";
                }else {
                    hotelAdStandard += "暂无-";
                }
            }
            hotelAdStandard = hotelAdStandard.substring(0, hotelAdStandard.length() - 1);
            hotelInfo.setHotelAdStandard(hotelAdStandard);
        }
        modelMap.addAttribute("hotelInfo", hotelInfo);
        return "hotelinfo/hotelInfoList";
    }

    /**
     * 三级菜单
     *
     * @return
     */
    @Log("打开三级菜单页面")
    @RequestMapping("menuIndex")
    public String menuIndex(MenuInfo menu, ModelMap modelMap) {
        menu.setType(1);
        menu.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        List<MenuInfo> menuList = hotelInfoService.menuListById(menu);
        List<MenuInfo> menuList2 = new ArrayList<>();
        List<MenuInfo> menuList3 = new ArrayList<>();
        if (menuList.size() > 0){
            menu.setType(2);
            menu.setId(menuList.get(0).getId());
             menuList2 = hotelInfoService.menuListById(menu);
             if (menuList2.size() > 0){
                 menu.setType(3);
                 menu.setId(menuList2.get(0).getId());
             menuList3 = hotelInfoService.menuListById(menu);
             }
        }
        modelMap.addAttribute("menuList", menuList);
        modelMap.addAttribute("menuList2", menuList2);
        modelMap.addAttribute("menuList3", menuList3);
        return "hotelinfo/menuList";
    }
    /**
     * 三级菜单
     *
     * @return
     */
    @Limit(key = "hotelinfo/menuIndex", period = 30, count = 5, name = "三级菜单列表", prefix = "limit")
    @Log("打开三级菜单页面")
    @RequestMapping("menuIndex2")
    public String menuIndex2(MenuInfo menu, ModelMap modelMap) {
        menu.setType(1);
        menu.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        List<MenuInfo> menuList = hotelInfoService.menuListById(menu);
        List<MenuInfo> menuList2 = new ArrayList<>();
        List<MenuInfo> menuList3 = new ArrayList<>();
        if (menuList.size() > 0){
            menu.setType(2);
            menu.setId(menuList.get(0).getId());
            menuList2 = hotelInfoService.menuListById(menu);
            if (menuList2.size() > 0){
                menu.setType(3);
                menu.setId(menuList2.get(0).getId());
            }
            menuList3 = hotelInfoService.menuListById(menu);

        }
        modelMap.addAttribute("menuList", menuList);
        modelMap.addAttribute("menuList2", menuList2);
        modelMap.addAttribute("menuList3", menuList3);
        return "hotelinfo/menuList2";
    }
    /**
     * 三级菜单
     *
     * @return
     */
    @Limit(key = "hotelinfo/menuIndex", period = 30, count = 5, name = "三级菜单列表", prefix = "limit")
    @Log("打开三级菜单页面")
    @RequestMapping("menuIndex3")
    public String menuIndex3(MenuInfo menu, ModelMap modelMap) {
        menu.setType(1);
        menu.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        List<MenuInfo> menuList = hotelInfoService.menuListById(menu);
        List<MenuInfo> menuList2 = new ArrayList<>();
        List<MenuInfo> menuList3 = new ArrayList<>();
        if (menuList.size() > 0){
            menu.setType(2);
            menu.setId(menuList.get(0).getId());
            menuList2 = hotelInfoService.menuListById(menu);
            if (menuList2.size() > 0){
                menu.setType(3);
                menu.setId(menuList2.get(0).getId());
            }
            menuList3 = hotelInfoService.menuListById(menu);

        }
        modelMap.addAttribute("menuList", menuList);
        modelMap.addAttribute("menuList2", menuList2);
        modelMap.addAttribute("menuList3", menuList3);
        return "hotelinfo/menuList3";
    }


    @Log("三级菜单页面返回")
    @RequestMapping("returnMenu")
    public String returnMenu(HotelInfo hotelInfo, ModelMap modelMap) {
        if (hotelInfo != null) {
            hotelInfo.setHotelAdStandardId(hotelInfo.getHotelAdStandard());
            String hotelAdStandard = "";
            int type = 0;
            String[] strId = hotelInfo.getHotelAdStandard().split(",");
            for (int i = 0; i < strId.length; i++) {
                type++;
                MenuInfo menuInfo = new MenuInfo();
                menuInfo.setType(type);
                menuInfo.setId(Integer.valueOf(strId[i]));
                menuInfo = hotelInfoService.menuInfo(menuInfo);
                hotelAdStandard += menuInfo.getTypeName() + "-";
            }
            hotelAdStandard = hotelAdStandard.substring(0, hotelAdStandard.length() - 1);
            hotelInfo.setHotelAdStandard(hotelAdStandard);
        }
        modelMap.addAttribute("hotel", hotelInfo);
        return successPath2;
    }
    @Log("三级菜单页面返回")
    @RequestMapping("returnMenu2")
    public String returnMenu2(HotelInfo hotelInfo, ModelMap modelMap) {
        if (hotelInfo != null) {
            hotelInfo.setHotelAdStandardId(hotelInfo.getHotelAdStandard());
            String hotelAdStandard = "";
            int type = 0;
            String[] strId = hotelInfo.getHotelAdStandard().split(",");
            for (int i = 0; i < strId.length; i++) {
                type++;
                MenuInfo menuInfo = new MenuInfo();
                menuInfo.setType(type);
                menuInfo.setId(Integer.valueOf(strId[i]));
                menuInfo = hotelInfoService.menuInfo(menuInfo);
                hotelAdStandard += menuInfo.getTypeName() + "-";
            }
            hotelAdStandard = hotelAdStandard.substring(0, hotelAdStandard.length() - 1);
            hotelInfo.setHotelAdStandard(hotelAdStandard);
        }
        modelMap.addAttribute("hotel", hotelInfo);
        return successPath7;
    }
    @Log("三级菜单页面返回")
    @RequestMapping("returnMenu3")
    public String returnMenu3(HotelInfo hotelInfo, ModelMap modelMap) {
        if (hotelInfo != null) {
            hotelInfo.setHotelAdStandardId(hotelInfo.getHotelAdStandard());
            String hotelAdStandard = "";
            int type = 0;
            String[] strId = hotelInfo.getHotelAdStandard().split(",");
            for (int i = 0; i < strId.length; i++) {
                type++;
                MenuInfo menuInfo = new MenuInfo();
                menuInfo.setType(type);
                menuInfo.setId(Integer.valueOf(strId[i]));
                menuInfo = hotelInfoService.menuInfo(menuInfo);
                hotelAdStandard += menuInfo.getTypeName() + "-";
            }
            hotelAdStandard = hotelAdStandard.substring(0, hotelAdStandard.length() - 1);
            hotelInfo.setHotelAdStandard(hotelAdStandard);
        }
        modelMap.addAttribute("hotel", hotelInfo);
        return successPath8;
    }

    /**
     * 获取菜单数据
     *
     * @param menu
     * @return
     */
    @Log("获取菜单数据")
    @RequestMapping("menuList")
    @ResponseBody
    public List<MenuInfo> menuList(MenuInfo menu) {
        List<MenuInfo> menuList = hotelInfoService.menuListById(menu);
        return menuList;
    }

    @RequestMapping("list2")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public Grid list2(HotelInfo hotelInfo, GridParam param) {
        hotelInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        return hotelInfoService.findPage(hotelInfo, param);
    }

    /**
     * @Description：酒店信息列表数据
     * @author chen
     */
    @Limit(key = "hotelinfo/hotelInfolist", period = 30, count = 5, name = "酒店信息列表数据", prefix = "limit")
    @Log("获取酒店信息列表数据")
    @RequestMapping("list")
    @ResponseBody
    public HotelInfo list(HotelInfo hotelInfo) {
        hotelInfo.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
        return hotelInfoService.hotelInfoById(hotelInfo);
    }

    /**
     * @Description：酒店信息表单页面--新增/编辑
     * @author chen
     */
    @Log("打开酒店信息表单页面--新增/编辑")
    @RequestMapping(value = "form")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String form(HotelInfo hotelInfo, ModelMap model) {
        hotelInfo = hotelInfoService.get(hotelInfo.getId());
        String string = hotelInfo.getHotelAdStandard();
        String[] strings = string.split(",");
        Integer type1 = Integer.parseInt(strings[0]);
        Integer type2 = Integer.parseInt(strings[1]);
        Integer type3 = Integer.parseInt(strings[2]);
        if (type1!=null && type2!=null && type3 !=null){
            AdviertisementType adviertisementType = adviertisementTypeService.get(type1);
            AdviertisementType adviertisementType1 = adviertisementTypeService.getType2Name(type2);
            AdviertisementType adviertisementType2 = adviertisementTypeService.getType3Name(type3);
            String string1="";
            String string2="";
            String string3="";
            if (adviertisementType!=null && adviertisementType1!=null && adviertisementType2!=null){
                 string1 = adviertisementType.getTypeName();
                 string2 = adviertisementType1.getType2Name();
                 string3 = adviertisementType2.getType3Name();
            }
            hotelInfo.setHotelAdStandard(string1 + "-" + string2 + "-" + string3);
        }
        model.addAttribute("hotelInfo", hotelInfo);
        return "hotelinfo/hotelInfoForm";
    }

    /**
     * @Description：酒店信息新增/编辑 保存方法
     * @author chen
     */
    @Log("新增/编辑酒店信息")
    @RequestMapping("saveHotelInfo")
    @RequiresPermissions("hotelinfo:hotelInfo:edit")
    public String saveHotelInfo(HotelInfo hotelInfo, ModelMap model) {
        try {
            if (hotelInfo.getId() == null) {
                //新增企业时添加固定部门前台
                DepartmentInfoList departmentInfoList = new DepartmentInfoList();
                departmentInfoList.preInsert();
                departmentInfoList.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
                departmentInfoList.setDepartmentName("前台");
                hotelInfoService.insertDepartmentById(departmentInfoList);
                //添加2条服务方式
                ServiceMode serviceMode = new ServiceMode();
                serviceMode.setObjectId(UserUtils.getUser().getHotelCodeId());
                serviceMode.setType(1);
                hotelInfoService.serviceMode(serviceMode);
                //新增6个空广告位
                List<AdvertisementUpload> advertisementUploadList = new ArrayList<>();
                int sort = 0;
                for (int i = 0; i < 6; i++) {
                    AdvertisementUpload advertisementUpload = new AdvertisementUpload();
                    sort++;
                    advertisementUpload.setSort(sort);
                    advertisementUpload.setObjectId(UserUtils.getUser().getHotelCodeId());
                    advertisementUploadList.add(advertisementUpload);
                }
                hotelInfoService.insertUploadAdver(advertisementUploadList);
                //新增本酒店的弹框
                FrameSetting frameSetting = new FrameSetting();
                frameSetting.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
                frameSetting.setThirdPartyReminder("进入：即将打开第三方软件");
                frameSetting.setSafeExit("退出：已注销");
                frameSetting.preInsert();
                frameSettingService.saveList(frameSetting);
            }

            //oss图片上传
            String bgImg = OSSClientUtils.ossUploadPictures(hotelInfo.getBgImg());
            hotelInfo.setBgImg(bgImg);
            String hotelImg = OSSClientUtils.ossUploadPictures(hotelInfo.getHotelImg());
            hotelInfo.setHotelImg(hotelImg);
            hotelInfoService.save(hotelInfo);
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            log.error("保存失败！ msg={}", e.getMessage(), e);
            model.addAttribute("error", "保存失败！");
            return index(hotelInfo, model);
        }
        model.addAttribute("hotelInfo", hotelInfo);
        return "hotelinfo/hotelInfoList";
    }

    @Log("新增/编辑酒店信息")
    @RequestMapping("saveHotelInfo2")
    @RequiresPermissions("hotelinfo:hotelInfo:edit")
    public String saveHotelInfo2(HotelInfo hotelInfo, ModelMap model) {
        try {
            if (hotelInfo.getIds() != null && hotelInfo.getIds() !="") {
                List<HotelInfo> list = new ArrayList<>();
                String[] strings = hotelInfo.getIds().split(",");
                for (int i = 0; i < strings.length; i++) {
                    HotelInfo hotelInfo1 = new HotelInfo();
                    hotelInfo1.setId(Integer.parseInt(strings[i]));
                    hotelInfo1.setStartDate(hotelInfo.getStartDate());
                    hotelInfo1.setEndDate(hotelInfo.getEndDate());
                    hotelInfo1.setPicturePrice(hotelInfo.getPicturePrice());
                    hotelInfo1.setVideoPrice(hotelInfo.getVideoPrice());
                    hotelInfo1.setTotalPrice(hotelInfo.getTotalPrice());
                    hotelInfo1.setTotalPrice2(hotelInfo.getTotalPrice2());
                    list.add(hotelInfo1);
                }
                hotelInfoService.updateAll(list);
            } else {
                if (hotelInfo.getId() == null) {
                    //新增企业时添加固定部门前台
                    DepartmentInfoList departmentInfoList = new DepartmentInfoList();
                    departmentInfoList.preInsert();
                    departmentInfoList.setDepartmentHead("/images/default2.png");
                    departmentInfoList.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
                    departmentInfoList.setDepartmentName("前台");
                    hotelInfoService.insertDepartmentById(departmentInfoList);
                    //添加2条服务方式
                    ServiceMode serviceMode = new ServiceMode();
                    serviceMode.setObjectId(UserUtils.getUser().getHotelCodeId());
                    serviceMode.setType(1);
                    hotelInfoService.serviceMode(serviceMode);
                    //新增6个空广告位
                    List<AdvertisementUpload> advertisementUploadList = new ArrayList<>();
                    int sort = 0;
                    for (int i = 0; i < 6; i++) {
                        AdvertisementUpload advertisementUpload = new AdvertisementUpload();
                        sort++;
                        advertisementUpload.setSort(sort);
                        advertisementUpload.setObjectId(UserUtils.getUser().getHotelCodeId());
                        advertisementUploadList.add(advertisementUpload);
                    }
                    hotelInfoService.insertUploadAdver(advertisementUploadList);
                }
                hotelInfoService.save(hotelInfo);
            }

        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            log.error("保存失败！ msg={}", e.getMessage(), e);
            model.addAttribute("error", "保存失败！");
            return form(hotelInfo, model);
        }
        return successPath;
    }


    /**
     * @Description：酒店信息数据删除方法
     * @author chen
     */
    @Limit(key = "hotelinfo/hotelInfodelHotelInfo", period = 30, count = 5, name = "酒店信息-删除", prefix = "limit")
    @Log("删除酒店信息")
    @RequestMapping("delHotelInfo")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:edit")
    public Json delHotelInfo(HotelInfo hotelInfo) {
        Json json = new Json();
        try {
            hotelInfo.setPicturePrice(0.0f);
            hotelInfo.setVideoPrice(0.0f);
            hotelInfo.setTotalPrice(0.0f);
            hotelInfo.setTotalPrice2(0.0f);
            hotelInfoService.save(hotelInfo);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("删除失败！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }


    @Log("打开酒店管理")
    @RequestMapping("hotelInfoMange")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String hotelInfoMange() {
        return "hotelinfo/hotelInfoManageList";
    }

    @Log("删除酒店信息")
    @RequestMapping("hotelInfoList")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public Grid hotelInfoList(HotelInfo hotelInfo, GridParam param) {
        Grid grid = new Grid();
        grid = hotelInfoService.findPage(hotelInfo, param);
        return grid;
    }

    @Log("冻结")
    @RequestMapping("changeFreeze")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:edit")
    public Json changeFreeze(HotelInfo hotelInfo) {
        Json json = new Json();
        try {
            hotelInfoService.save(hotelInfo);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("操作失败！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
            json.setMsg("操作失败！");
        }
        return json;
    }


    @Log("冻结")
    @RequestMapping("changeFreezeAll")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:edit")
    public Json changeFreezeAll(HotelInfo hotelInfo) {
        Json json = new Json();
        try {
            List<HotelInfo> list = new ArrayList<>();
            String[] strings = hotelInfo.getHotelIds().split(",");
            for (int i = 0; i < strings.length; i++) {
                HotelInfo hotelInfo1 = new HotelInfo();
                hotelInfo1.setId(Integer.parseInt(strings[i]));
                hotelInfo1.setIsFreeze(hotelInfo.getIsFreeze());
                list.add(hotelInfo1);
            }
            hotelInfoService.changeFreezeAll(list);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("操作失败！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
            json.setMsg("操作失败！");
        }
        return json;
    }


    @Log("打开地图")
    @RequestMapping(value = "map")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String map(HotelInfo hotelInfo, ModelMap model) {
        return "map/mapDemo";
    }


    @Log("地图返回页面")
    @RequestMapping("returnMap")
    public String returnMap(HotelInfo hotelInfo, ModelMap modelMap) {
        modelMap.addAttribute("hotel", hotelInfo);
        return successPath4;
    }


    @Log("冻结原因界面")
    @RequestMapping("freezeReason")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String freezeReason(HotelInfo hotelInfo, ModelMap modelMap) {
        modelMap.addAttribute("hotelInfo", hotelInfo);
        return "hotelinfo/freezeReasonForm";
    }

    @Log("保存冻结")
    @RequestMapping("saveFreeze")
    @RequiresPermissions("hotelinfo:hotelInfo:edit")
    public String saveFreeze(HotelInfo hotelInfo, ModelMap model) {
        try {
            if (hotelInfo.getHotelIds() != null && hotelInfo.getHotelIds() != "") {
                List<HotelInfo> hotelInfoList = new ArrayList<>();
                String[] strings = hotelInfo.getHotelIds().split(",");
                for (String id : strings) {
                    HotelInfo hotelInfo1 = new HotelInfo();
                    hotelInfo1.setIsFreeze(hotelInfo.getIsFreeze());
                    hotelInfo1.setId(Integer.parseInt(id));
                    hotelInfo1.setFreezeReason(hotelInfo.getFreezeReason());
                    hotelInfoList.add(hotelInfo1);
                }
                hotelInfoService.changeFreezeAll(hotelInfoList);
            } else {
                hotelInfoService.save(hotelInfo);
            }
        } catch (Exception e) {
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            log.error("保存失败！ msg={}", e.getMessage(), e);
            model.addAttribute("error", "保存失败！");
            return freezeReason(hotelInfo, model);
        }
        return successPath;
    }


    @Log("投放位选择")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    @RequestMapping(value = "PlacementselectionList")
    public String PlacementselectionList(ModelMap modelMap) {
        Integer num = hotelInfoService.getAllHotelInfo();
        HotelInfo hotelInfo = new HotelInfo();
        hotelInfo.setCountNum(num);
        modelMap.addAttribute("hotelInfo", hotelInfo);
        return "hotelinfo/PlacementselectionList";
    }



    @Log("广告位选择")
    @RequestMapping(value = "selectAdvertise")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String selectAdvertise(HotelInfo hotelInfo, ModelMap modelMap) {
        if (hotelInfo.getHotelCodeId() != null) {
            Integer num = hotelInfoService.getHotelInfo(hotelInfo);
            HotelInfo hotelInfo1 = hotelInfoService.getSelectAdvertise(hotelInfo);
            hotelInfo1.setHotelNumber(num);
            hotelInfo1.setAdvertisementNum(hotelInfoService.uploadCountNumById(hotelInfo));
            modelMap.addAttribute("hotelInfo", hotelInfo1);
        }
        return "hotelinfo/AdvertiseUploadList";
    }

    @Log("广告位选择")
    @RequestMapping("hotelInfoList2")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public Grid hotelInfoList2(HotelInfo hotelInfo, GridParam param) {
        hotelInfo.setShopId(UserUtils.getUser().getBusinessId());
        Grid grid = hotelInfoService.findPage2(hotelInfo, param);
        List<HotelInfo> hotelInfoList = grid.getRows();
        for (HotelInfo hotelInfo1 : hotelInfoList) {
            int count = hotelInfoService.getHotelInfo(hotelInfo1);
            hotelInfo1.setHotelNumber(count);
        }
        grid.setRows(hotelInfoList);
        return grid;
    }
    @Log("广告商广告位选择")
    @RequestMapping("hotelInfoListAD")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public Grid hotelInfoListAD(HotelInfo hotelInfo, GridParam param) {
        Grid grid = hotelInfoService.findPageAD(hotelInfo, param);
        List<HotelInfo> hotelInfoList = grid.getRows();
        for (HotelInfo hotelInfo1 : hotelInfoList) {
            int count = hotelInfoService.getHotelInfo(hotelInfo1);
            hotelInfo1.setHotelNumber(count);
        }
        grid.setRows(hotelInfoList);
        return grid;
    }
    @Log("投放位选择")
    @RequestMapping("selectPlease")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String selectPlease(ModelMap modelMap) {
        Integer num = hotelInfoService.getAllHotelInfo();
        HotelInfo hotelInfo = new HotelInfo();
        hotelInfo.setCountNum(num);
        modelMap.addAttribute("hotelInfo", hotelInfo);
        return "advertiserinfo/selectPleaseList";
    }

    @Log("加入购物车")
    @RequestMapping("joinGoods")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:edit")
    public Json joinGoods(HotelInfo hotelInfo) {
        Json json = new Json();
        try {
            List<HotelInfo> list = new ArrayList<>();
            String[] strings = hotelInfo.getHotelIds().split(",");
            for (int i = 0; i < strings.length; i++) {
                HotelInfo hotelInfo1 = new HotelInfo();
                hotelInfo1.setId(Integer.parseInt(strings[i]));
                hotelInfo1.setIsFreeze(hotelInfo.getIsFreeze());
                list.add(hotelInfo1);
            }
            hotelInfoService.changeFreezeAll(list);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("操作失败！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
            json.setMsg("操作失败！");
        }
        return json;
    }

    @Log("广告位选择")
    @RequestMapping("hotelInfoList3")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public Grid hotelInfoList3(HotelInfo hotelInfo, GridParam param) {
        Grid grid = hotelInfoService.findPage3(hotelInfo, param);
        List<HotelInfo> hotelInfoList = grid.getRows();
        for (HotelInfo hotelInfo1 : hotelInfoList) {
            int count = hotelInfoService.getHotelInfo(hotelInfo1);
            hotelInfo1.setHotelNumber(count);
        }
        grid.setRows(hotelInfoList);
        return grid;
    }

    @Log("获取时间下拉列表")
    @RequestMapping("getTime")
    @ResponseBody
    public List<HotelInfo> getTime() {
        return hotelInfoService.getTime();
    }

    @Log("获取酒店下拉列表")
    @RequestMapping("getHotel")
    @ResponseBody
    public List<HotelInfo> getHotel(HotelInfo hotelInfo) {
        return hotelInfoService.findListHotel(hotelInfo);
    }

    @Log("酒店下拉选择")
    @RequestMapping("getHotelSelect")
    @ResponseBody
    public List<Map<String, Object>> getHotelSelect() {
        List<Map<String, Object>> list = new ArrayList<>();
        List<HotelInfo> hotelInfos = hotelInfoService.findList(null);
        if (CollectionUtils.isNotEmpty(hotelInfos)) {
            for (int i = 0; i < hotelInfos.size(); i++) {
                Map<String, Object> map = new HashMap<>();
                map.put("id", hotelInfos.get(i).getHotelCodeId());
                map.put("name", hotelInfos.get(i).getHotelName());
                list.add(map);
            }
        }
        return list;
    }

    @Log("酒店服务数据统计")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    @RequestMapping("hotelServiceDate")
    public String hotelServiceDate() {
        return "hotelinfo/hotelServiceDateList";
    }


    @Log("酒店服务数据统计列表数据")
    @RequestMapping("hotelServiceDateList")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public Grid hotelServiceDateList(HotelInfo hotelInfo, GridParam param) {
        return hotelInfoService.hotelServiceDateList(hotelInfo, param);
    }

    @Log("入驻详情")
    @RequestMapping("enterForm")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String enterForm(ShopInfo shopInfo, ModelMap modelMap) {
        HotelInfo hotelInfo = new HotelInfo();
        hotelInfo.setHotelCodeId(shopInfo.getHotelCodeId());
        HotelInfo hotelInfo1 = hotelInfoService.getHotel(hotelInfo);
        modelMap.addAttribute("hotelInfo", hotelInfo1);
        return "hotelinfo/enterForm";
    }

    @Log("营收详情")
    @RequestMapping("revenueForm")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String revenueForm(HotelInfo hotelInfo, ModelMap modelMap) {
        HotelInfo hotelInfo1 = hotelInfoService.get(hotelInfo.getId());
        modelMap.addAttribute("hotelInfo", hotelInfo1);
        return "hotelinfo/revenueForm";
    }

    @Log("入驻详情数据")
    @RequestMapping("enterFormList")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public Grid enterFormList(ShopHotel shopHotel, GridParam param) {
        shopHotel.setShopId(UserUtils.getUser().getBusinessId());
        return shopHotelService.findPage2(shopHotel, param);
    }


    @Log("营收详情数据")
    @RequestMapping("getMyBill")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public Grid getMyBill(HotelInfo hotelInfo, GridParam param) {
        return hotelInfoService.getMyBill(hotelInfo, param);
    }
    @Log("营收详情数据")
    @RequestMapping("getMyBill4")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public Grid getMyBill4(HotelInfo hotelInfo, GridParam param) {
        return hotelInfoService.getMy(hotelInfo, param);
    }
    @Log("营收详情数据")
    @RequestMapping("getMyBill9")
    @ResponseBody
    public Grid getMyBill9(HotelInfo hotelInfo, GridParam param) {
        return hotelInfoService.getMyBill(hotelInfo, param);
    }
    @Log("营收详情数据")
    @RequestMapping("getMyBill2")
    @ResponseBody
    public Grid getMyBill2(HotelInfo hotelInfo, GridParam param) {
        return hotelInfoService.getMyBill3(hotelInfo, param);
    }
    @Log("营收详情数据")
    @RequestMapping("getMyBill3")
    @ResponseBody
    public Grid getMyBill3(HotelInfo hotelInfo, GridParam param) {
        return hotelInfoService.getMyBill6(hotelInfo, param);
    }
    @Log("商家入驻列表")
    @RequestMapping("revenueList2")
    public String revenueList2(HotelInfo  hotelInfo,ModelMap modelMap){
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String string= simpleDateFormat.format(hotelInfo.getCreateDate());
        hotelInfo.setTime(string);
        modelMap.addAttribute("hotelInfo",hotelInfo);
        return "hotelinfo/revenueList2";
    }
    @Log("商家入驻列表")
    @RequestMapping("revenueList3")
    public String revenueList3(HotelInfo  hotelInfo,ModelMap modelMap){
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String string= simpleDateFormat.format(hotelInfo.getCreateDate());
        hotelInfo.setTime(string);
        modelMap.addAttribute("hotelInfo",hotelInfo);
        return "hotelinfo/revenueList3";
    }


    @Log("商家类别")
    @RequestMapping("getShopType")
    @ResponseBody
    public List<ShopInfo> getShopType() {
        return hotelInfoService.getShopType();
    }

    @Log("根据时间获取商家数量")
    @RequestMapping("getShopCount")
    @ResponseBody
    public Integer getShopCount(ShopHotel shopHotel) {
        return hotelInfoService.getShopCount(shopHotel);
    }

    /**
     * 本地订单数据统计导出数据
     *
     * @return
     */
    @RequestMapping(value = "export1", method = RequestMethod.GET)
    @ResponseBody
    public String exportFile1(ShopHotel shopHotel, HttpServletRequest request, HttpServletResponse response) {
        try {
            String fileName = "入驻商家统计" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";

            List<ShopHotel> list = shopHotelService.findList2(shopHotel);

            new ExportExcel("入驻商家统计", ShopHotel.class).setDataList(list).write(response, fileName).dispose();
            return null;
        } catch (Exception e) {
            request.setAttribute("error", "导出数据失败");
        }
        return null;
    }

    /**
     * 本地订单数据统计导出数据
     *
     * @return
     */
    @RequestMapping(value = "export2", method = RequestMethod.GET)
    @ResponseBody
    public String exportFile2(HotelInfo hotelInfo, HttpServletRequest request, HttpServletResponse response) {
        try {
            String fileName = "营收统计" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";

            List<MyBillInfo> list = hotelInfoService.getMyBill2(hotelInfo);

            new ExportExcel("营收统计", MyBillInfo.class).setDataList(list).write(response, fileName).dispose();
            return null;
        } catch (Exception e) {
            request.setAttribute("error", "导出数据失败");
        }
        return null;
    }
    /**
     * 本地订单数据统计导出数据
     *
     * @return
     */
    @RequestMapping(value = "export5", method = RequestMethod.GET)
    @ResponseBody
    public String export5(HotelInfo hotelInfo, HttpServletRequest request, HttpServletResponse response) {
        try {
            String fileName = "营收统计" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";

            List<MyBillInfo> list = hotelInfoService.getMyBill4(hotelInfo);

            new ExportExcel("营收统计", MyBillInfo.class).setDataList(list).write(response, fileName).dispose();
            return null;
        } catch (Exception e) {
            request.setAttribute("error", "导出数据失败");
        }
        return null;
    }
    /**
     * 本地订单数据统计导出数据
     *
     * @return
     */
    @RequestMapping(value = "export6", method = RequestMethod.GET)
    @ResponseBody
    public String export6(HotelInfo hotelInfo, HttpServletRequest request, HttpServletResponse response) {
        try {
            String fileName = "营收统计" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";

            List<MyBillInfo> list = hotelInfoService.getMyBill5(hotelInfo);

            new ExportExcel("营收统计", MyBillInfo.class).setDataList(list).write(response, fileName).dispose();
            return null;
        } catch (Exception e) {
            request.setAttribute("error", "导出数据失败");
        }
        return null;
    }

    @Log("根据时间获取商家数量")
    @RequestMapping("getCount")
    @ResponseBody
    public Float getCount(HotelInfo hotelInfo) {
        return hotelInfoService.getCount(hotelInfo);
    }

    @Log("根据时间获取商家数量")
    @RequestMapping("getCount6")
    @ResponseBody
    public Float getCount6(HotelInfo hotelInfo) {
        return hotelInfoService.getCount6(hotelInfo);
    }
    @Log("根据时间获取商家数量")
    @RequestMapping("getCount2")
    @ResponseBody
    public Float getCount2(HotelInfo hotelInfo) {
        return hotelInfoService.getCount2(hotelInfo);
    }

    @Log("根据时间获取商家数量")
    @RequestMapping("setCharts")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String setCharts(HotelInfo hotelInfo,ModelMap modelMap){
        modelMap.addAttribute("hotelInfo",hotelInfo);
        return "hotelinfo/chartsForm";
    }

    @Log("统计收入折线图")
    @RequestMapping("getCharts")
    @ResponseBody
    public Map<String,Object> getCharts(HotelInfo hotelInfo){
        if (hotelInfo.getStatus()==4){
            Map<String,Object> map = new HashMap<>();
            List<Float> price = new ArrayList<>();
            List<MyBillInfo> list = hotelInfoService.getBillChart(hotelInfo);
            List<String> strings = new ArrayList<>();
            for (int i=0;i<list.size();i++){
                strings.add(list.get(i).getTime());
                price.add(list.get(i).getAmountPrice());
            }
            map.put("date",strings);
            map.put("price",price);
            return map;
        }else {
            hotelInfo.setId(hotelInfo.getHotelCodeId());
            Map<String,Object> map = new HashMap<>();
            List<Float> price = new ArrayList<>();
            List<MyBillInfo> list = hotelInfoService.getMyBill2(hotelInfo);
            List<String> strings = new ArrayList<>();
            for (int i=0;i<list.size();i++){
                strings.add(list.get(i).getTime());
                price.add(list.get(i).getAmountPrice());
            }
            map.put("date",strings);
            map.put("price",price);
            return map;
        }


    }

    @Log("")
    @RequestMapping("getNewTime")
    @ResponseBody
    public String getNewTime(AdvertisingOrder advertisingOrder){
        Integer type = UserUtils.getUser().getRoleType();
        Integer objectId = UserUtils.getUser().getBusinessId();
        if (type==3){
            advertisingOrder.setType(1);
        }else if (type==4){
            advertisingOrder.setType(2);
        }
        advertisingOrder.setObjectId(objectId);
        return hotelInfoService.getNewTime(advertisingOrder);
    }




    @RequestMapping("hotelName")
    @ResponseBody
    public Map<String,Object> hotelName(HotelInfo hotelInfo){
        Map<String,Object> map = new HashMap<>();
        hotelInfo = hotelInfoService.hotelName(hotelInfo);
        map.put("hotelInfo",hotelInfo);
        return map;

    }

    @Log("根据时间获取商家数量")
    @RequestMapping("selectTime")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String selectTime(AdvertisingOrder advertisingOrder,ModelMap modelMap){
        HotelInfo hotelInfo = new HotelInfo();
        hotelInfo.setHotelCodeId(advertisingOrder.getHotelCodeId());
        Integer num = hotelInfoService.getHotelInfo(hotelInfo);
        advertisingOrder.setHotelNumber(num);
        modelMap.addAttribute("advertisingOrder",advertisingOrder);
        return "hotelinfo/selectTimeForm";
    }

    @Log("获取广告位信息")
    @RequestMapping("getUploadInfo")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public Grid getUploadInfo(AdvertisingOrder advertisingOrder,GridParam gridParam){
        Grid grid =hotelInfoService.getUploadInfo(advertisingOrder,gridParam);
        return grid;
    }


/*************************************************************************************/
    @Log("酒店类别管理模块界面1.5版本")
    @RequestMapping("HotelCategoryFrom")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public String HotelCategoryFrom(HotelInfo hotelInfo, ModelMap modelMap) {
        modelMap.addAttribute("hotelInfo", hotelInfo);
        return "hotelinfo/lyHotelCategoryManagementList";
    }

    @Log("查询酒店类别管理列表模块界面1.5版本")
    @RequestMapping("HotelCategoryList")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:view")
    public Grid HotelCategoryList(HotelInfo hotelInfo, GridParam param) {
        Grid grid = hotelInfoService.getHotelCategoryListByName(hotelInfo, param);
        return grid;
    }

    @Log("更新酒店启用 停用状态 1.5版本")
    @RequestMapping("updateHotelStatus")
    @ResponseBody
    @RequiresPermissions("hotelinfo:hotelInfo:edit")
    public Json updateHotelStatus(HotelInfo hotelInfo) {
        Json json = new Json();
        try {
            hotelInfoService.updateHotelStatusById(hotelInfo);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("更新失败！ msg={}", e.getMessage(), e);
            json.setSuccess(false);
            json.setMsg("更新失败！");
        }
        return json;
    }

    @Log("新增酒店编码界面1.5版本")
    @RequestMapping("hotelCodeFrom")
    @RequiresPermissions("hotelinfo:hotelInfo:view")
        public String hotelCodeFrom(HotelInfo hotelInfo, ModelMap modelMap) {
        modelMap.addAttribute("hotelInfo", hotelInfo);
        return "hotelinfo/lyHotelCodeForm";
    }

    @Log("保存酒店编码信息 1.5版本")
    @RequestMapping("saveHotelCodeInfo")
    @RequiresPermissions("hotelinfo:hotelInfo:edit")
    public String saveHotelCodeInfo(HotelInfo hotelInfo, ModelMap modelMap) {
        try {
            if (hotelInfo.getId() == null){
                if (hotelInfo != null){
                    if (hotelInfo.getHotelName() == ""){
                        modelMap.addAttribute("error", "请填写酒店名称！");
                        return hotelCodeFrom(hotelInfo,modelMap);
                    }
                }else {
                    modelMap.addAttribute("error", "请填写信息！");
                    return hotelCodeFrom(hotelInfo,modelMap);
                }
                //判断酒店名称是否有重复
                hotelInfo.setStatus(1);
                if (hotelInfoService.hotelInfoByName(hotelInfo)!= null){
                    modelMap.addAttribute("error", "酒店名称已被占用！");
                    return hotelCodeFrom(hotelInfo,modelMap);
                }
            }

            if (hotelInfo != null){
                if (hotelInfo.getHotelCodeName() == ""){
                    modelMap.addAttribute("error", "请填写酒店编码！");
                    return hotelCodeFrom(hotelInfo,modelMap);
                }
            }else {
                modelMap.addAttribute("error", "请填写信息！");
                return hotelCodeFrom(hotelInfo,modelMap);
            }
            //判断酒店编码是否有重复
            hotelInfo.setStatus(2);
            if (hotelInfoService.hotelInfoByName(hotelInfo)!= null){
                modelMap.addAttribute("error", "酒店编码已被占用！");
                return hotelCodeFrom(hotelInfo,modelMap);
            }

            hotelInfoService.saveCode(hotelInfo);
        } catch (Exception e) {
            modelMap.addAttribute("error", "保存失败！");
            return hotelCodeFrom(hotelInfo,modelMap);
        }
        return successPath;
    }
}
