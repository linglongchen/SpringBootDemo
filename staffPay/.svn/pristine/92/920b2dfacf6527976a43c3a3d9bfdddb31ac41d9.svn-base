package com.chunqiu.mrjuly.modules.mine.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.Echarts;
import com.chunqiu.mrjuly.common.utils.Series;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.modules.hotelinfo.model.DepartmentInfoList;
import com.chunqiu.mrjuly.modules.hotelinfo.service.DepartmentInfoService;
import com.chunqiu.mrjuly.modules.install.model.FeedbackType;
import com.chunqiu.mrjuly.modules.install.service.FeedbackTypeService;
import com.chunqiu.mrjuly.modules.mine.model.OpinionsSuggestions;
import com.chunqiu.mrjuly.modules.mine.service.OpinionsSuggestionsService;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * 意见与建议
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/mine/opinions")
public class OpinionsSuggestionsController extends BaseController {

	@Autowired
	private OpinionsSuggestionsService opinionsSuggestionsService;

	@Autowired
	private FeedbackTypeService feedbackTypeService;

	@Autowired
	private DepartmentInfoService departmentInfoService;

	/**
	 * 登录到意见与建议页面
	 * @return
	 */
	@Log("登录到意见与建议页面")
	@RequestMapping("index")
	@RequiresPermissions("mine:opinions:view")
	public String index(FeedbackType feedbackType, DepartmentInfoList departmentInfoList, ModelMap model){
		feedbackType.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		departmentInfoList.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		List<FeedbackType> list = feedbackTypeService.findAll(feedbackType);
		List<DepartmentInfoList> departmentList = departmentInfoService.findAll(departmentInfoList);
		model.addAttribute("list",list);
		model.addAttribute("departmentList",departmentList);
		return "mine/opinionsSuggestionsList";
	}

	/**
	 * 初始化意见与建议数据页面
	 * @param opinionsSuggestions
	 * @param param
	 * @return
	 */
	@Log("意见与建议页面初始换列表")
	@ResponseBody
	@RequestMapping("list")
	@RequiresPermissions("mine:opinions:view")
	public Grid list(OpinionsSuggestions opinionsSuggestions, GridParam param){
		opinionsSuggestions.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		return opinionsSuggestionsService.findPage(opinionsSuggestions, param);
	}

    /**
     * 查看反馈数据详情
     *
     * @param opinionsSuggestions
     * @param model
     * @return
     */
    @Log("查看详情")
    @RequestMapping("form")
	@RequiresPermissions("mine:opinions:view")
    public String form(OpinionsSuggestions opinionsSuggestions, ModelMap model) {
		opinionsSuggestions = opinionsSuggestionsService.get(opinionsSuggestions.getId());
        model.addAttribute("opinionsSuggestions",opinionsSuggestions);
        if(opinionsSuggestions.getIsFeedback()==1){
            model.addAttribute("isFeedback", "是");
        }else if(opinionsSuggestions.getIsFeedback()==2){
            model.addAttribute("isFeedback", "否");
        }
        if (opinionsSuggestions.getFeedbackMode() == 0){
        	opinionsSuggestions.setContactInformation("暂无");
		}
		if (opinionsSuggestions.getObjectId() == 0){
			opinionsSuggestions.setDepartmentNames("所有部门");
		}

        return "mine/opinionsSuggestionsForm";
    }

	/**
	 * 登录到曲线图页面
	 * @param departmentInfoList
	 * @param model
	 * @return
	 */
	@Log("登录到曲线图")
	@RequestMapping("index1")
	@RequiresPermissions("mine:opinions:view")
	public String index1(DepartmentInfoList departmentInfoList,FeedbackType feedbackType, ModelMap model){
		departmentInfoList.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		feedbackType.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		List<DepartmentInfoList> departmentList = departmentInfoService.findAll(departmentInfoList);
		List<FeedbackType> feedbackTypeList = feedbackTypeService.findAll(feedbackType);
		model.addAttribute("departmentList",departmentList);
		model.addAttribute("feedbackTypeList",feedbackTypeList);
		return "mine/opinionsSuggestionBight";
	}

	/**
	 * 数据
	 * @param id
	 * @param type
	 * @param
	 * @param
	 * @param
	 * @return
	 */
	@Log("获取数据形成折线图")
	@SuppressWarnings("deprecation")
	@RequiresPermissions("user")
	@ResponseBody
	@RequestMapping(value="Echarts")
	public Echarts lineData(String id, String type, String isIncome, String createDate) {
		OpinionsSuggestions opinionsSuggestions = new OpinionsSuggestions();

		opinionsSuggestions.setCreateDate(new Date(createDate));
		//为时间设置，则自动赋值
		if(opinionsSuggestions.getCreateDate()==null){
			opinionsSuggestions.setCreateDate(new Date());
			Calendar calendar = Calendar.getInstance();    //得到日历
			calendar.setTime(new Date());                 //把当前时间赋给日历
			calendar.add(Calendar.DAY_OF_MONTH, -1);      //设置为前一天
			Date date = calendar.getTime();               //得到前一天的时间
			opinionsSuggestions.setCreateDate(date);
		}
		opinionsSuggestions.setHotelCodeId(UserUtils.getUser().getHotelCodeId());
		List<OpinionsSuggestions> getList = opinionsSuggestionsService.findList(opinionsSuggestions);    //查询获取数据
		List<String> category = new ArrayList<String>();
		List<BigDecimal>  index = new ArrayList<BigDecimal>();
		String getDate = null;
		BigDecimal getPrice = null;
		for(int i=0;i<getList.size();i++){                                     //循环获取数据
			OpinionsSuggestions getOrderCount = getList.get(i);
			/*getDate = DateUtils.formatDateTime(getOrderCount.getCreateLogDate());
			getPrice = getOrderCount.getPrice();*/
			category.add(getDate);
			index.add(getPrice);
		}
		List<String> legend = new ArrayList<String>(Arrays.asList(new String[]{"单位"}));//数据分组
		List<Series> series = new ArrayList<Series>();
		series.add(new Series("单位", "line",index));
		Echarts data=new Echarts(legend, category, series);
		return data;
	}



	@Log("统计收入折线图")
	@RequestMapping("getCharts2")
	@ResponseBody
	public Map<String,Object> getCharts2(OpinionsSuggestions opinionsSuggestions){
//		//为时间设置，则自动赋值
//		if(opinionsSuggestions.getCreateDate()==null){
//			opinionsSuggestions.setCreateDate(new Date());
//			Calendar calendar = Calendar.getInstance();    //得到日历
//			calendar.setTime(new Date());                 //把当前时间赋给日历
//			calendar.add(Calendar.DAY_OF_MONTH, -1);      //设置为前一天
//			Date date = calendar.getTime();               //得到前一天的时间
//			opinionsSuggestions.setCreateDate(date);
//		}
		Map<String,Object> map = new HashMap<>();
		List<OpinionsSuggestions> getList = opinionsSuggestionsService.getChart(opinionsSuggestions);    //查询获取数据
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		List<Integer>  count = new ArrayList<>();
		List<String> date = new ArrayList<>();
		for(int i=0;i<getList.size();i++){                                     //循环获取数据
			count.add(getList.get(i).getCount());
			if (getList.get(i).getCreateTime()!=null){
				date.add(getList.get(i).getCreateTime());
			}
		}
		map.put("date",date);
		map.put("count",count);
		return map;

	}
}
