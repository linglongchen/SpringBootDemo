package com.chunqiu.mrjuly.modules.system.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.easemob.server.example.comm.RegUser;
import com.chunqiu.mrjuly.common.easemob.server.example.comm.huanxin;
import com.chunqiu.mrjuly.common.exception.ServiceException;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.BeanValidators;
import com.chunqiu.mrjuly.common.utils.StringUtils;
import com.chunqiu.mrjuly.common.utils.excel.ExportExcel;
import com.chunqiu.mrjuly.common.utils.excel.ImportExcel;
import com.chunqiu.mrjuly.common.utils.publicBean;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.system.model.BankInfo;
import com.chunqiu.mrjuly.modules.system.model.CodeExport;
import com.chunqiu.mrjuly.modules.system.model.HotelCode;
import com.chunqiu.mrjuly.modules.system.service.SystemSetupService;
import com.google.common.collect.Lists;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;
import java.util.ArrayList;
import java.util.List;

/**
 * 系统设置
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/system/setup")
public class SystemSetupController extends BaseController {
    @Autowired
    private SystemSetupService systemSetupService;
    /**
     *总控平台系统设置模块下的对公账号界面
     * @return
     */
    @Log("登录系统系统设置对公账号界面")
    @RequestMapping("accountIndex")
    @RequiresPermissions("system:setup:view")
    public String accountIndex(ModelMap modelMap){
        //查询已有的对开账户信息
        BankInfo bankInfo = systemSetupService.bankInfo();
        modelMap.addAttribute("bankInfo", bankInfo);
        return "system/bank_card";
    }

    /**
     * 查询所有银行列表
     * @return
     */
    @Log("查询所有银行列表")
    @RequestMapping("bankList")
    @ResponseBody
    @RequiresPermissions("system:setup:view")
    public List<BankInfo> bankList() {
        //查询所有银行列表
        List<BankInfo> bankList = systemSetupService.bankList();
        return bankList;
    }

    /**
     * 保存对开账户信息
     * @param bankInfo
     * @return
     */
    @Log("保存对开账户信息")
    @RequestMapping("saveBankInfo")
    @RequiresPermissions("system:setup:edit")
    public String saveBankInfo(BankInfo bankInfo){
        try{
            BankInfo bankInfo1 = systemSetupService.bankInfo();
            if (bankInfo1 != null){
                systemSetupService.updateBankInfoById(bankInfo);
            }else {
                //新增对开账户信息
                systemSetupService.insertBank(bankInfo);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return "system/bank_card";
    }


    @Log("总控首页")
    @RequestMapping("controlIndex")
    @RequiresPermissions("system:setup:view")
    public String controlIndex(ModelMap model){
        return "system/controlIndex";
    }

    /**
     * 登录系统系统设置前缀编号设置
     * @param model
     * @return
     */
    @Log("登录系统系统设置前缀编号设置")
    @RequestMapping("hotelIndex")
    @RequiresPermissions("system:setup:view")
    public String hotelIndex(ModelMap model){
        return "system/hotelCode";
    }

    @Log("查询酒店前缀设备编码列表")
    @RequestMapping("codeList")
    @ResponseBody
    @RequiresPermissions("system:setup:view")
    public Grid codeList(HotelCode hotelCode,GridParam param) {
        return systemSetupService.findPage(hotelCode,param);
    }
    @Log("查询酒店前缀设备编码下拉列表")
    @RequestMapping("getSelect")
    @ResponseBody
    @RequiresPermissions("system:setup:view")
    public List<HotelCode> getSelect(){
        return systemSetupService.getSelect();
    }
    /**
     * 保存前缀编码页面
     * @param hotelCode
     * @return
     */
    @Log("添加保存前缀编码页面")
    @RequestMapping("saveHotel")
    @RequiresPermissions("system:setup:edit")
    public String saveHotel(HotelCode hotelCode,ModelMap model){
        model.addAttribute("hotelCode", hotelCode);
        return "system/hotelFrom";
    }


    /**
     * 保存前缀编码
     * @param hotelCode
     * @return
     */
    @Log("保存前缀编码")
    @RequestMapping("saveHotelInfo")
    @RequiresPermissions("system:setup:edit")
    public String saveHotelInfo(HotelCode hotelCode,ModelMap model){
        try{
            //新增前缀编码
            systemSetupService.insertCode(hotelCode);
        }catch (Exception e){
            if(e instanceof ServiceException){
                model.addAttribute("error", "当前酒店设备编码或者酒店名称已存在！");
            }else{
                model.addAttribute("error", "保存失败！");
            }
            return saveHotel(hotelCode,model);
        }
        return successPath;
    }


    /**
     * 酒店设备编码查看详情
     * @param model
     * @return
     */
    @Log("酒店设备编码查看详情")
    @RequestMapping("hotelInfo")
    @RequiresPermissions("system:setup:view")
    public String hotelInfo(HotelCode hotelCode,ModelMap model){
        model.addAttribute("hotelCode",hotelCode);
        return "system/hotelInfo";
    }

    /**
     * 查询当前前缀编码绑定的设备
     * @param hotelCode
     * @param param
     * @return
     */
    @Log("查询当前前缀编码绑定的设备")
    @RequestMapping("equipmentList")
    @ResponseBody
    @RequiresPermissions("system:setup:view")
    public Grid equipmentList(HotelCode hotelCode,GridParam param) {
        return systemSetupService.findCodePage(hotelCode,param);
    }


    /**
     * 编辑前缀编码
     * @param hotelCode
     * @param model
     * @return
     */
    @Log("编辑前缀编码")
    @RequestMapping("editHotel")
    @RequiresPermissions("system:setup:edit")
    public String editHotel(HotelCode hotelCode,ModelMap model){
        try{
            systemSetupService.updateCodeById(hotelCode);
        }catch (Exception e){
            if(e instanceof ServiceException){
                model.addAttribute("error", "前缀编码已存在！");
            }else{
                model.addAttribute("error", "保存失败！");
            }
           return hotelInfo(hotelCode,model);
        }
        return successPath;
    }


    /**
     * 查询外壳设备编号
     * @param hotelCode
     * @param param
     * @return
     */
    @Log("查询外壳设备编号")
    @RequestMapping("shellCodingList")
    @ResponseBody
    @RequiresPermissions("system:setup:view")
    public Grid shellCodingList(HotelCode hotelCode,GridParam param) {
        return systemSetupService.findShellCodingList(hotelCode,param);
    }



    /**
     * 设备外壳编号设置
     * @param hotelCode
     * @param model
     * @return
     */
    @Log("设备外壳编号设置")
    @RequestMapping("uniqueEncodingIndex")
    @RequiresPermissions("system:setup:view")
    public String uniqueEncodingIndex(HotelCode hotelCode,ModelMap model){
        return "system/uniqueEncoding";
    }


    /**
     * 导入设备编码
     * @param file
     * @return
     */
    @RequestMapping(value = "import", method = RequestMethod.POST)
    @ResponseBody
    @RequiresPermissions("system:setup:edit")
    public Json importFile(MultipartFile file) {
        Json json = new Json();
        try {
            int successNum = 0;     //导入成功条数计数器
            int failureNum = 0;     //导入失败条数计数器
            ImportExcel ei = new ImportExcel(file, 1, 0);
            List<CodeExport> list = ei.getDataList(CodeExport.class);
            List<CodeExport> codeExportList = new ArrayList<>();
            if (list.size() > 0){
                //创建IM用户list
                List<RegUser> regUserList = new ArrayList<>();
                for (int i = 0;i<list.size();i++) {
                    if (StringUtils.isNotBlank(list.get(i).getUniqueEncoding())){
                        RegUser regUser = new RegUser();
                        regUser.setUsername(list.get(i).getUniqueEncoding());
                        regUser.setPassword("666666");
                        regUserList.add(regUser);
                        list.get(i).preInsert();
                        try {
                            BeanValidators.validateWithException(validator, list.get(i).getUniqueEncoding());    //通过对象上注解验证数据完整性
                            /*   System.out.print("外壳编码"+ vo.getUniqueEncoding() );
                             */   successNum ++;
                            codeExportList.add(list.get(i));
                        } catch (ConstraintViolationException ex) {
                            ex.printStackTrace();
                            failureNum ++;
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            failureNum ++;
                        }
                    }
                }
                //新增外壳设备编号
                systemSetupService.insertShellCoding(codeExportList);
                //创建IM用户
                huanxin.reg(regUserList);
            }
            if (failureNum > 0) {
                json.setSuccess(false);
                json.setMsg("成功导入 " + successNum + " 条demo，失败" + + failureNum + " 条demo");
                return json;
            }
            json.setSuccess(true);
            json.setMsg("已成功导入 " + successNum + " 条demo");
            return json;
        } catch (Exception e) {
            e.printStackTrace();

            json.setSuccess(false);
            json.setMsg("导入demo失败");
        }
        return json;
    }

    /**
     * 下载导入数据模板
     *
     * @param response
     * @param map
     * @return
     */
    @RequestMapping(value = "import/template")
    @ResponseBody
    @RequiresPermissions("system:setup:view")
    public void importFileTemplate(HttpServletResponse response, ModelMap map) {
        try {
            String fileName = "外壳设备编码数据导入模板.xlsx";
            List<CodeExport> list = Lists.newArrayList();
            CodeExport vo = new CodeExport();
            vo.setUniqueEncoding("ceshibianma1");
            list.add(vo);
            CodeExport vo1 = new CodeExport();
            vo1.setUniqueEncoding("ceshibianma2");
            list.add(vo1);
            new ExportExcel("外壳设备编码数据(与设备外壳编码一定要保持一致!)", CodeExport.class, 2).setDataList(list).write(response, fileName).dispose();
        } catch (Exception e) {
            addMessage(map, "导入模板下载失败！失败信息：" + e.getMessage());
        }
    }


    /**
     * 查询所有酒店前缀编码
     * @param model
     * @return
     */
    @Log("查询所有酒店前缀编码列表")
    @RequestMapping("codingInfoIndex")
    @RequiresPermissions("system:setup:view")
    public String codingInfoIndex(HotelCode hotelCode,ModelMap model){
        List<HotelCode> hotelCodeList = systemSetupService.hotelCodingList();
        model.addAttribute("hotelCodeList",hotelCodeList);
        model.addAttribute("hotelCode",hotelCode);
        return "system/codingInfo";
    }
    @Log("查询所有酒店前缀编码列表")
    @RequestMapping("codingInfoList")
    @ResponseBody
    @RequiresPermissions("system:setup:view")
    public List<HotelCode> codingInfoList(HotelCode hotelCode){
        List<HotelCode> hotelCodeList = systemSetupService.hotelCodingList();
       return hotelCodeList;
    }


    /**
     * 编辑 归入
     * @param hotelCode
     * @param model
     * @return
     */
    @Log("编辑归入酒店前缀编码")
    @RequestMapping("includeCode")
    @RequiresPermissions("system:setup:edit")
    public String includeCode(HotelCode hotelCode,ModelMap model){
        try{
            //单条归入前缀编码
            if (hotelCode.getType() == 2){
                systemSetupService.SingleCode(hotelCode);
             //修改前缀编码
            }else if (hotelCode.getType() == 1){
                systemSetupService.updateCodeBindingById(hotelCode);
            }else if (hotelCode.getType() == 3){
                List<HotelCode> hotelCodeList = new ArrayList<>();
                String[] idStr = hotelCode.getIdList().split(",");
                for (int i = 0;i<idStr.length;i++){
                    HotelCode hotelCode1 = new HotelCode();
                    hotelCode1.preUpdate();
                    hotelCode1.setHotelCode(hotelCode.getHotelCode());
                    hotelCode1.setId(Long.parseLong(idStr[i]));
                    hotelCodeList.add(hotelCode1);
                }
                systemSetupService.insertManyCodeById(hotelCodeList);
            }

        }catch (Exception e){
            e.printStackTrace();
        }
        return successPath;
    }


    /**
     * 删除设备外壳编号
     * @param hotelCode
     * @param model
     * @return
     */
    @Log("删除设备外壳编号")
    @RequestMapping("deleteCode")
    @RequiresPermissions("system:setup:edit")
    public String deleteCode(HotelCode hotelCode,ModelMap model){
        try{
            systemSetupService.deleteCodeById(hotelCode);
        }catch (Exception e){
            e.printStackTrace();
        }
        return successPath;
    }


    /**
     * 单条断开设备外壳编号
     * @param hotelCode
     * @param model
     * @return
     */
    @Log("单条断开设备外壳编号")
    @RequestMapping("singleBreak")
    @RequiresPermissions("system:setup:edit")
    public String singleBreak(HotelCode hotelCode,ModelMap model){
        try{
            systemSetupService.breakEncodingById(hotelCode);
        }catch (Exception e){
            e.printStackTrace();
        }
        return successPath;
    }

    @Log("多条断开设备外壳编号")
    @RequestMapping("multipleBreak")
    @RequiresPermissions("system:setup:edit")
    public String multipleBreak(HotelCode hotelCode,ModelMap model){
        try{
            List<HotelCode> hotelCodeList = new ArrayList<>();
            String[] idStr = hotelCode.getIdList().split(",");
            for (int i = 0;i<idStr.length;i++){
                HotelCode hotelCode1 = new HotelCode();
                hotelCode1.preUpdate();
                hotelCode1.setId(Long.parseLong(idStr[i]));
                hotelCodeList.add(hotelCode1);
            }
            systemSetupService.multipleEncodingById(hotelCodeList);
        }catch (Exception e){
            e.printStackTrace();
        }
        return successPath;
    }


    @Log("删除前缀")
    @RequestMapping("deletePrefixCode")
    @RequiresPermissions("system:setup:edit")
    public String deletePrefixCode(HotelCode hotelCode,ModelMap model){
        try{
                systemSetupService.deletePrefixCode(hotelCode);
        }catch (Exception e){
            e.printStackTrace();
        }
        return successPath;
    }


    @Log("token失效跳转登录页面中间处理")
    @RequestMapping("tokenUser")
    public String tokenUser(ModelMap modelMap){
        //获取当前操作系统
        String osName = System.getProperty("os.name");
        String fileName = osName.toLowerCase().contains("windows")? publicBean.WINDOWIP: publicBean.LUNIXIP;
        modelMap.addAttribute("fileName",fileName);
        return "system/tokenLogin";
    }

}
