package com.chunqiu.mrjuly.modules.shophotel.controller;

import com.chunqiu.mrjuly.common.annotation.Limit;
import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.DateUtils;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.common.vo.Result;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.service.HotelInfoService;
import com.chunqiu.mrjuly.modules.install.model.CustomerOrder;
import com.chunqiu.mrjuly.modules.install.service.CustomerOrderService;
import com.chunqiu.mrjuly.modules.qrcode.model.QrCodeInfo;
import com.chunqiu.mrjuly.modules.qrcode.service.QrCodeInfoService;
import com.chunqiu.mrjuly.modules.shophotel.model.ShopHotel;
import com.chunqiu.mrjuly.modules.shophotel.service.ShopHotelService;
import com.chunqiu.mrjuly.modules.shopinfo.model.ShopInfo;
import com.chunqiu.mrjuly.modules.shopinfo.service.ShopInfoService;

import lombok.extern.slf4j.Slf4j;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * 申请租借期Controller
 *
 * @author chen
 * @version 2019-03-15
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/shophotel/shopHotel")
public class ShopHotelController extends BaseController {

    @Autowired
    private ShopHotelService shopHotelService;
    @Autowired
    private ShopInfoService shopInfoService;
    @Autowired
    private CustomerOrderService customerOrderService;
    @Autowired
    private QrCodeInfoService qrCodeInfoService;
    @Autowired
    private HotelInfoService hotelInfoService;

    /**
     * @Description：申请租借期列表页面
     * @author chen
     */
    @Limit(key = "shophotel/shopHotelindex", period = 30, count = 5, name = "申请租借期列表页面", prefix = "limit")
    @Log("打开申请租借期列表页面")
    @RequestMapping("index")
    @RequiresPermissions("shophotel:shopHotel:view")
    public String index(ModelMap modelMap) {
    	return "shophotel/shopHotelList";
    }

    /**
     * @Description：申请租借期列表数据
     * @author chen
     */
    @Limit(key = "shophotel/shopHotellist", period = 30, count = 5, name = "申请租借期列表数据", prefix = "limit")
    @Log("获取申请租借期列表数据")
    @RequestMapping("list")
    @ResponseBody
    @RequiresPermissions("shophotel:shopHotel:view")
    public Grid list(ShopHotel shopHotel, GridParam param) {
        shopHotel.setShopId(UserUtils.getUser().getBusinessId());
        return shopHotelService.findPage(shopHotel, param);
    }
    @Limit(key = "shophotel/shopHotellist", period = 30, count = 5, name = "申请租借期列表数据", prefix = "limit")
    @Log("获取申请租借期列表数据")
    @RequestMapping("list2")
    @ResponseBody
    @RequiresPermissions("shophotel:shopHotel:view")
    public Grid list2(ShopHotel shopHotel, GridParam param) {
        shopHotel.setShopId(UserUtils.getUser().getBusinessId());
        return shopHotelService.findPage2(shopHotel, param);
    }


    /**
     * @Description：申请租借期表单页面--新增/编辑
     * @author chen
     */
    @Limit(key = "shophotel/shopHotelform", period = 30, count = 5, name = "申请租借期-新增/编辑页面", prefix = "limit")
    @Log("打开申请租借期表单页面--新增/编辑")
    @RequestMapping(value = "form")
    @RequiresPermissions("shophotel:shopHotel:view")
    public String form(ShopHotel shopHotel, ModelMap model) {
        shopHotel = shopHotelService.get(shopHotel.getId());
        model.addAttribute("shopHotel", shopHotel);
        return "shophotel/shopHotelForm";
    }

    /**
     * @Description：申请租借期新增/编辑 保存方法
     * @author chen
     */
    @Limit(key = "shophotel/shopHotelsaveShopHotel", period = 30, count = 5, name = "申请租借期-保存页面", prefix = "limit")
    @Log("新增/编辑申请租借期")
    @RequestMapping("saveShopHotel")
    @RequiresPermissions("shophotel:shopHotel:edit")
    public String saveShopHotel(ShopHotel shopHotel, ModelMap model) {
        try {
            shopHotelService.save(shopHotel);
        } catch (Exception e) {
            log.error("保存失败！ msg={}", e.getMessage(), e);

            model.addAttribute("error", "保存失败！");
            return form(shopHotel, model);
        }
        return successPath;
    }

    /**
     * @Description：申请租借期数据删除方法
     * @author chen
     */
    @Limit(key = "shophotel/shopHoteldelShopHotel", period = 30, count = 5, name = "申请租借期-删除", prefix = "limit")
    @Log("删除申请租借期")
    @RequestMapping("delShopHotel")
    @ResponseBody
    @RequiresPermissions("shophotel:shopHotel:edit")
    public Json delShopHotel(ShopHotel shopHotel) {
        Json json = new Json();
        try {
            shopHotelService.delete(shopHotel);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("删除失败！ msg={}", e.getMessage(), e);

            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }
    @Log("商家管理列表页面")
    @RequestMapping("ShopManage")
    @RequiresPermissions("shophotel:shopHotel:view")
    public String ShopManage(){
        return "shopinfo/ShopManageList";
    }



    @Log("租赁申请记录查看详情")
    @RequestMapping("ShopManageForm")
    @RequiresPermissions("shophotel:shopHotel:view")
    public String ShopManageForm(ShopHotel shopHotel, ModelMap model){
        ShopInfo shopInfo = new ShopInfo();
        shopInfo.setId(shopHotel.getShopId());
        shopHotel = shopHotelService.get(shopHotel.getId());
        shopInfo = shopInfoService.get(shopInfo.getId());
        if (shopInfo!=null){
            model.addAttribute("shopInfo", shopInfo);
            model.addAttribute("shopHotel",shopHotel);
            List<String> list = new ArrayList<>();
            String[] string = shopInfo.getShopImgs().split(",");
            for (int i=0;i<string.length;i++){
                list.add(string[i]);
            }
            model.addAttribute("showImageList",list);
        }
        return "shophotel/shopHotelForm";
    }


    @Log("在线服务统计")
    @RequestMapping("ShopService")
    @RequiresPermissions("shophotel:shopHotel:view")
    public String ShopService() {
        return "shopinfo/ShopServiceDateCount";
    }
    @Log("登录我的-订单数据统计页面")
    @RequestMapping("index2")
    @RequiresPermissions("shophotel:shopHotel:view")
    public String index2(CustomerOrder customerOrder, ModelMap modelMap){
        modelMap.addAttribute("customerOrder",customerOrder);
        return "install/customerOrderList2";
    }
    @Log("打开二维码详情列表页面")
    @RequestMapping("index3")
    @RequiresPermissions("shophotel:shopHotel:view")
    public String index(QrCodeInfo qrCodeInfo, ModelMap modelMap){
        modelMap.addAttribute("objectId",qrCodeInfo.getObjectId());
        return "qrcode/qrCodeInfoList";
    }
    @Log("查询我的-订单数据统计列表")
    @ResponseBody
    @RequestMapping("getList")
    @RequiresPermissions("shophotel:shopHotel:view")
    public Grid getList(CustomerOrder customerOrder, GridParam param){
        return customerOrderService.getList(customerOrder, param);
    }
    /**
     * 订单状态
     * @param customerOrder
     * @return
     */
    @Log("订单状态")
    @RequestMapping("isPut")
    @ResponseBody
    @RequiresPermissions("shophotel:shopHotel:view")
    public Json isPut(CustomerOrder customerOrder){
        Json json = new Json();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try{
            if(customerOrder.getStatus() ==0){
                customerOrder.setStatus(1);
                customerOrder.setOrderTime(new Date());
                customerOrder.setSinglePerson(UserUtils.getUser().getId());
                customerOrder.setResponseTime(DateUtils.getTimeDifference(dateFormat.format(customerOrder.getOrderTime()),customerOrder.getDateString()));
            }else if(customerOrder.getStatus() ==1){
                customerOrder.setStatus(2);
                customerOrder.setCompletionTime(new Date());
                customerOrder.setCompletionPerson(UserUtils.getUser().getId());
                customerOrder.setTotalTime(DateUtils.getTimeDifference(dateFormat.format(customerOrder.getCompletionTime()),customerOrder.getDateString()));
            }
            customerOrderService.save(customerOrder);
            json.setSuccess(true);
        }catch(Exception e){
            e.printStackTrace();
            json.setSuccess(false);
            json.setMsg("操作失败！");
        }
        return json;
    }
   
    @Log("打开展业申请页面")
    @RequestMapping("applyHotel")
    @RequiresPermissions("shophotel:shopHotel:view")
    public String applyHotel(ModelMap model) {
    	Integer shopId = UserUtils.getUser().getBusinessId();
    	ShopInfo shopInfo = shopInfoService.get(shopId);
    	model.addAttribute("shopInfo", shopInfo);
    	HotelInfo hotelInfo = new HotelInfo(); 
    	hotelInfo.setId(shopId);
        List<HotelInfo> hotelInfoList = hotelInfoService.findAllList9(hotelInfo);
        model.addAttribute("hotelInfoList",hotelInfoList);
        return "shophotel/applyHotel";
    }
    
    @Log("展业续期页面")
    @RequestMapping("renewalShopHotel")
    @RequiresPermissions("shophotel:shopHotel:edit")
    public String renewalShopHotel(ShopHotel shopHotel, ModelMap model) {
    	Integer shopId = UserUtils.getUser().getBusinessId();
    	Integer hotelCodeId = shopHotel.getHotelCodeId();
    	ShopInfo shopInfo = shopInfoService.get(shopId);
    	HotelInfo hotelInfo = hotelInfoService.get(hotelCodeId);
    	shopHotel.setShopId(shopId);
    	model.addAttribute("hotelInfo", hotelInfo);
    	model.addAttribute("shopHotel", shopHotel);
    	model.addAttribute("distance", distanceByAddress(hotelInfo, shopInfo).intValue());
    	return "shophotel/renewalHotel";
    }
    
    /**
     * 保存展业申请
     */
    @Log("保存展业申请")
    @RequestMapping("saveApplyHotel")
    @ResponseBody
    @RequiresPermissions("shophotel:shopHotel:edit")
    public Json saveApplyHotel(ShopHotel shopHotel, ModelMap model) {
    	Json result = new Json();
    	Integer shopId = UserUtils.getUser().getBusinessId();
    	Integer hotelCodeId = shopHotel.getHotelCodeId();
    	ShopInfo shopInfo = shopInfoService.get(shopId);
    	if (shopInfo.getStatus() == 1) {
    		result.setMsg("商家暂未营业，请核对！");
    		result.setSuccess(false);
            return result;
		}
    	HotelInfo hotelInfo = hotelInfoService.get(hotelCodeId);
    	if (hotelInfo.getIsFreeze() == 1) {
    		result.setMsg("酒店暂未营业，请核对！");
    		result.setSuccess(false);
            return result;
    	}
    	ShopHotel record = new ShopHotel();
    	record.setHotelCodeId(hotelCodeId);
    	record.setShopId(shopId);
    	record.setStatus(0);
    	int row = shopHotelService.selectShopHotelCountByCondition(record);
    	if (row > 0) {
    		result.setMsg("已向该酒店申请展业，请耐心等待审核！");
    		result.setSuccess(false);
            return result;
		}
    	record.setLeaseTerm(shopHotel.getLeaseTerm());
    	record.setOpeningType(shopHotel.getOpeningType());
    	record.setDistance(distanceByAddress(hotelInfo, shopInfo));
    	shopHotelService.insertSelective(record);
		result.setMsg("展业申请成功，请耐心等待审核！");
		result.setSuccess(true);
        return result;
    }
    
    /**
     * 展业申请续期
     */
    @Log("保存展业续期")
    @RequestMapping("saveRenewal")
    @ResponseBody
    @RequiresPermissions("shophotel:shopHotel:edit")
    public Boolean saveRenewal(ShopHotel shopHotel, ModelMap model) {
    	boolean result = false;
    	Integer shopId = UserUtils.getUser().getBusinessId();
    	Integer hotelCodeId = shopHotel.getHotelCodeId();
    	ShopInfo shopInfo = shopInfoService.get(shopId);
    	if (shopInfo.getStatus() == 1) {
    		model.addAttribute("error", "商家暂未营业，请核对！");
    		return result;
    	}
    	HotelInfo hotelInfo = hotelInfoService.get(hotelCodeId);
    	if (hotelInfo.getIsFreeze() == 1) {
    		model.addAttribute("error", "酒店暂未营业，请核对！");
    		return result;
    	}
    	ShopHotel record = new ShopHotel();
    	record.setHotelCodeId(hotelCodeId);
    	record.setShopId(shopId);
    	record.setStatus(3);
    	int row = shopHotelService.selectShopHotelCountByCondition(record);
    	if (row > 0) {
        	record.setStatus(0);
    		record.setLeaseTerm(shopHotel.getLeaseTerm());
    		record.setOpeningType(shopHotel.getOpeningType());
    		record.setDistance(distanceByAddress(hotelInfo, shopInfo));
    		record.setId(shopHotel.getId());
    		shopHotelService.updateByPrimaryKeySelective(record);
    		model.addAttribute("success", "展业续期成功，请耐心等待审核！");
    		result = true;
    	}
    	return result;
    }
   
    /**
     * 计算距离
     * @return 单位米
     * @author wy
     */
    private Double distanceByAddress(HotelInfo hotelInfo, ShopInfo shopInfo) {
    	double hotelLat = Double.parseDouble(hotelInfo.getHotelLat());
    	double hotelLng = Double.parseDouble(hotelInfo.getHotelLng());
    	double shopLng = Double.parseDouble(shopInfo.getShopLat());
        double shopLat = Double.parseDouble(shopInfo.getShopLng());
        
        double hotelLatCir = hotelLat * Math.PI / 180;
        double shopLatCir = shopLat * Math.PI / 180;
        double lat = hotelLatCir - shopLatCir;
        double hotelLngCir = hotelLng * Math.PI / 180;
        double shopLngCir = shopLng * Math.PI / 180;
        double lon = hotelLngCir - shopLngCir;
        // 地球半径
        double R = 6378137;
        Double distance = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(lat / 2), 2)
                + Math.cos(hotelLatCir) * Math.cos(shopLatCir)
                * Math.pow(Math.sin(lon / 2), 2)));
        distance = distance * R;
        distance = Math.round(distance * 10000d) / 10000d;
        return distance;
    }
}