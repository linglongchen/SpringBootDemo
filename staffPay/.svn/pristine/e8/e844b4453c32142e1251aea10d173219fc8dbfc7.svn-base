package com.chunqiu.mrjuly.modules.flowsheetinfo.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.flowsheetinfo.model.FlowSheetInfo;
import com.chunqiu.mrjuly.modules.flowsheetinfo.service.FlowSheetInfoService;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * 充扣流水单Controller
 *
 * @author chen
 * @version 2019-03-15
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/flowsheetinfo/flowSheetInfo")
public class FlowSheetInfoController extends BaseController {

    @Autowired
    private FlowSheetInfoService flowSheetInfoService;

    /**
     * @Description：充扣流水单列表页面
     * @author chen
     */
    @Log("打开充扣流水单列表页面")
    @RequestMapping("index")
    @RequiresPermissions("flowsheetinfo:flowSheetInfo:view")
    public String index() {
        return "flowsheetinfo/flowSheetInfoList";
    }

    /**
     * @Description：充扣流水单列表数据
     * @author chen
     */
    @Log("获取充扣流水单列表数据")
    @RequestMapping("list")
    @ResponseBody
    @RequiresPermissions("flowsheetinfo:flowSheetInfo:view")
    public Grid list(FlowSheetInfo flowSheetInfo, GridParam param) {
        return flowSheetInfoService.findPage(flowSheetInfo, param);
    }

    /**
     * @Description：充扣流水单表单页面--新增/编辑
     * @author chen
     */

    @Log("打开充扣流水单表单页面--新增/编辑")
    @RequestMapping(value = "form")
    @RequiresPermissions("flowsheetinfo:flowSheetInfo:view")
    public String form(FlowSheetInfo flowSheetInfo, ModelMap model) {
        flowSheetInfo = flowSheetInfoService.get(flowSheetInfo.getId());
        model.addAttribute("flowSheetInfo", flowSheetInfo);
        return "flowsheetinfo/flowSheetInfoForm";
    }

    /**
     * @Description：充扣流水单新增/编辑 保存方法
     * @author chen
     */

    @Log("新增/编辑充扣流水单")
    @RequestMapping("saveFlowSheetInfo")
    @RequiresPermissions("flowsheetinfo:flowSheetInfo:edit")
    public String saveFlowSheetInfo(FlowSheetInfo flowSheetInfo, ModelMap model) {
        try {
            flowSheetInfoService.save(flowSheetInfo);
        } catch (Exception e) {
            log.error("保存失败！ msg={}", e.getMessage(), e);

            model.addAttribute("error", "保存失败！");
            return form(flowSheetInfo, model);
        }
        return successPath;
    }

    /**
     * @Description：充扣流水单数据删除方法
     * @author chen
     */

    @Log("删除充扣流水单")
    @RequestMapping("delFlowSheetInfo")
    @ResponseBody
    @RequiresPermissions("flowsheetinfo:flowSheetInfo:edit")
    public Json delFlowSheetInfo(FlowSheetInfo flowSheetInfo) {
        Json json = new Json();
        try {
            flowSheetInfoService.delete(flowSheetInfo);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("删除失败！ msg={}", e.getMessage(), e);

            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }

}