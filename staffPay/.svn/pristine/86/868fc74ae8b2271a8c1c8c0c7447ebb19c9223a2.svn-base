package com.chunqiu.mrjuly.modules.adviertisement.controller;

import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.enums.HotelTypeEnum;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.utils.UserUtils;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.modules.advertiserinfo.service.AdvertiserInfoService;
import com.chunqiu.mrjuly.modules.advertisingorder.model.AdvertisingOrder;
import com.chunqiu.mrjuly.modules.advertisingorder.model.DeliverySituation;
import com.chunqiu.mrjuly.modules.advertisingorder.model.HotelResourceCondition;
import com.chunqiu.mrjuly.modules.advertisingorder.service.AdvertisingOrderService;
import com.chunqiu.mrjuly.modules.adviertisement.model.AdvertisementUpload;
import com.chunqiu.mrjuly.modules.adviertisement.service.AdviertisementTypeService;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.service.HotelInfoService;
import com.chunqiu.mrjuly.modules.install.model.NoticeInfo;
import com.chunqiu.mrjuly.modules.shopinfo.model.ShopInfo;
import com.chunqiu.mrjuly.modules.shopinfo.service.ShopInfoService;
import com.chunqiu.mrjuly.modules.system.model.User;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 广告首页Controller
 *
 * @author wyy
 * @version 2019-03-19
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/adviertisement/AdvertisingPage")
@Transactional
public class AdvertisingPageController extends BaseController {

    @Autowired
    private AdvertiserInfoService advertiserInfoService;
    @Autowired
    private AdvertisingOrderService advertisingOrderService;
    @Autowired
    private AdviertisementTypeService adviertisementTypeService;
    @Autowired
    private HotelInfoService hotelInfoService;
    @Autowired
    private ShopInfoService shopInfoService;


    /**
     * @Description：广告首页页面
     * @author wyy
     */
    @Log("打开广告商首页页面")
    @RequestMapping("index")
    @RequiresPermissions("adviertisement:AdvertisingPage:view")
    public String index(AdvertisingOrder advertisingOrder, User user, NoticeInfo noticeInfo, AdvertisementUpload advertisementUpload, ModelMap model) {
        advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
        int count = advertisingOrderService.selCount(advertisingOrder);
        noticeInfo.setObjectId(UserUtils.getUser().getBusinessId());
        int cou = advertisingOrderService.selCou(noticeInfo);
        int count1 = advertisingOrderService.selCount1(advertisingOrder);
        int advertisingTime = advertisingOrderService.selTime(advertisingOrder);
        int advertisingState = advertisingOrderService.selState(advertisingOrder);
        List<AdvertisingOrder> list = advertisingOrderService.selContent(advertisingOrder);
        model.addAttribute("list", list);
        model.addAttribute("cou", cou);
        model.addAttribute("count", count);
        model.addAttribute("count1", count1);
        model.addAttribute("advertisingTime", advertisingTime);
        model.addAttribute("advertisingState", advertisingState);
        user.setBusinessId(advertisingOrder.getObjectId());
        User user1 = adviertisementTypeService.selUser(user);
        List<AdvertisingOrder> list1 = adviertisementTypeService.Page(advertisingOrder);
        model.addAttribute("user1", user1);
        model.addAttribute("list1", list1);
        List<AdvertisingOrder> advertisingOrderList = adviertisementTypeService.advertisingOrderByDate(advertisingOrder);
        model.addAttribute("advertisingOrderList", advertisingOrderList);
        return "adviertisement/AdvertisingPage";
    }

    @Log("统计收入折线图")
    @RequestMapping("getMap")
    @ResponseBody
    public Map<String, Object> getMap(AdvertisingOrder advertisingOrder) {
        Map<String, Object> map = new HashMap<>();
        advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
        List<AdvertisingOrder> list = advertisingOrderService.selContent(advertisingOrder);    //查询获取数据
        map.put("list", list);
        return map;

    }

    @Log("查看")
    @RequestMapping("getEndTime")
    @ResponseBody
    public Integer getEndTime(AdvertisingOrder advertisingOrder) {
        advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
        return adviertisementTypeService.timeExpire(advertisingOrder);
    }

    @Log("打开广告投放情况页面")
    @RequestMapping("index1")
    @RequiresPermissions("adviertisement:AdvertisingPage:view")
    public String index1(AdvertisingOrder advertisingOrder, ModelMap modelMap) {
        advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
        //今日投放
        advertisingOrder.setType(1);
        DeliverySituation deliverySituation = adviertisementTypeService.deliverySituationAdvertisementInfo(advertisingOrder);
        if (deliverySituation.getProjectionNumber() == null) {
            deliverySituation.setProjectionNumber(0);
        }
        //竞拍成功
        advertisingOrder.setType(2);
        DeliverySituation deliverySituation1 = adviertisementTypeService.deliverySituationAdvertisementInfo(advertisingOrder);
        if (deliverySituation1.getProjectionNumber() == null) {
            deliverySituation1.setProjectionNumber(0);
        }
        //今日到期
        advertisingOrder.setType(1);
        DeliverySituation deliverySituation2 = adviertisementTypeService.deliverySituationAdvertisementInfo(advertisingOrder);
        if (deliverySituation2.getProjectionNumber() == null) {
            deliverySituation2.setProjectionNumber(0);
        }
        //审核驳回
        advertisingOrder.setType(3);
        DeliverySituation deliverySituation3 = adviertisementTypeService.deliverySituationAdvertisementInfo(advertisingOrder);
        if (deliverySituation3.getProjectionNumber() == null) {
            deliverySituation3.setProjectionNumber(0);
        }

        //广告主列表
        List<DeliverySituation> deliverySituationList = adviertisementTypeService.masterInfoList(advertisingOrder);

        modelMap.addAttribute("deliverySituation", deliverySituation);
        modelMap.addAttribute("deliverySituation1", deliverySituation1);
        modelMap.addAttribute("deliverySituation2", deliverySituation2);
        modelMap.addAttribute("deliverySituation3", deliverySituation3);
        modelMap.addAttribute("list", deliverySituationList);
        return "advertisingorder/advertisingStatus";
    }

    @Log("打开广告订单列表页面2")
    @RequestMapping("index3")
    @RequiresPermissions("adviertisement:AdvertisingPage:view")
    public String index3(AdvertisingOrder advertisingOrder, ModelMap modelMap) {
        modelMap.addAttribute("orderType2", advertisingOrder.getOrderType2());
        modelMap.addAttribute("ordernumber", advertisingOrder.getOrdernumber());
        return "advertisingorder/advertisingOrderList3";
    }

    @Log("获取广告订单列表数据")
    @RequestMapping("list4")
    @ResponseBody
    @RequiresPermissions("adviertisement:AdvertisingPage:view")
    public Grid list4(AdvertisingOrder advertisingOrder, GridParam param) {
        advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
        Grid grid = advertisingOrderService.findPage2(advertisingOrder, param);
        List<AdvertisingOrder> advertisingOrderList = grid.getRows();
        for (AdvertisingOrder advertisingOrder1 : advertisingOrderList) {
            HotelInfo hotelInfo = new HotelInfo();
            hotelInfo.setHotelCodeId(advertisingOrder1.getHotelCodeId());
            int count = hotelInfoService.getHotelInfo(hotelInfo);
            advertisingOrder1.setQuantityDelivered(count);
        }
        grid.setRows(advertisingOrderList);
        return grid;
    }

    @Log("打开广告订单列表详情页面")
    @RequestMapping("orderDetail2")
    @RequiresPermissions("adviertisement:AdvertisingPage:view")
    public String orderDetail2(AdvertisingOrder advertisingOrder, ModelMap modelMap) {
        advertisingOrder = advertisingOrderService.getDetail(advertisingOrder);
        modelMap.addAttribute("advertisingOrder", advertisingOrder);
        return "advertisingorder/OrderDetailForm2";
    }

    @Log("获取广告订单列表数据")
    @RequestMapping("orderDetailList")
    @ResponseBody
    @RequiresPermissions("adviertisement:AdvertisingPage:view")
    public Grid orderDetailList(AdvertisingOrder advertisingOrder, GridParam param) {
        Grid grid = advertisingOrderService.orderDetailList(advertisingOrder, param);
        List<AdvertisingOrder> list = grid.getRows();
        for (AdvertisingOrder advertisingOrder1 : list) {
            String userName = UserUtils.getUser().getName();
            advertisingOrder1.setAdvertisementName(userName);
        }
        grid.setRows(list);
        return grid;
    }

    @Log("打开内容匹配")
    @RequestMapping("contentMatch")
    @RequiresPermissions("adviertisement:AdvertisingPage:view")
    public String contentMatch(AdvertisingOrder advertisingOrder, ModelMap modelMap) {
        if (advertisingOrder.getId() == null) {
            return "advertisingorder/contentMatchForm";
        } else {
            advertisingOrder = advertisingOrderService.get(advertisingOrder.getId());
            if (advertisingOrder.getDeliveryType() == 1) {
                advertisingOrder.setStateName("图文");
            } else {
                advertisingOrder.setStateName("视频");
            }
            String[] str = advertisingOrder.getHotelAdStandard().split(",");
            advertisingOrder.setStand(adviertisementTypeService.getType3Name(Integer.parseInt(str[2])).getType3Name());
            modelMap.addAttribute("advertisingOrder", advertisingOrder);
            return "advertisingorder/contentMatchForm";
        }
    }


    @Log("上传广告")
    @RequestMapping("uploadTest2")
    @RequiresPermissions("adviertisement:AdvertisingPage:view")
    public String uploadTest2(AdvertisingOrder advertisingOrder, ModelMap modelMap) {
        try {
            advertisingOrder.setObjectId(Integer.parseInt(UserUtils.getUser().getBusinessId().toString()));
            Integer count = advertisingOrderService.get(advertisingOrder.getId()).getUploadCount();
            ShopInfo shopInfo = shopInfoService.get(advertisingOrder.getObjectId());
            String[] strings2 = advertisingOrderService.getTypeData(advertisingOrder.getOrdernumber()).getStand().split(",");
            String num = adviertisementTypeService.getType3Name(Integer.parseInt(strings2[2])).getType3Num();
            Date date = new Date();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String string2 = simpleDateFormat.format(date).replaceAll("-", "");
            advertisingOrder.setAdvertisementMark(shopInfo.getShopNumber() + num + string2);
            if (count <= 0) {
                modelMap.addAttribute("error", "无制作机会");
                return "advertisingorder/contentMatchForm";
            } else {
                advertisingOrder.setUploadCount(count - 1);
                advertisingOrderService.uploadAdvertisement(advertisingOrder);
            }
        } catch (Exception e) {
            //异常回滚
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            e.printStackTrace();
            modelMap.addAttribute("error", "保存失败");
            return "advertisingorder/contentMatchForm";
        }
        modelMap.addAttribute("success", "1");
        return "advertisingorder/contentMatchForm";
    }

    @Log("登录消息通知页面")
    @RequestMapping("index4")
    @RequiresPermissions("adviertisement:AdvertisingPage:view")
    public String index() {
        return "install/notification";
    }


    @Log("打开广告订单列表页面")
    @RequestMapping("house")
    @RequiresPermissions("advertisingorder:housingSituation:view")
    public String index(AdvertisingOrder advertisingOrder, ModelMap modelMap) {
        List<HotelInfo> hotelInfoList = advertisingOrderService.hotelInfo();
        modelMap.addAttribute("advertisingOrderList", hotelInfoList);
        modelMap.addAttribute("type", 1);
        HotelInfo hotelInfo = new HotelInfo();
        hotelInfo.setHotelCodeId(advertisingOrder.getId());
        hotelInfo = hotelInfoService.hotelInfoById(hotelInfo);
        modelMap.addAttribute("hotelInfo", hotelInfo);
        return "advertisingorder/housingSituation";
    }

    @Log("打开房源列表页面")
    @RequestMapping("houseList")
    @RequiresPermissions("advertisingorder:housingSituation:view")
    public String houseList(HotelResourceCondition condition, ModelMap modelMap) {
        return "advertisingorder/hotelResourceList";
    }

    @Log("打开房源列表页面")
    @RequestMapping("selectHotelResource")
    @ResponseBody
    @RequiresPermissions("advertisingorder:housingSituation:view")
    public Grid selectHotelResource(HotelResourceCondition condition, GridParam param) {
        return adviertisementTypeService.selectHotelResourceList(condition, param);
    }

    @Log("打开资源列表酒店详情页面")
    @RequestMapping("resourceHotel")
    @RequiresPermissions("advertisingorder:housingSituation:view")
    public String resourceHotel(HotelInfo hotelInfo, ModelMap modelMap) {
        hotelInfo = hotelInfoService.hotelInfoById(hotelInfo);
        hotelInfo.setHotelType(HotelTypeEnum.getTypeNameByType(Integer.valueOf(hotelInfo.getHotelType())));
        hotelInfo.setHotelAdStandard(adviertisementTypeService.splitAdvertisingStandard(hotelInfo.getHotelAdStandard()));
        modelMap.addAttribute("hotelInfo", hotelInfo);
        return "advertisingorder/hotelResourceInfo";
    }

    @Log("打开资源列表投放情况页面")
    @RequestMapping(value = "hotelResourceAdvertising")
    @RequiresPermissions("advertisingorder:advertisingOrder:view")
    public String hotelResourceAdvertising(AdvertisingOrder advertisingOrder, ModelMap map) {
        map.addAttribute("hotelCodeId", advertisingOrder.getHotelCodeId());
        map.addAttribute("type", advertisingOrder.getType());
        return "advertisingorder/hotelResourceAdvertising";
    }

    @Log("查询资源列表投放情况")
    @RequestMapping(value = "hotelResourceAdvertisingList")
    @ResponseBody
    @RequiresPermissions("advertisingorder:advertisingOrder:view")
    public Grid hotelResourceAdvertisingList(AdvertisingOrder advertisingOrder, GridParam param) {
        advertisingOrder.setObjectId(UserUtils.getUser().getBusinessId());
        return advertisingOrderService.overviewOrderList(advertisingOrder, param);
    }


    @Log("打开地图")
    @RequestMapping(value = "map")
    @RequiresPermissions("advertisingorder:advertisingOrder:view")
    public String map() {
        return "advertisingorder/houseMap";
    }

    @Log("地图返回页面")
    @RequestMapping("returnMap")
    public String returnMap(AdvertisingOrder advertisingOrder, ModelMap modelMap) {
        modelMap.addAttribute("map", advertisingOrder);
        return successHouse;

    }
}