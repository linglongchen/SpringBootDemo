package com.chunqiu.mrjuly.modules.version.controller;

import com.chunqiu.mrjuly.common.annotation.Limit;
import com.chunqiu.mrjuly.common.annotation.Log;
import com.chunqiu.mrjuly.common.persistence.BaseController;
import com.chunqiu.mrjuly.common.vo.Grid;
import com.chunqiu.mrjuly.common.vo.GridParam;
import com.chunqiu.mrjuly.common.vo.Json;
import com.chunqiu.mrjuly.modules.hotelinfo.model.HotelInfo;
import com.chunqiu.mrjuly.modules.hotelinfo.service.HotelInfoService;
import com.chunqiu.mrjuly.modules.version.model.Version;
import com.chunqiu.mrjuly.modules.version.service.VersionService;

import lombok.extern.slf4j.Slf4j;

import org.apache.commons.collections.CollectionUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

import static com.chunqiu.mrjuly.common.utils.JPushUtil.sendNotifyClient;
import static com.chunqiu.mrjuly.common.utils.JPushUtil.sendNotifyServer;

/**
 * 版本管理Controller
 *
 * @author chen
 * @version 2019-04-19
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/version/version")
public class VersionController extends BaseController {

    @Autowired
    private VersionService versionService;
    @Autowired
    private HotelInfoService hotelInfoService;

    /**
     * @Description：版本管理列表页面
     * @author chen
     */
    @Log("打开版本管理列表页面")
    @RequestMapping("index")
    @RequiresPermissions("version:version:view")
    public String index() {
        return "version/versionList";
    }

    /**
     * @Description：版本管理列表数据
     * @author chen
     */
    @Log("获取版本管理列表数据")
    @RequestMapping("list")
    @ResponseBody
    @RequiresPermissions("version:version:view")
    public Grid list(Version version, GridParam param) {
        return versionService.findPage(version, param);
    }

    /**
     * @Description：版本管理表单页面--新增/编辑
     * @author chen
     */
    @Log("打开版本管理表单页面--新增/编辑")
    @RequestMapping(value = "form")
    @RequiresPermissions("version:version:view")
    public String form(Version version, ModelMap model) {
        version = versionService.get(version.getId());
        model.addAttribute("version", version);
        List<HotelInfo> hotels = hotelInfoService.getAllHetelIdAndName();
        model.addAttribute("hotels", hotels);
        return "version/versionForm";
    }

    /**
     * @Description：版本管理新增/编辑 保存方法
     * @author chen
     */
    @Log("新增/编辑版本管理")
    @RequestMapping("saveVersion")
    @RequiresPermissions("version:version:save")
    public String saveVersion(Version version, ModelMap model) {
        try {
        	if (version.getHotelId() != null && version.getHotelId() > 0) {
				HotelInfo hotelInfo = hotelInfoService.get(version.getHotelId().intValue());
				if (hotelInfo != null) {
					version.setHotelName(hotelInfo.getHotelName());
				} else {
					log.error("版本保存出错，未找到对应酒店数据！HotelID >>> " + version.getHotelId());
		            model.addAttribute("error", "保存失败，未找到对应酒店数据！");
		            return form(version, model);
				}
			} else {
				version.setHotelName("所有酒店");
			}
            versionService.save(version);
           /* //当前是新增操作
            if(version.getId() == null){
                //查询所有外壳编号
                List<Version> versionList = versionService.versionList(version);
                if(CollectionUtils.isNotEmpty(versionList)){
                    for (Version version1 : versionList){
                        if(1 == version.getType()){
                            sendNotifyClient(version1.getUniqueEncoding(),"新版本消息提醒!","您的机器已有新的版本需要更新!");
                        }else{
                            sendNotifyServer(version1.getUniqueEncoding(),"新版本消息提醒!","您的机器已有新的版本需要更新!");
                        }

                    }
                }
            }*/
        } catch (Exception e) {
            log.error("保存失败！ msg={}", e.getMessage(), e);

            model.addAttribute("error", "保存失败！");
            return form(version, model);
        }
        return successPath;
    }

    /**
     * @Description：版本管理数据删除方法
     * @author chen
     */
    @Log("删除版本管理")
    @RequestMapping("delVersion")
    @ResponseBody
    @RequiresPermissions("version:version:del")
    public Json delVersion(Version version) {
        Json json = new Json();
        try {
            versionService.delete(version);
            json.setSuccess(true);
        } catch (Exception e) {
            log.error("删除失败！ msg={}", e.getMessage(), e);

            json.setSuccess(false);
            json.setMsg("删除失败！");
        }
        return json;
    }

}
